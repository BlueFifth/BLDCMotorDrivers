
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f598  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001470  0800f768  0800f768  00010768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bd8  08010bd8  00012214  2**0
                  CONTENTS
  4 .ARM          00000008  08010bd8  08010bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010be0  08010be0  00012214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010be0  08010be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010be4  08010be4  00011be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08010be8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009440  20000214  08010dfc  00012214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009654  08010dfc  00012654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c6  00000000  00000000  00012244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f4  00000000  00000000  0002d70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001249  00000000  00000000  000338a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d93  00000000  00000000  00034ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa2f  00000000  00000000  0005d87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7289  00000000  00000000  0007d2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d4  00000000  00000000  00164578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016be4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f750 	.word	0x0800f750

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	0800f750 	.word	0x0800f750

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <MX_ADC1_Init+0xc8>)
 8001080:	4a2a      	ldr	r2, [pc, #168]	@ (800112c <MX_ADC1_Init+0xcc>)
 8001082:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <MX_ADC1_Init+0xc8>)
 8001086:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800108a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108c:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <MX_ADC1_Init+0xc8>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001092:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <MX_ADC1_Init+0xc8>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <MX_ADC1_Init+0xc8>)
 800109a:	2200      	movs	r2, #0
 800109c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010ae:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <MX_ADC1_Init+0xd0>)
 80010b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010cc:	4816      	ldr	r0, [pc, #88]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010ce:	f005 f937 	bl	8006340 <HAL_ADC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010d8:	f003 fcb2 	bl	8004a40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010dc:	2316      	movs	r3, #22
 80010de:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	@ (8001128 <MX_ADC1_Init+0xc8>)
 80010f0:	f005 fd02 	bl	8006af8 <HAL_ADCEx_MultiModeConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010fa:	f003 fca1 	bl	8004a40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010fe:	230a      	movs	r3, #10
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	@ (8001128 <MX_ADC1_Init+0xc8>)
 8001110:	f005 fac4 	bl	800669c <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800111a:	f003 fc91 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000230 	.word	0x20000230
 800112c:	40012000 	.word	0x40012000
 8001130:	0f000001 	.word	0x0f000001

08001134 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001146:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001148:	4a1e      	ldr	r2, [pc, #120]	@ (80011c4 <MX_ADC2_Init+0x90>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 800114e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001160:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001162:	2200      	movs	r2, #0
 8001164:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001176:	2201      	movs	r2, #1
 8001178:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 8001184:	2201      	movs	r2, #1
 8001186:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 800118a:	f005 f8d9 	bl	8006340 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001194:	f003 fc54 	bl	8004a40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001198:	230b      	movs	r3, #11
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_ADC2_Init+0x8c>)
 80011aa:	f005 fa77 	bl	800669c <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80011b4:	f003 fc44 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000278 	.word	0x20000278
 80011c4:	40012100 	.word	0x40012100

080011c8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <MX_ADC3_Init+0x8c>)
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <MX_ADC3_Init+0x90>)
 80011de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <MX_ADC3_Init+0x8c>)
 80011e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_ADC3_Init+0x8c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <MX_ADC3_Init+0x8c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_ADC3_Init+0x8c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <MX_ADC3_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_ADC3_Init+0x8c>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_ADC3_Init+0x8c>)
 800120a:	2201      	movs	r2, #1
 800120c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_ADC3_Init+0x8c>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_ADC3_Init+0x8c>)
 8001218:	2201      	movs	r2, #1
 800121a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <MX_ADC3_Init+0x8c>)
 800121e:	f005 f88f 	bl	8006340 <HAL_ADC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001228:	f003 fc0a 	bl	8004a40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_ADC3_Init+0x8c>)
 800123e:	f005 fa2d 	bl	800669c <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001248:	f003 fbfa 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200002c0 	.word	0x200002c0
 8001258:	40012200 	.word	0x40012200

0800125c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	@ 0x38
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a45      	ldr	r2, [pc, #276]	@ (8001390 <HAL_ADC_MspInit+0x134>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d128      	bne.n	80012d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	4b44      	ldr	r3, [pc, #272]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a43      	ldr	r2, [pc, #268]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4833      	ldr	r0, [pc, #204]	@ (8001398 <HAL_ADC_MspInit+0x13c>)
 80012ca:	f006 fc45 	bl	8007b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012ce:	e05a      	b.n	8001386 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a31      	ldr	r2, [pc, #196]	@ (800139c <HAL_ADC_MspInit+0x140>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d128      	bne.n	800132c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a25      	ldr	r2, [pc, #148]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001312:	2302      	movs	r3, #2
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	481c      	ldr	r0, [pc, #112]	@ (8001398 <HAL_ADC_MspInit+0x13c>)
 8001326:	f006 fc17 	bl	8007b58 <HAL_GPIO_Init>
}
 800132a:	e02c      	b.n	8001386 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_ADC_MspInit+0x144>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d127      	bne.n	8001386 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <HAL_ADC_MspInit+0x138>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <HAL_ADC_MspInit+0x148>)
 8001382:	f006 fbe9 	bl	8007b58 <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	3738      	adds	r7, #56	@ 0x38
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012000 	.word	0x40012000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40012100 	.word	0x40012100
 80013a0:	40012200 	.word	0x40012200
 80013a4:	40020000 	.word	0x40020000

080013a8 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013b6:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <order_phases+0x1e8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7c1b      	ldrb	r3, [r3, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d108      	bne.n	80013d6 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013c4:	4873      	ldr	r0, [pc, #460]	@ (8001594 <order_phases+0x1ec>)
 80013c6:	f00b fdcf 	bl	800cf68 <puts>
		cal->started = 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e6:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001598 <order_phases+0x1f0>
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80013fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d529      	bpl.n	800145c <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800141a:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
        cal->cal_position.elec_velocity = 0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001424:	461a      	mov	r2, r3
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	f8c2 3290 	str.w	r3, [r2, #656]	@ 0x290
        controller->i_d_des = I_CAL;
 800142e:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <order_phases+0x1f4>)
 8001430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        controller->i_q_des = 0.0f;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        commutate(controller, &cal->cal_position);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8001448:	332c      	adds	r3, #44	@ 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	f001 fdb3 	bl	8002fb8 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
    	return;
 800145a:	e096      	b.n	800158a <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001462:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80015a0 <order_phases+0x1f8>
 8001466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d51d      	bpl.n	80014ac <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edd3 7a05 	vldr	s15, [r3, #20]
 8001476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800147a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800147e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001496:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
		commutate(controller, &cal->cal_position);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 80014a0:	332c      	adds	r3, #44	@ 0x2c
 80014a2:	4619      	mov	r1, r3
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f001 fd87 	bl	8002fb8 <commutate>
    	return;
 80014aa:	e06e      	b.n	800158a <order_phases+0x1e2>
    }

	reset_foc(controller);
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f001 fc69 	bl	8002d84 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80014be:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ca:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80015a4 <order_phases+0x1fc>
 80014ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d2:	ee16 0a90 	vmov	r0, s13
 80014d6:	f7ff f857 	bl	8000588 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	ec43 2b10 	vmov	d0, r2, r3
 80014e2:	f009 fea5 	bl	800b230 <round>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb7b 	bl	8000be8 <__aeabi_d2uiz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001500:	ed97 7a05 	vldr	s14, [r7, #20]
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	dd07      	ble.n	800151e <order_phases+0x176>
		cal->phase_order = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001516:	4824      	ldr	r0, [pc, #144]	@ (80015a8 <order_phases+0x200>)
 8001518:	f00b fd26 	bl	800cf68 <puts>
 800151c:	e006      	b.n	800152c <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001526:	4821      	ldr	r0, [pc, #132]	@ (80015ac <order_phases+0x204>)
 8001528:	f00b fd1e 	bl	800cf68 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	481f      	ldr	r0, [pc, #124]	@ (80015b0 <order_phases+0x208>)
 8001534:	f00b fcb0 	bl	800ce98 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f823 	bl	8000588 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff f81e 	bl	8000588 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	e9cd 2300 	strd	r2, r3, [sp]
 8001554:	4622      	mov	r2, r4
 8001556:	462b      	mov	r3, r5
 8001558:	4816      	ldr	r0, [pc, #88]	@ (80015b4 <order_phases+0x20c>)
 800155a:	f00b fc9d 	bl	800ce98 <iprintf>
    PHASE_ORDER = cal->phase_order;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001564:	461a      	mov	r2, r3
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <order_phases+0x1e8>)
 8001568:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <order_phases+0x1f4>)
 8001578:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    cal->started = 0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	20000430 	.word	0x20000430
 8001594:	0800f768 	.word	0x0800f768
 8001598:	37d1b717 	.word	0x37d1b717
 800159c:	20000330 	.word	0x20000330
 80015a0:	3fd06cbe 	.word	0x3fd06cbe
 80015a4:	40c90fdb 	.word	0x40c90fdb
 80015a8:	0800f78c 	.word	0x0800f78c
 80015ac:	0800f7a4 	.word	0x0800f7a4
 80015b0:	0800f7bc 	.word	0x0800f7bc
 80015b4:	0800f7d0 	.word	0x0800f7d0

080015b8 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b094      	sub	sp, #80	@ 0x50
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7c1b      	ldrb	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015ce:	489e      	ldr	r0, [pc, #632]	@ (8001848 <calibrate_encoder+0x290>)
 80015d0:	f00b fcca 	bl	800cf68 <puts>
			cal->started = 1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
			cal->sample_count = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	849a      	strh	r2, [r3, #36]	@ 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800184c <calibrate_encoder+0x294>
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001612:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d525      	bpl.n	800166c <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001632:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
        controller->i_d_des = I_CAL;
 8001636:	4b86      	ldr	r3, [pc, #536]	@ (8001850 <calibrate_encoder+0x298>)
 8001638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        controller->i_q_des = 0.0f;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        commutate(controller, &cal->cal_position);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8001650:	332c      	adds	r3, #44	@ 0x2c
 8001652:	4619      	mov	r1, r3
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f001 fcaf 	bl	8002fb8 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
    	return;
 800166a:	e259      	b.n	8001b20 <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001672:	4b77      	ldr	r3, [pc, #476]	@ (8001850 <calibrate_encoder+0x298>)
 8001674:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001678:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001854 <calibrate_encoder+0x29c>
 800167c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001680:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8001684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800168c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	f140 808f 	bpl.w	80017ba <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a2:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001858 <calibrate_encoder+0x2a0>
 80016a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80016ba:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
		commutate(controller, &cal->cal_position);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 80016c4:	332c      	adds	r3, #44	@ 0x2c
 80016c6:	4619      	mov	r1, r3
 80016c8:	68b8      	ldr	r0, [r7, #8]
 80016ca:	f001 fc75 	bl	8002fb8 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	ed93 7a05 	vldr	s14, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dc00      	bgt.n	80016e6 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016e4:	e21c      	b.n	8001b20 <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ec:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800186c <calibrate_encoder+0x2b4>
 80016f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016f4:	4b56      	ldr	r3, [pc, #344]	@ (8001850 <calibrate_encoder+0x298>)
 80016f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016fa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001854 <calibrate_encoder+0x29c>
 80016fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	ee17 3a90 	vmov	r3, s15
 800170e:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	13db      	asrs	r3, r3, #15
 800171e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001726:	4618      	mov	r0, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	441a      	add	r2, r3
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	f100 030a 	add.w	r3, r0, #10
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800173c:	461d      	mov	r5, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	330a      	adds	r3, #10
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	685c      	ldr	r4, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff19 	bl	8000588 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	e9cd 2300 	strd	r2, r3, [sp]
 800175e:	4623      	mov	r3, r4
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4629      	mov	r1, r5
 8001764:	483d      	ldr	r0, [pc, #244]	@ (800185c <calibrate_encoder+0x2a4>)
 8001766:	f00b fb97 	bl	800ce98 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001770:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001860 <calibrate_encoder+0x2a8>
 8001774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178a:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <calibrate_encoder+0x298>)
 800178c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001790:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001864 <calibrate_encoder+0x2ac>
 8001794:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001798:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800179c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	f000 81b7 	beq.w	8001b1a <calibrate_encoder+0x562>
			cal->sample_count++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	849a      	strh	r2, [r3, #36]	@ 0x24
		return;
 80017b8:	e1b2      	b.n	8001b20 <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <calibrate_encoder+0x298>)
 80017c2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80017c6:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001868 <calibrate_encoder+0x2b0>
 80017ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017ce:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80017d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	f140 80a9 	bpl.w	800193c <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001858 <calibrate_encoder+0x2a0>
 80017f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <calibrate_encoder+0x298>)
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
		controller->i_q_des = 0.0f;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800181c:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
		commutate(controller, &cal->cal_position);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8001826:	332c      	adds	r3, #44	@ 0x2c
 8001828:	4619      	mov	r1, r3
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f001 fbc4 	bl	8002fb8 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a05 	vldr	s14, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	dc14      	bgt.n	8001870 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001846:	e16a      	b.n	8001b1e <calibrate_encoder+0x566>
 8001848:	0800f7ec 	.word	0x0800f7ec
 800184c:	37d1b717 	.word	0x37d1b717
 8001850:	20000330 	.word	0x20000330
 8001854:	40c90fdb 	.word	0x40c90fdb
 8001858:	3983126e 	.word	0x3983126e
 800185c:	0800f814 	.word	0x0800f814
 8001860:	3ba0d97c 	.word	0x3ba0d97c
 8001864:	43000000 	.word	0x43000000
 8001868:	41490fdb 	.word	0x41490fdb
 800186c:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8152 	beq.w	8001b1e <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001880:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 800186c <calibrate_encoder+0x2b4>
 8001884:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001888:	4ba7      	ldr	r3, [pc, #668]	@ (8001b28 <calibrate_encoder+0x570>)
 800188a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800188e:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001b2c <calibrate_encoder+0x574>
 8001892:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189e:	ee17 3a90 	vmov	r3, s15
 80018a2:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	13db      	asrs	r3, r3, #15
 80018b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	330a      	adds	r3, #10
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80018d2:	4610      	mov	r0, r2
 80018d4:	0fda      	lsrs	r2, r3, #31
 80018d6:	4413      	add	r3, r2
 80018d8:	105b      	asrs	r3, r3, #1
 80018da:	4619      	mov	r1, r3
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	f100 030a 	add.w	r3, r0, #10
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018ec:	461d      	mov	r5, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	330a      	adds	r3, #10
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	685c      	ldr	r4, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe41 	bl	8000588 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	e9cd 2300 	strd	r2, r3, [sp]
 800190e:	4623      	mov	r3, r4
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	4629      	mov	r1, r5
 8001914:	4886      	ldr	r0, [pc, #536]	@ (8001b30 <calibrate_encoder+0x578>)
 8001916:	f00b fabf 	bl	800ce98 <iprintf>
			cal->sample_count--;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	849a      	strh	r2, [r3, #36]	@ 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800192c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001b34 <calibrate_encoder+0x57c>
 8001930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		return;
 800193a:	e0f0      	b.n	8001b1e <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 800193c:	68b8      	ldr	r0, [r7, #8]
 800193e:	f001 fa21 	bl	8002d84 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	647b      	str	r3, [r7, #68]	@ 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001946:	2300      	movs	r3, #0
 8001948:	643b      	str	r3, [r7, #64]	@ 0x40
 800194a:	e00b      	b.n	8001964 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	330a      	adds	r3, #10
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800195a:	4413      	add	r3, r2
 800195c:	647b      	str	r3, [r7, #68]	@ 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800195e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001960:	3301      	adds	r3, #1
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
 8001964:	4b70      	ldr	r3, [pc, #448]	@ (8001b28 <calibrate_encoder+0x570>)
 8001966:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800196a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196e:	ee17 3a90 	vmov	r3, s15
 8001972:	01db      	lsls	r3, r3, #7
 8001974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001976:	429a      	cmp	r2, r3
 8001978:	dbe8      	blt.n	800194c <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 800197a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001984:	4b68      	ldr	r3, [pc, #416]	@ (8001b28 <calibrate_encoder+0x570>)
 8001986:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800198a:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001b38 <calibrate_encoder+0x580>
 800198e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 2a90 	vmov	r2, s15
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da01      	bge.n	80019b6 <calibrate_encoder+0x3fe>
 80019b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80019b6:	125b      	asrs	r3, r3, #9
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i<N_LUT; i++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019be:	e0a0      	b.n	8001b02 <calibrate_encoder+0x54a>
			int moving_avg = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	@ 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c6:	0fda      	lsrs	r2, r3, #31
 80019c8:	4413      	add	r3, r2
 80019ca:	105b      	asrs	r3, r3, #1
 80019cc:	425b      	negs	r3, r3
 80019ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d0:	e068      	b.n	8001aa4 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <calibrate_encoder+0x570>)
 80019de:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001b38 <calibrate_encoder+0x580>
 80019ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ee:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8001b38 <calibrate_encoder+0x580>
 80019f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	ee17 3a90 	vmov	r3, s15
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da13      	bge.n	8001a3c <calibrate_encoder+0x484>
 8001a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1e:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <calibrate_encoder+0x570>)
 8001a20:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a24:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001b38 <calibrate_encoder+0x580>
 8001a28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a34:	ee17 3a90 	vmov	r3, s15
 8001a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a3a:	e027      	b.n	8001a8c <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <calibrate_encoder+0x570>)
 8001a48:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a4c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001b38 <calibrate_encoder+0x580>
 8001a50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	dd12      	ble.n	8001a8c <calibrate_encoder+0x4d4>
 8001a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <calibrate_encoder+0x570>)
 8001a72:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a76:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001b38 <calibrate_encoder+0x580>
 8001a7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a86:	ee17 3a90 	vmov	r3, s15
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30
				moving_avg += cal->error_arr[index];
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a90:	330a      	adds	r3, #10
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a9a:	4413      	add	r3, r2
 8001a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa6:	0fda      	lsrs	r2, r3, #31
 8001aa8:	4413      	add	r3, r2
 8001aaa:	105b      	asrs	r3, r3, #1
 8001aac:	461a      	mov	r2, r3
 8001aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	db8e      	blt.n	80019d2 <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38
			int lut_index = lut_offset + i;
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ac2:	4413      	add	r3, r2
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aca:	dd02      	ble.n	8001ad2 <calibrate_encoder+0x51a>
 8001acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ace:	3b80      	subs	r3, #128	@ 0x80
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ad8:	1ad2      	subs	r2, r2, r3
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ade:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ae2:	330a      	adds	r3, #10
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001af6:	4811      	ldr	r0, [pc, #68]	@ (8001b3c <calibrate_encoder+0x584>)
 8001af8:	f00b f9ce 	bl	800ce98 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001afe:	3301      	adds	r3, #1
 8001b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b04:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b06:	f77f af5b 	ble.w	80019c0 <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001b18:	e002      	b.n	8001b20 <calibrate_encoder+0x568>
				return;
 8001b1a:	bf00      	nop
 8001b1c:	e000      	b.n	8001b20 <calibrate_encoder+0x568>
		return;
 8001b1e:	bf00      	nop
}
 8001b20:	3748      	adds	r7, #72	@ 0x48
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000330 	.word	0x20000330
 8001b2c:	40c90fdb 	.word	0x40c90fdb
 8001b30:	0800f814 	.word	0x0800f814
 8001b34:	3ba0d97c 	.word	0x3ba0d97c
 8001b38:	43000000 	.word	0x43000000
 8001b3c:	0800f824 	.word	0x0800f824

08001b40 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b46:	4a18      	ldr	r2, [pc, #96]	@ (8001ba8 <MX_CAN1_Init+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b56:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b5e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8001b62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b6a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <MX_CAN1_Init+0x64>)
 8001b92:	f004 fff7 	bl	8006b84 <HAL_CAN_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b9c:	f002 ff50 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000308 	.word	0x20000308
 8001ba8:	40006400 	.word	0x40006400

08001bac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_CAN_MspInit+0x94>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d134      	bne.n	8001c38 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_CAN_MspInit+0x98>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_CAN_MspInit+0x98>)
 8001bd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_CAN_MspInit+0x98>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_CAN_MspInit+0x98>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <HAL_CAN_MspInit+0x98>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_CAN_MspInit+0x98>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c18:	2309      	movs	r3, #9
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	@ (8001c48 <HAL_CAN_MspInit+0x9c>)
 8001c24:	f005 ff98 	bl	8007b58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2014      	movs	r0, #20
 8001c2e:	f005 feca 	bl	80079c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c32:	2014      	movs	r0, #20
 8001c34:	f005 fee3 	bl	80079fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40006400 	.word	0x40006400
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400

08001c4c <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	639a      	str	r2, [r3, #56]	@ 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <can_rx_init+0x54>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28
	msg->filter.FilterIdLow=0x0;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c70:	631a      	str	r2, [r3, #48]	@ 0x30
	msg->filter.FilterMaskIdLow=0;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	635a      	str	r2, [r3, #52]	@ 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44
	msg->filter.FilterActivation=ENABLE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	649a      	str	r2, [r3, #72]	@ 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3328      	adds	r3, #40	@ 0x28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <can_rx_init+0x58>)
 8001c92:	f005 f873 	bl	8006d7c <HAL_CAN_ConfigFilter>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000430 	.word	0x20000430
 8001ca4:	20000308 	.word	0x20000308

08001ca8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 7; 			// message size of 7 byte
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <can_tx_init+0x30>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000430 	.word	0x20000430

08001cdc <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t, float vb){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	@ 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6178      	str	r0, [r7, #20]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cea:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cee:	ed87 1a01 	vstr	s2, [r7, #4]
 8001cf2:	edc7 1a00 	vstr	s3, [r7]
 8001cf6:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <pack_reply+0x11c>)
 8001cfa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001df8 <pack_reply+0x11c>)
 8001d00:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001d04:	2010      	movs	r0, #16
 8001d06:	eeb0 1a47 	vmov.f32	s2, s14
 8001d0a:	eef0 0a67 	vmov.f32	s1, s15
 8001d0e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d12:	f002 ff85 	bl	8004c20 <float_to_uint>
 8001d16:	6278      	str	r0, [r7, #36]	@ 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001d18:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <pack_reply+0x11c>)
 8001d1a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001d1e:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <pack_reply+0x11c>)
 8001d20:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001d24:	200c      	movs	r0, #12
 8001d26:	eeb0 1a47 	vmov.f32	s2, s14
 8001d2a:	eef0 0a67 	vmov.f32	s1, s15
 8001d2e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d32:	f002 ff75 	bl	8004c20 <float_to_uint>
 8001d36:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -(I_MAX+SENSE_BUFFER)*KT*GR, (I_MAX+SENSE_BUFFER)*KT*GR, 12);
 8001d38:	4b2f      	ldr	r3, [pc, #188]	@ (8001df8 <pack_reply+0x11c>)
 8001d3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d3e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001dfc <pack_reply+0x120>
 8001d42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d46:	eeb1 7a67 	vneg.f32	s14, s15
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <pack_reply+0x11c>)
 8001d4c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <pack_reply+0x11c>)
 8001d56:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001d5a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <pack_reply+0x11c>)
 8001d60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d64:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001dfc <pack_reply+0x120>
 8001d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <pack_reply+0x11c>)
 8001d6e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <pack_reply+0x11c>)
 8001d78:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d80:	200c      	movs	r0, #12
 8001d82:	eeb0 1a67 	vmov.f32	s2, s15
 8001d86:	eef0 0a66 	vmov.f32	s1, s13
 8001d8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d8e:	f002 ff47 	bl	8004c20 <float_to_uint>
 8001d92:	61f8      	str	r0, [r7, #28]
    int vb_int = float_to_uint(vb, VB_MIN, VB_MAX, 8);
 8001d94:	2008      	movs	r0, #8
 8001d96:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8001e00 <pack_reply+0x124>
 8001d9a:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001dfc <pack_reply+0x120>
 8001d9e:	ed97 0a00 	vldr	s0, [r7]
 8001da2:	f002 ff3d 	bl	8004c20 <float_to_uint>
 8001da6:	61b8      	str	r0, [r7, #24]
    msg->data[0] = id;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	7cfa      	ldrb	r2, [r7, #19]
 8001dac:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	121b      	asrs	r3, r3, #8
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	111b      	asrs	r3, r3, #4
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	121b      	asrs	r3, r3, #8
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	719a      	strb	r2, [r3, #6]
    msg->data[6] = vb_int;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	71da      	strb	r2, [r3, #7]
    }
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	@ 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000330 	.word	0x20000330
 8001dfc:	00000000 	.word	0x00000000
 8001e00:	42200000 	.word	0x42200000

08001e04 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001e04:	b084      	sub	sp, #16
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001e14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001e22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001e2c:	0912      	lsrs	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001e34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e3e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001e46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001e50:	0912      	lsrs	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e62:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e66:	4313      	orrs	r3, r2
 8001e68:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f64 <unpack_cmd+0x160>)
 8001e6c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001e70:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <unpack_cmd+0x160>)
 8001e72:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001e76:	2110      	movs	r1, #16
 8001e78:	eef0 0a47 	vmov.f32	s1, s14
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f002 ff00 	bl	8004c86 <uint_to_float>
 8001e86:	eef0 7a40 	vmov.f32	s15, s0
 8001e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <unpack_cmd+0x160>)
 8001e92:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <unpack_cmd+0x160>)
 8001e98:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e9e:	1d1c      	adds	r4, r3, #4
 8001ea0:	210c      	movs	r1, #12
 8001ea2:	eef0 0a47 	vmov.f32	s1, s14
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	6938      	ldr	r0, [r7, #16]
 8001eac:	f002 feeb 	bl	8004c86 <uint_to_float>
 8001eb0:	eef0 7a40 	vmov.f32	s15, s0
 8001eb4:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <unpack_cmd+0x160>)
 8001eba:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ec0:	f103 0408 	add.w	r4, r3, #8
 8001ec4:	210c      	movs	r1, #12
 8001ec6:	eef0 0a67 	vmov.f32	s1, s15
 8001eca:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001f68 <unpack_cmd+0x164>
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f002 fed9 	bl	8004c86 <uint_to_float>
 8001ed4:	eef0 7a40 	vmov.f32	s15, s0
 8001ed8:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <unpack_cmd+0x160>)
 8001ede:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001ee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ee4:	f103 040c 	add.w	r4, r3, #12
 8001ee8:	210c      	movs	r1, #12
 8001eea:	eef0 0a67 	vmov.f32	s1, s15
 8001eee:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001f68 <unpack_cmd+0x164>
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f002 fec7 	bl	8004c86 <uint_to_float>
 8001ef8:	eef0 7a40 	vmov.f32	s15, s0
 8001efc:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <unpack_cmd+0x160>)
 8001f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f06:	eeb1 7a67 	vneg.f32	s14, s15
 8001f0a:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <unpack_cmd+0x160>)
 8001f0c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <unpack_cmd+0x160>)
 8001f16:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001f1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <unpack_cmd+0x160>)
 8001f20:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <unpack_cmd+0x160>)
 8001f26:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <unpack_cmd+0x160>)
 8001f30:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f3a:	f103 0410 	add.w	r4, r3, #16
 8001f3e:	210c      	movs	r1, #12
 8001f40:	eef0 0a67 	vmov.f32	s1, s15
 8001f44:	eeb0 0a66 	vmov.f32	s0, s13
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f002 fe9c 	bl	8004c86 <uint_to_float>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f60:	b004      	add	sp, #16
 8001f62:	4770      	bx	lr
 8001f64:	20000330 	.word	0x20000330
 8001f68:	00000000 	.word	0x00000000

08001f6c <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2110      	movs	r1, #16
 8001f82:	480f      	ldr	r0, [pc, #60]	@ (8001fc0 <drv_spi_write+0x54>)
 8001f84:	f005 ff7c 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	1c9a      	adds	r2, r3, #2
 8001f8e:	2364      	movs	r3, #100	@ 0x64
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <drv_spi_write+0x58>)
 8001f96:	f006 fe4e 	bl	8008c36 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001f9a:	bf00      	nop
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <drv_spi_write+0x58>)
 8001f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d0f9      	beq.n	8001f9c <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2110      	movs	r1, #16
 8001fac:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <drv_spi_write+0x54>)
 8001fae:	f005 ff67 	bl	8007e80 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	885b      	ldrh	r3, [r3, #2]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	200093c4 	.word	0x200093c4

08001fc8 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	463b      	mov	r3, r7
 8001fd0:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ffc6 	bl	8001f6c <drv_spi_write>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffb5 	bl	8001f6c <drv_spi_write>
 8002002:	4603      	mov	r3, r0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	e883 0003 	stmia.w	r3, {r0, r1}
 800201a:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	b21b      	sxth	r3, r3
 8002020:	02db      	lsls	r3, r3, #11
 8002022:	b21b      	sxth	r3, r3
 8002024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202c:	b21b      	sxth	r3, r3
 800202e:	b29a      	uxth	r2, r3
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff98 	bl	8001f6c <drv_spi_write>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	f107 0408 	add.w	r4, r7, #8
 8002050:	e884 0003 	stmia.w	r4, {r0, r1}
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	b21b      	sxth	r3, r3
 800205c:	02db      	lsls	r3, r3, #11
 800205e:	b21a      	sxth	r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	b29a      	uxth	r2, r3
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff7b 	bl	8001f6c <drv_spi_write>
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}

0800207e <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800207e:	b590      	push	{r4, r7, lr}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	f107 0408 	add.w	r4, r7, #8
 8002088:	e884 0003 	stmia.w	r4, {r0, r1}
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	b21b      	sxth	r3, r3
 8002094:	025b      	lsls	r3, r3, #9
 8002096:	b21b      	sxth	r3, r3
 8002098:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800209c:	b21a      	sxth	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b21a      	sxth	r2, r3
 80020da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020dc:	b21b      	sxth	r3, r3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80020fc:	8afa      	ldrh	r2, [r7, #22]
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <drv_spi_write>
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}

08002112 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8002112:	b590      	push	{r4, r7, lr}
 8002114:	b087      	sub	sp, #28
 8002116:	af00      	add	r7, sp, #0
 8002118:	f107 0408 	add.w	r4, r7, #8
 800211c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	b21b      	sxth	r3, r3
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	b21b      	sxth	r3, r3
 800212c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002130:	b21a      	sxth	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b21b      	sxth	r3, r3
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21a      	sxth	r2, r3
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	b21b      	sxth	r3, r3
 8002142:	019b      	lsls	r3, r3, #6
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21a      	sxth	r2, r3
 800214a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214c:	b21b      	sxth	r3, r3
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21a      	sxth	r2, r3
 8002156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21b      	sxth	r3, r3
 800215e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002160:	8afa      	ldrh	r2, [r7, #22]
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff feff 	bl	8001f6c <drv_spi_write>
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}

08002176 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8002176:	b590      	push	{r4, r7, lr}
 8002178:	b087      	sub	sp, #28
 800217a:	af00      	add	r7, sp, #0
 800217c:	f107 0408 	add.w	r4, r7, #8
 8002180:	e884 0003 	stmia.w	r4, {r0, r1}
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	b21b      	sxth	r3, r3
 800218c:	029b      	lsls	r3, r3, #10
 800218e:	b21b      	sxth	r3, r3
 8002190:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002194:	b21a      	sxth	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b21b      	sxth	r3, r3
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	019b      	lsls	r3, r3, #6
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021bc:	b21b      	sxth	r3, r3
 80021be:	015b      	lsls	r3, r3, #5
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21a      	sxth	r2, r3
 80021de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80021f4:	8afa      	ldrh	r2, [r7, #22]
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff feb5 	bl	8001f6c <drv_spi_write>
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}

0800220a <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	463b      	mov	r3, r7
 8002212:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8002216:	2202      	movs	r2, #2
 8002218:	463b      	mov	r3, r7
 800221a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800221e:	f7ff fef5 	bl	800200c <drv_read_register>
 8002222:	4603      	mov	r3, r0
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	2202      	movs	r2, #2
 800222e:	4639      	mov	r1, r7
 8002230:	c903      	ldmia	r1, {r0, r1}
 8002232:	f7ff ff08 	bl	8002046 <drv_write_register>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	463b      	mov	r3, r7
 8002246:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 800224a:	2202      	movs	r2, #2
 800224c:	463b      	mov	r3, r7
 800224e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002252:	f7ff fedb 	bl	800200c <drv_read_register>
 8002256:	4603      	mov	r3, r0
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	2202      	movs	r2, #2
 8002262:	4639      	mov	r1, r7
 8002264:	c903      	ldmia	r1, {r0, r1}
 8002266:	f7ff feee 	bl	8002046 <drv_write_register>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	463b      	mov	r3, r7
 800227c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8002280:	463b      	mov	r3, r7
 8002282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002286:	f7ff fe9f 	bl	8001fc8 <drv_read_FSR1>
 800228a:	4603      	mov	r3, r0
 800228c:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 800228e:	463b      	mov	r3, r7
 8002290:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002294:	f7ff fea9 	bl	8001fea <drv_read_FSR2>
 8002298:	4603      	mov	r3, r0
 800229a:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <drv_print_faults+0x38>
 80022a6:	4857      	ldr	r0, [pc, #348]	@ (8002404 <drv_print_faults+0x190>)
 80022a8:	f00a fdf6 	bl	800ce98 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <drv_print_faults+0x48>
 80022b6:	4854      	ldr	r0, [pc, #336]	@ (8002408 <drv_print_faults+0x194>)
 80022b8:	f00a fdee 	bl	800ce98 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <drv_print_faults+0x58>
 80022c6:	4851      	ldr	r0, [pc, #324]	@ (800240c <drv_print_faults+0x198>)
 80022c8:	f00a fde6 	bl	800ce98 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <drv_print_faults+0x68>
 80022d6:	484e      	ldr	r0, [pc, #312]	@ (8002410 <drv_print_faults+0x19c>)
 80022d8:	f00a fdde 	bl	800ce98 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <drv_print_faults+0x78>
 80022e6:	484b      	ldr	r0, [pc, #300]	@ (8002414 <drv_print_faults+0x1a0>)
 80022e8:	f00a fdd6 	bl	800ce98 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <drv_print_faults+0x88>
 80022f6:	4848      	ldr	r0, [pc, #288]	@ (8002418 <drv_print_faults+0x1a4>)
 80022f8:	f00a fdce 	bl	800ce98 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <drv_print_faults+0x98>
 8002306:	4845      	ldr	r0, [pc, #276]	@ (800241c <drv_print_faults+0x1a8>)
 8002308:	f00a fdc6 	bl	800ce98 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 800230c:	89fb      	ldrh	r3, [r7, #14]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <drv_print_faults+0xa8>
 8002316:	4842      	ldr	r0, [pc, #264]	@ (8002420 <drv_print_faults+0x1ac>)
 8002318:	f00a fdbe 	bl	800ce98 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <drv_print_faults+0xb8>
 8002326:	483f      	ldr	r0, [pc, #252]	@ (8002424 <drv_print_faults+0x1b0>)
 8002328:	f00a fdb6 	bl	800ce98 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 800232c:	89fb      	ldrh	r3, [r7, #14]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <drv_print_faults+0xc8>
 8002336:	483c      	ldr	r0, [pc, #240]	@ (8002428 <drv_print_faults+0x1b4>)
 8002338:	f00a fdae 	bl	800ce98 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <drv_print_faults+0xd8>
 8002346:	4839      	ldr	r0, [pc, #228]	@ (800242c <drv_print_faults+0x1b8>)
 8002348:	f00a fda6 	bl	800ce98 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 800234c:	89bb      	ldrh	r3, [r7, #12]
 800234e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <drv_print_faults+0xe8>
 8002356:	4836      	ldr	r0, [pc, #216]	@ (8002430 <drv_print_faults+0x1bc>)
 8002358:	f00a fd9e 	bl	800ce98 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <drv_print_faults+0xf8>
 8002366:	4833      	ldr	r0, [pc, #204]	@ (8002434 <drv_print_faults+0x1c0>)
 8002368:	f00a fd96 	bl	800ce98 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 800236c:	89bb      	ldrh	r3, [r7, #12]
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <drv_print_faults+0x108>
 8002376:	4830      	ldr	r0, [pc, #192]	@ (8002438 <drv_print_faults+0x1c4>)
 8002378:	f00a fd8e 	bl	800ce98 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 800237c:	89bb      	ldrh	r3, [r7, #12]
 800237e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <drv_print_faults+0x118>
 8002386:	482d      	ldr	r0, [pc, #180]	@ (800243c <drv_print_faults+0x1c8>)
 8002388:	f00a fd86 	bl	800ce98 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 800238c:	89bb      	ldrh	r3, [r7, #12]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <drv_print_faults+0x128>
 8002396:	482a      	ldr	r0, [pc, #168]	@ (8002440 <drv_print_faults+0x1cc>)
 8002398:	f00a fd7e 	bl	800ce98 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 800239c:	89bb      	ldrh	r3, [r7, #12]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <drv_print_faults+0x138>
 80023a6:	4827      	ldr	r0, [pc, #156]	@ (8002444 <drv_print_faults+0x1d0>)
 80023a8:	f00a fd76 	bl	800ce98 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80023ac:	89bb      	ldrh	r3, [r7, #12]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <drv_print_faults+0x148>
 80023b6:	4824      	ldr	r0, [pc, #144]	@ (8002448 <drv_print_faults+0x1d4>)
 80023b8:	f00a fd6e 	bl	800ce98 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 80023bc:	89bb      	ldrh	r3, [r7, #12]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <drv_print_faults+0x158>
 80023c6:	4821      	ldr	r0, [pc, #132]	@ (800244c <drv_print_faults+0x1d8>)
 80023c8:	f00a fd66 	bl	800ce98 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <drv_print_faults+0x168>
 80023d6:	481e      	ldr	r0, [pc, #120]	@ (8002450 <drv_print_faults+0x1dc>)
 80023d8:	f00a fd5e 	bl	800ce98 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80023dc:	89bb      	ldrh	r3, [r7, #12]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <drv_print_faults+0x178>
 80023e6:	481b      	ldr	r0, [pc, #108]	@ (8002454 <drv_print_faults+0x1e0>)
 80023e8:	f00a fd56 	bl	800ce98 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80023ec:	89bb      	ldrh	r3, [r7, #12]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <drv_print_faults+0x188>
 80023f6:	4818      	ldr	r0, [pc, #96]	@ (8002458 <drv_print_faults+0x1e4>)
 80023f8:	f00a fd4e 	bl	800ce98 <iprintf>

}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	0800f830 	.word	0x0800f830
 8002408:	0800f83c 	.word	0x0800f83c
 800240c:	0800f848 	.word	0x0800f848
 8002410:	0800f850 	.word	0x0800f850
 8002414:	0800f858 	.word	0x0800f858
 8002418:	0800f860 	.word	0x0800f860
 800241c:	0800f86c 	.word	0x0800f86c
 8002420:	0800f878 	.word	0x0800f878
 8002424:	0800f884 	.word	0x0800f884
 8002428:	0800f890 	.word	0x0800f890
 800242c:	0800f89c 	.word	0x0800f89c
 8002430:	0800f8a8 	.word	0x0800f8a8
 8002434:	0800f8b0 	.word	0x0800f8b0
 8002438:	0800f8b8 	.word	0x0800f8b8
 800243c:	0800f8c0 	.word	0x0800f8c0
 8002440:	0800f8c8 	.word	0x0800f8c8
 8002444:	0800f8d0 	.word	0x0800f8d0
 8002448:	0800f8dc 	.word	0x0800f8dc
 800244c:	0800f8e8 	.word	0x0800f8e8
 8002450:	0800f8f4 	.word	0x0800f8f4
 8002454:	0800f900 	.word	0x0800f900
 8002458:	0800f90c 	.word	0x0800f90c

0800245c <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b07      	cmp	r3, #7
 800246a:	d901      	bls.n	8002470 <flash_writer_init+0x14>
 800246c:	2307      	movs	r3, #7
 800246e:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 8002476:	4a07      	ldr	r2, [pc, #28]	@ (8002494 <flash_writer_init+0x38>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	20000000 	.word	0x20000000

08002498 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80024a0:	f003 f832 	bl	8005508 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80024a4:	20f1      	movs	r0, #241	@ 0xf1
 80024a6:	f003 f8eb 	bl	8005680 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <flash_writer_open+0x34>)
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f84e 	bl	8005558 <FLASH_EraseSector>
    fw->ready = true;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000020 	.word	0x20000020

080024d0 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	1d3c      	adds	r4, r7, #4
 80024d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024dc:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f892 	bl	8005618 <FLASH_ProgramWord>
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}

080024fc <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	f107 040c 	add.w	r4, r7, #12
 8002506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f003 f879 	bl	8005618 <FLASH_ProgramWord>
}
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}

0800252e <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 8002536:	f002 ffff 	bl	8005538 <FLASH_Lock>
    fw->ready = false;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002548:	b490      	push	{r4, r7}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	1d3c      	adds	r4, r7, #4
 8002550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002554:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <flash_read_int+0x28>)
 800255a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bc90      	pop	{r4, r7}
 800256e:	4770      	bx	lr
 8002570:	20000000 	.word	0x20000000

08002574 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 8002574:	b490      	push	{r4, r7}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	1d3c      	adds	r4, r7, #4
 800257c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002580:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <flash_read_float+0x30>)
 8002586:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	ee07 3a90 	vmov	s15, r3
}
 8002596:	eeb0 0a67 	vmov.f32	s0, s15
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bc90      	pop	{r4, r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000000 	.word	0x20000000

080025a8 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ba:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025c0:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80025c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d0:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80025da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e2:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80025ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80025f8:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <set_dtc+0x140>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d136      	bne.n	800266e <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002600:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <set_dtc+0x144>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800260e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <set_dtc+0x144>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800261e:	ee17 2a90 	vmov	r2, s15
 8002622:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002624:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <set_dtc+0x144>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002632:	edd7 7a04 	vldr	s15, [r7, #16]
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <set_dtc+0x144>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002642:	ee17 2a90 	vmov	r2, s15
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002648:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <set_dtc+0x144>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002656:	edd7 7a03 	vldr	s15, [r7, #12]
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <set_dtc+0x144>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002666:	ee17 2a90 	vmov	r2, s15
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 800266c:	e035      	b.n	80026da <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 800266e:	4b1f      	ldr	r3, [pc, #124]	@ (80026ec <set_dtc+0x144>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800267c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <set_dtc+0x144>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268c:	ee17 2a90 	vmov	r2, s15
 8002690:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002692:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <set_dtc+0x144>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <set_dtc+0x144>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b0:	ee17 2a90 	vmov	r2, s15
 80026b4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <set_dtc+0x144>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <set_dtc+0x144>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	ee17 2a90 	vmov	r2, s15
 80026d8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000430 	.word	0x20000430
 80026ec:	20009478 	.word	0x20009478

080026f0 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80026f8:	4b38      	ldr	r3, [pc, #224]	@ (80027dc <analog_sample+0xec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002700:	4837      	ldr	r0, [pc, #220]	@ (80027e0 <analog_sample+0xf0>)
 8002702:	f003 ffbe 	bl	8006682 <HAL_ADC_GetValue>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800270e:	4835      	ldr	r0, [pc, #212]	@ (80027e4 <analog_sample+0xf4>)
 8002710:	f003 ffb7 	bl	8006682 <HAL_ADC_GetValue>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e00d      	b.n	800273a <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800271e:	4831      	ldr	r0, [pc, #196]	@ (80027e4 <analog_sample+0xf4>)
 8002720:	f003 ffaf 	bl	8006682 <HAL_ADC_GetValue>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800272c:	482c      	ldr	r0, [pc, #176]	@ (80027e0 <analog_sample+0xf0>)
 800272e:	f003 ffa8 	bl	8006682 <HAL_ADC_GetValue>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 800273a:	4829      	ldr	r0, [pc, #164]	@ (80027e0 <analog_sample+0xf0>)
 800273c:	f003 fe44 	bl	80063c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	4826      	ldr	r0, [pc, #152]	@ (80027e0 <analog_sample+0xf0>)
 8002746:	f003 ff11 	bl	800656c <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 800274a:	4827      	ldr	r0, [pc, #156]	@ (80027e8 <analog_sample+0xf8>)
 800274c:	f003 ff99 	bl	8006682 <HAL_ADC_GetValue>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002764:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80027ec <analog_sample+0xfc>
 8002768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80027c0:	eeb1 7a67 	vneg.f32	s14, s15
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80027ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	edc3 7a07 	vstr	s15, [r3, #28]

}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000430 	.word	0x20000430
 80027e0:	20000230 	.word	0x20000230
 80027e4:	20000278 	.word	0x20000278
 80027e8:	200002c0 	.word	0x200002c0
 80027ec:	3c533318 	.word	0x3c533318

080027f0 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80027fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80027fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8002802:	60b8      	str	r0, [r7, #8]
 8002804:	6079      	str	r1, [r7, #4]
 8002806:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002808:	ed97 0a05 	vldr	s0, [r7, #20]
 800280c:	f002 faa8 	bl	8004d60 <cos_lut>
 8002810:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002814:	ed97 0a05 	vldr	s0, [r7, #20]
 8002818:	f002 fa68 	bl	8004cec <sin_lut>
 800281c:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002820:	ed97 7a07 	vldr	s14, [r7, #28]
 8002824:	edd7 7a04 	vldr	s15, [r7, #16]
 8002828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002830:	edd7 7a03 	vldr	s15, [r7, #12]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002842:	edd7 7a06 	vldr	s15, [r7, #24]
 8002846:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80028f0 <abc+0x100>
 800284a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800284e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002852:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800285a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800285e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002866:	edd7 7a07 	vldr	s15, [r7, #28]
 800286a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80028f4 <abc+0x104>
 800286e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002872:	edd7 7a06 	vldr	s15, [r7, #24]
 8002876:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800287a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800287e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002882:	edd7 7a03 	vldr	s15, [r7, #12]
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002894:	edd7 7a06 	vldr	s15, [r7, #24]
 8002898:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80028f4 <abc+0x104>
 800289c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80028a4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80028a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028bc:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80028f0 <abc+0x100>
 80028c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80028c8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80028cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	edc3 7a00 	vstr	s15, [r3]
    }
 80028e6:	bf00      	nop
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	3f5db3d7 	.word	0x3f5db3d7
 80028f4:	bf5db3d7 	.word	0xbf5db3d7

080028f8 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8002902:	edc7 0a04 	vstr	s1, [r7, #16]
 8002906:	ed87 1a03 	vstr	s2, [r7, #12]
 800290a:	edc7 1a02 	vstr	s3, [r7, #8]
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002912:	ed97 0a05 	vldr	s0, [r7, #20]
 8002916:	f002 fa23 	bl	8004d60 <cos_lut>
 800291a:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 800291e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002922:	f002 f9e3 	bl	8004cec <sin_lut>
 8002926:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800292a:	ed97 7a07 	vldr	s14, [r7, #28]
 800292e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002936:	edd7 7a06 	vldr	s15, [r7, #24]
 800293a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002a0c <dq0+0x114>
 800293e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002942:	edd7 7a07 	vldr	s15, [r7, #28]
 8002946:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800294a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800294e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002952:	edd7 7a03 	vldr	s15, [r7, #12]
 8002956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002962:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002a10 <dq0+0x118>
 8002966:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800296a:	edd7 7a07 	vldr	s15, [r7, #28]
 800296e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002972:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002976:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800297a:	edd7 7a02 	vldr	s15, [r7, #8]
 800297e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002a14 <dq0+0x11c>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002994:	edd7 7a06 	vldr	s15, [r7, #24]
 8002998:	eeb1 7a67 	vneg.f32	s14, s15
 800299c:	edd7 7a04 	vldr	s15, [r7, #16]
 80029a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80029a8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002a10 <dq0+0x118>
 80029ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029b4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80029b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002a0c <dq0+0x114>
 80029d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029dc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80029e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002a14 <dq0+0x11c>
 80029f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	edc3 7a00 	vstr	s15, [r3]

    }
 8002a02:	bf00      	nop
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	3f5db3d7 	.word	0x3f5db3d7
 8002a10:	bf5db3d7 	.word	0xbf5db3d7
 8002a14:	3f2aaaab 	.word	0x3f2aaaab

08002a18 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	ed2d 8b02 	vpush	{d8}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	ed87 0a07 	vstr	s0, [r7, #28]
 8002a26:	edc7 0a06 	vstr	s1, [r7, #24]
 8002a2a:	ed87 1a05 	vstr	s2, [r7, #20]
 8002a2e:	edc7 1a04 	vstr	s3, [r7, #16]
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002a38:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a3c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a40:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a44:	f002 f86f 	bl	8004b26 <fminf3>
 8002a48:	eeb0 8a40 	vmov.f32	s16, s0
 8002a4c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a50:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a54:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a58:	f002 f831 	bl	8004abe <fmaxf3>
 8002a5c:	eef0 7a40 	vmov.f32	s15, s0
 8002a60:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002a64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002a70:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <svm+0x148>)
 8002a72:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a74:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a78:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a84:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a88:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a90:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a98:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8002b64 <svm+0x14c>
 8002a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa0:	f001 ffd5 	bl	8004a4e <fast_fmaxf>
 8002aa4:	eef0 7a40 	vmov.f32	s15, s0
 8002aa8:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002b68 <svm+0x150>
 8002aac:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab0:	f001 ffe9 	bl	8004a86 <fast_fminf>
 8002ab4:	eef0 7a40 	vmov.f32	s15, s0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002abe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ac2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ace:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ad2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ada:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae2:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8002b64 <svm+0x14c>
 8002ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aea:	f001 ffb0 	bl	8004a4e <fast_fmaxf>
 8002aee:	eef0 7a40 	vmov.f32	s15, s0
 8002af2:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002b68 <svm+0x150>
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	f001 ffc4 	bl	8004a86 <fast_fminf>
 8002afe:	eef0 7a40 	vmov.f32	s15, s0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002b08:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b14:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b24:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002b64 <svm+0x14c>
 8002b30:	eeb0 0a67 	vmov.f32	s0, s15
 8002b34:	f001 ff8b 	bl	8004a4e <fast_fmaxf>
 8002b38:	eef0 7a40 	vmov.f32	s15, s0
 8002b3c:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002b68 <svm+0x150>
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	f001 ff9f 	bl	8004a86 <fast_fminf>
 8002b48:	eef0 7a40 	vmov.f32	s15, s0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	@ 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	ecbd 8b02 	vpop	{d8}
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	3ef0a3d7 	.word	0x3ef0a3d7
 8002b64:	00000000 	.word	0x00000000
 8002b68:	3f70a3d7 	.word	0x3f70a3d7

08002b6c <zero_current>:

void zero_current(ControllerStruct *controller){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b80:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	65da      	str	r2, [r3, #92]	@ 0x5c
    controller->dtc_v = 0.f;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	661a      	str	r2, [r3, #96]	@ 0x60
    controller->dtc_w = 0.f;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	665a      	str	r2, [r3, #100]	@ 0x64
    set_dtc(controller);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fd04 	bl	80025a8 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e00f      	b.n	8002bc6 <zero_current+0x5a>
    	analog_sample(controller);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fda2 	bl	80026f0 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	dbeb      	blt.n	8002ba6 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    controller->adc_b_offset = adc_b_offset/n;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	fb92 f2f3 	sdiv	r2, r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    }
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a53      	ldr	r2, [pc, #332]	@ (8002d4c <init_controller_params+0x158>)
 8002c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    controller->ki_q = KI_Q;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a51      	ldr	r2, [pc, #324]	@ (8002d4c <init_controller_params+0x158>)
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    controller->k_d = K_SCALE*I_BW;
 8002c0c:	4b50      	ldr	r3, [pc, #320]	@ (8002d50 <init_controller_params+0x15c>)
 8002c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c12:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002d54 <init_controller_params+0x160>
 8002c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
    controller->k_q = K_SCALE*I_BW;
 8002c20:	4b4b      	ldr	r3, [pc, #300]	@ (8002d50 <init_controller_params+0x15c>)
 8002c22:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c26:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002d54 <init_controller_params+0x160>
 8002c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002c34:	4b46      	ldr	r3, [pc, #280]	@ (8002d50 <init_controller_params+0x15c>)
 8002c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c3a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002d58 <init_controller_params+0x164>
 8002c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c42:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002d5c <init_controller_params+0x168>
 8002c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
    controller->ki_fw = .1f*controller->ki_d;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8002c6e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002d60 <init_controller_params+0x16c>
 8002c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
    controller->phase_order = PHASE_ORDER;
 8002c7c:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <init_controller_params+0x170>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    controller->flux_linkage = KT/(1.5f*PPAIRS);
 8002c86:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <init_controller_params+0x15c>)
 8002c88:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002c8c:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <init_controller_params+0x15c>)
 8002c8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002c92:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002c96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <init_controller_params+0x15c>)
 8002ca6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002caa:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002d68 <init_controller_params+0x174>
 8002cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	d803      	bhi.n	8002cc0 <init_controller_params+0xcc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <init_controller_params+0x178>)
 8002cbc:	675a      	str	r2, [r3, #116]	@ 0x74
 8002cbe:	e002      	b.n	8002cc6 <init_controller_params+0xd2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d70 <init_controller_params+0x17c>)
 8002cc4:	675a      	str	r2, [r3, #116]	@ 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e037      	b.n	8002d3c <init_controller_params+0x148>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd6:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002d74 <init_controller_params+0x180>
 8002cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cde:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002d78 <init_controller_params+0x184>
 8002ce2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ce6:	ee16 0a90 	vmov	r0, s13
 8002cea:	f7fd fc4d 	bl	8000588 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ec43 2b10 	vmov	d0, r2, r3
 8002cf6:	f008 f9af 	bl	800b058 <exp>
 8002cfa:	ec51 0b10 	vmov	r0, r1, d0
 8002cfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d02:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <init_controller_params+0x188>)
 8002d04:	f7fd fc98 	bl	8000638 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <init_controller_params+0x18c>)
 8002d16:	f7fd fad9 	bl	80002cc <__adddf3>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f7fd ff81 	bl	8000c28 <__aeabi_d2f>
 8002d26:	4601      	mov	r1, r0
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3340      	adds	r3, #64	@ 0x40
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d40:	ddc4      	ble.n	8002ccc <init_controller_params+0xd8>
    }

    }
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	3cd0e560 	.word	0x3cd0e560
 8002d50:	20000330 	.word	0x20000330
 8002d54:	38fba882 	.word	0x38fba882
 8002d58:	37d1b717 	.word	0x37d1b717
 8002d5c:	40c90fdb 	.word	0x40c90fdb
 8002d60:	3dcccccd 	.word	0x3dcccccd
 8002d64:	20000430 	.word	0x20000430
 8002d68:	42200000 	.word	0x42200000
 8002d6c:	3ca4ffff 	.word	0x3ca4ffff
 8002d70:	3d24ffff 	.word	0x3d24ffff
 8002d74:	bc000000 	.word	0xbc000000
 8002d78:	3d03126f 	.word	0x3d03126f
 8002d7c:	3ff33333 	.word	0x3ff33333
 8002d80:	3ff00000 	.word	0x3ff00000

08002d84 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002d8c:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <reset_foc+0xe4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da2:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <reset_foc+0xe4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002daa:	ee17 2a90 	vmov	r2, s15
 8002dae:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002db0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <reset_foc+0xe4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc6:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <reset_foc+0xe4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dce:	ee17 2a90 	vmov	r2, s15
 8002dd2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002dd4:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <reset_foc+0xe4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	4b1f      	ldr	r3, [pc, #124]	@ (8002e68 <reset_foc+0xe4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df2:	ee17 2a90 	vmov	r2, s15
 8002df6:	639a      	str	r2, [r3, #56]	@ 0x38
    controller->i_d_des = 0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    controller->i_q_des = 0;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    controller->i_d = 0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c
    controller->i_q = 0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40
    controller->i_q_filt = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	645a      	str	r2, [r3, #68]	@ 0x44
    controller->q_int = 0;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    controller->d_int = 0;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    controller->v_q = 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	659a      	str	r2, [r3, #88]	@ 0x58
    controller->v_d = 0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
    controller->fw_int = 0;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    controller->otw_flag = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    }
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20009478 	.word	0x20009478

08002e6c <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - 1.0f - controller->v_ref);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8002e86:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002e8a:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8002e94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8002eac:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8002fb0 <field_weaken+0x144>
 8002eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb4:	f001 fde7 	bl	8004a86 <fast_fminf>
 8002eb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb4 <field_weaken+0x148>)
 8002ebe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ec2:	eef1 7a67 	vneg.f32	s15, s15
 8002ec6:	eef0 0a67 	vmov.f32	s1, s15
 8002eca:	eeb0 0a47 	vmov.f32	s0, s14
 8002ece:	f001 fdbe 	bl	8004a4e <fast_fmaxf>
 8002ed2:	eef0 7a40 	vmov.f32	s15, s0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
       controller->i_q_des = controller->i_q_des + (controller->i_q_des > 0)*controller->fw_int + (controller->i_q_des < 0)*controller->fw_int;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	dd02      	ble.n	8002ef8 <field_weaken+0x8c>
 8002ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ef6:	e001      	b.n	8002efc <field_weaken+0x90>
 8002ef8:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002fb0 <field_weaken+0x144>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8002f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	d502      	bpl.n	8002f20 <field_weaken+0xb4>
 8002f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f1e:	e001      	b.n	8002f24 <field_weaken+0xb8>
 8002f20:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002fb0 <field_weaken+0x144>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8002f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
       controller->i_d_des = controller->fw_int;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8002f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	edd3 6a2b 	vldr	s13, [r3, #172]	@ 0xac
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8002f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6c:	f008 f8dc 	bl	800b128 <sqrtf>
 8002f70:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002f7a:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f82:	f001 fd80 	bl	8004a86 <fast_fminf>
 8002f86:	eeb0 7a40 	vmov.f32	s14, s0
 8002f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f8e:	eef1 7a67 	vneg.f32	s15, s15
 8002f92:	eef0 0a67 	vmov.f32	s1, s15
 8002f96:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9a:	f001 fd58 	bl	8004a4e <fast_fmaxf>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0


}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	20000330 	.word	0x20000330

08002fb8 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	635a      	str	r2, [r3, #52]	@ 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8002fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800314c <commutate+0x194>)
 8002fda:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fee:	4b57      	ldr	r3, [pc, #348]	@ (800314c <commutate+0x194>)
 8002ff0:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	ed93 7a05 	vldr	s14, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	ed93 6a07 	vldr	s12, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3340      	adds	r3, #64	@ 0x40
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	eef0 1a46 	vmov.f32	s3, s12
 8003028:	eeb0 1a66 	vmov.f32	s2, s13
 800302c:	eef0 0a47 	vmov.f32	s1, s14
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	f7ff fc60 	bl	80028f8 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800303e:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003150 <commutate+0x198>
 8003042:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800304c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8003154 <commutate+0x19c>
 8003050:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003064:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003150 <commutate+0x198>
 8003068:	ee27 7a87 	vmul.f32	s14, s15, s14
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003072:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003154 <commutate+0x19c>
 8003076:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800307a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800308a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003150 <commutate+0x198>
 800308e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	edd3 7a08 	vldr	s15, [r3, #32]
 8003098:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8003154 <commutate+0x19c>
 800309c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80030b0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003158 <commutate+0x1a0>
 80030b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800315c <commutate+0x1a4>
 80030bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
       controller->v_margin = controller->v_max - controller->v_ref;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <commutate+0x194>)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 80030f8:	eeb0 0a67 	vmov.f32	s0, s15
 80030fc:	4610      	mov	r0, r2
 80030fe:	f001 fd46 	bl	8004b8e <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800310e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003126:	edc7 7a06 	vstr	s15, [r7, #24]

       if(controller->i_q > controller->i_mag_max){
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	dd11      	ble.n	8003164 <commutate+0x1ac>
    	   controller->i_mag_max = controller->i_q;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	651a      	str	r2, [r3, #80]	@ 0x50
 8003148:	e00c      	b.n	8003164 <commutate+0x1ac>
 800314a:	bf00      	nop
 800314c:	20000330 	.word	0x20000330
 8003150:	3f666666 	.word	0x3f666666
 8003154:	3dcccccd 	.word	0x3dcccccd
 8003158:	3f70a3d7 	.word	0x3f70a3d7
 800315c:	3f13cd3a 	.word	0x3f13cd3a
 8003160:	381d4951 	.word	0x381d4951
       }


       // Calculate decoupling feed-forward voltages //

       float v_d_ff = 0.0f;//-SQRT3*controller->dtheta_elec*L_Q*controller->i_q;
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//SQRT3*controller->dtheta_elec*(0.0f*L_D*controller->i_d + controller->flux_linkage);
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 8003176:	edd7 7a07 	vldr	s15, [r7, #28]
 800317a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003188:	edd7 7a05 	vldr	s15, [r7, #20]
 800318c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 80031a2:	eef0 0a47 	vmov.f32	s1, s14
 80031a6:	eeb0 0a67 	vmov.f32	s0, s15
 80031aa:	f001 fc6c 	bl	8004a86 <fast_fminf>
 80031ae:	eeb0 7a40 	vmov.f32	s14, s0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80031b8:	eef1 7a67 	vneg.f32	s15, s15
 80031bc:	eef0 0a67 	vmov.f32	s1, s15
 80031c0:	eeb0 0a47 	vmov.f32	s0, s14
 80031c4:	f001 fc43 	bl	8004a4e <fast_fmaxf>
 80031c8:	eef0 7a40 	vmov.f32	s15, s0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80031e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80031ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8003206:	eef0 0a47 	vmov.f32	s1, s14
 800320a:	eeb0 0a67 	vmov.f32	s0, s15
 800320e:	f001 fc3a 	bl	8004a86 <fast_fminf>
 8003212:	eeb0 7a40 	vmov.f32	s14, s0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 800321c:	eef1 7a67 	vneg.f32	s15, s15
 8003220:	eef0 0a67 	vmov.f32	s1, s15
 8003224:	eeb0 0a47 	vmov.f32	s0, s14
 8003228:	f001 fc11 	bl	8004a4e <fast_fmaxf>
 800322c:	eef0 7a40 	vmov.f32	s15, s0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
       float vq_max = controller->v_max;//sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800323c:	60fb      	str	r3, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 8003244:	edd7 7a06 	vldr	s15, [r7, #24]
 8003248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003252:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003256:	edd7 7a04 	vldr	s15, [r7, #16]
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8003276:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800327a:	edd7 7a06 	vldr	s15, [r7, #24]
 800327e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8003298:	eef0 0a47 	vmov.f32	s1, s14
 800329c:	eeb0 0a67 	vmov.f32	s0, s15
 80032a0:	f001 fbf1 	bl	8004a86 <fast_fminf>
 80032a4:	eeb0 7a40 	vmov.f32	s14, s0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80032ae:	eef1 7a67 	vneg.f32	s15, s15
 80032b2:	eef0 0a67 	vmov.f32	s1, s15
 80032b6:	eeb0 0a47 	vmov.f32	s0, s14
 80032ba:	f001 fbc8 	bl	8004a4e <fast_fmaxf>
 80032be:	eef0 7a40 	vmov.f32	s15, s0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80032d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80032e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	eeb0 0a67 	vmov.f32	s0, s15
 80032f0:	f007 ff1a 	bl	800b128 <sqrtf>
 80032f4:	eef0 7a40 	vmov.f32	s15, s0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003304:	edd7 0a03 	vldr	s1, [r7, #12]
 8003308:	eeb0 0a67 	vmov.f32	s0, s15
 800330c:	f001 fbbb 	bl	8004a86 <fast_fminf>
 8003310:	eeb0 7a40 	vmov.f32	s14, s0
 8003314:	edd7 7a03 	vldr	s15, [r7, #12]
 8003318:	eef1 7a67 	vneg.f32	s15, s15
 800331c:	eef0 0a67 	vmov.f32	s1, s15
 8003320:	eeb0 0a47 	vmov.f32	s0, s14
 8003324:	f001 fb93 	bl	8004a4e <fast_fmaxf>
 8003328:	eef0 7a40 	vmov.f32	s15, s0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8003344:	eeb0 0a67 	vmov.f32	s0, s15
 8003348:	4610      	mov	r0, r2
 800334a:	f001 fc20 	bl	8004b8e <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800335a:	ed5f 6a7f 	vldr	s13, [pc, #-508]	@ 8003160 <commutate+0x1a8>
 800335e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3370      	adds	r3, #112	@ 0x70
 8003382:	461a      	mov	r2, r3
 8003384:	eeb0 1a66 	vmov.f32	s2, s13
 8003388:	eef0 0a47 	vmov.f32	s1, s14
 800338c:	eeb0 0a67 	vmov.f32	s0, s15
 8003390:	f7ff fa2e 	bl	80027f0 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3364      	adds	r3, #100	@ 0x64
 80033bc:	461a      	mov	r2, r3
 80033be:	eef0 1a46 	vmov.f32	s3, s12
 80033c2:	eeb0 1a66 	vmov.f32	s2, s13
 80033c6:	eef0 0a47 	vmov.f32	s1, s14
 80033ca:	eeb0 0a67 	vmov.f32	s0, s15
 80033ce:	f7ff fb23 	bl	8002a18 <svm>

       set_dtc(controller);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff f8e8 	bl	80025a8 <set_dtc>

    }
 80033d8:	bf00      	nop
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <torque_control>:


void torque_control(ControllerStruct *controller){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	controller->t_ff_filt = 0.9f*controller->t_ff_filt + 0.1f*controller->t_ff;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80033ee:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80034d4 <torque_control+0xf4>
 80033f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 80033fc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80034d8 <torque_control+0xf8>
 8003400:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff_filt + controller->kd*(controller->v_des - controller->dtheta_mech);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	ed93 7a38 	vldr	s14, [r3, #224]	@ 0xe0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edd3 6a36 	vldr	s13, [r3, #216]	@ 0xd8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003420:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800342e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	edd3 6a39 	vldr	s13, [r3, #228]	@ 0xe4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	ed93 6a37 	vldr	s12, [r3, #220]	@ 0xdc
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003444:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 8003454:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <torque_control+0xfc>)
 8003456:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <torque_control+0xfc>)
 800345c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003464:	ed97 7a03 	vldr	s14, [r7, #12]
 8003468:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8003472:	eef0 0a67 	vmov.f32	s1, s15
 8003476:	eeb0 0a66 	vmov.f32	s0, s13
 800347a:	f001 fb04 	bl	8004a86 <fast_fminf>
 800347e:	eeb0 7a40 	vmov.f32	s14, s0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8003488:	eef1 7a67 	vneg.f32	s15, s15
 800348c:	eef0 0a67 	vmov.f32	s1, s15
 8003490:	eeb0 0a47 	vmov.f32	s0, s14
 8003494:	f001 fadb 	bl	8004a4e <fast_fmaxf>
 8003498:	eef0 7a40 	vmov.f32	s15, s0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
    if(controller->v_bus > V_BUS_MAX){controller->i_q_des = 0;}
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80034a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80034e0 <torque_control+0x100>
 80034ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	dd04      	ble.n	80034c0 <torque_control+0xe0>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    controller->i_d_des = 0.0f;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

    }
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	3f666666 	.word	0x3f666666
 80034d8:	3dcccccd 	.word	0x3dcccccd
 80034dc:	20000330 	.word	0x20000330
 80034e0:	42200000 	.word	0x42200000

080034e4 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	controller->kp = 0;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	controller->kd = 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	controller->p_des = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	controller->v_des = 0;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	controller->i_q_des = 0;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	785a      	ldrb	r2, [r3, #1]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d00d      	beq.n	8003564 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f93f 	bl	80037cc <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	785a      	ldrb	r2, [r3, #1]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8d0 	bl	8003704 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b06      	cmp	r3, #6
 800356a:	f200 80b7 	bhi.w	80036dc <run_fsm+0x1a8>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <run_fsm+0x40>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080036db 	.word	0x080036db
 8003578:	08003591 	.word	0x08003591
 800357c:	08003691 	.word	0x08003691
 8003580:	080036dd 	.word	0x080036dd
 8003584:	080036db 	.word	0x080036db
 8003588:	080036d1 	.word	0x080036d1
 800358c:	080036db 	.word	0x080036db
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003590:	4b54      	ldr	r3, [pc, #336]	@ (80036e4 <run_fsm+0x1b0>)
 8003592:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800359a:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <run_fsm+0x1b4>)
 800359c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035a0:	4a50      	ldr	r2, [pc, #320]	@ (80036e4 <run_fsm+0x1b0>)
 80035a2:	4951      	ldr	r1, [pc, #324]	@ (80036e8 <run_fsm+0x1b4>)
 80035a4:	4851      	ldr	r0, [pc, #324]	@ (80036ec <run_fsm+0x1b8>)
 80035a6:	f7fd feff 	bl	80013a8 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 80035aa:	e097      	b.n	80036dc <run_fsm+0x1a8>
			 else if(!comm_encoder_cal.done_cal){
 80035ac:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <run_fsm+0x1b0>)
 80035ae:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80035b6:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <run_fsm+0x1b4>)
 80035b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035bc:	4a49      	ldr	r2, [pc, #292]	@ (80036e4 <run_fsm+0x1b0>)
 80035be:	494a      	ldr	r1, [pc, #296]	@ (80036e8 <run_fsm+0x1b4>)
 80035c0:	484a      	ldr	r0, [pc, #296]	@ (80036ec <run_fsm+0x1b8>)
 80035c2:	f7fd fff9 	bl	80015b8 <calibrate_encoder>
			 break;
 80035c6:	e089      	b.n	80036dc <run_fsm+0x1a8>
				 E_ZERO = comm_encoder_cal.ezero;
 80035c8:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <run_fsm+0x1b0>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	4a48      	ldr	r2, [pc, #288]	@ (80036f0 <run_fsm+0x1bc>)
 80035ce:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80035d0:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <run_fsm+0x1bc>)
 80035d2:	695c      	ldr	r4, [r3, #20]
 80035d4:	4b45      	ldr	r3, [pc, #276]	@ (80036ec <run_fsm+0x1b8>)
 80035d6:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80035da:	4b45      	ldr	r3, [pc, #276]	@ (80036f0 <run_fsm+0x1bc>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	425b      	negs	r3, r3
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ec:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80036f4 <run_fsm+0x1c0>
 80035f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035f4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80035f8:	eeb0 0a47 	vmov.f32	s0, s14
 80035fc:	f007 fd74 	bl	800b0e8 <fmodf>
 8003600:	eef0 7a40 	vmov.f32	s15, s0
 8003604:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80036f8 <run_fsm+0x1c4>
 8003608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800360c:	ee17 0a90 	vmov	r0, s15
 8003610:	f7fc ffba 	bl	8000588 <__aeabi_f2d>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4621      	mov	r1, r4
 800361a:	4838      	ldr	r0, [pc, #224]	@ (80036fc <run_fsm+0x1c8>)
 800361c:	f009 fc3c 	bl	800ce98 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003620:	4b32      	ldr	r3, [pc, #200]	@ (80036ec <run_fsm+0x1b8>)
 8003622:	4a30      	ldr	r2, [pc, #192]	@ (80036e4 <run_fsm+0x1b0>)
 8003624:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8003628:	33dc      	adds	r3, #220	@ 0xdc
 800362a:	f102 012c 	add.w	r1, r2, #44	@ 0x2c
 800362e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003632:	4618      	mov	r0, r3
 8003634:	f009 fe09 	bl	800d24a <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003638:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <run_fsm+0x1bc>)
 800363a:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <run_fsm+0x1b0>)
 800363c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8003640:	3318      	adds	r3, #24
 8003642:	f102 012c 	add.w	r1, r2, #44	@ 0x2c
 8003646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800364a:	4618      	mov	r0, r3
 800364c:	f009 fdfd 	bl	800d24a <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <run_fsm+0x1cc>)
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003658:	f001 fdcc 	bl	80051f4 <preference_writer_ready>
 800365c:	4603      	mov	r3, r0
 800365e:	f083 0301 	eor.w	r3, r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <run_fsm+0x13a>
 8003668:	4825      	ldr	r0, [pc, #148]	@ (8003700 <run_fsm+0x1cc>)
 800366a:	f001 fdb4 	bl	80051d6 <preference_writer_open>
				 preference_writer_flush(&prefs);
 800366e:	4824      	ldr	r0, [pc, #144]	@ (8003700 <run_fsm+0x1cc>)
 8003670:	f001 fdce 	bl	8005210 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8003674:	4822      	ldr	r0, [pc, #136]	@ (8003700 <run_fsm+0x1cc>)
 8003676:	f001 fe49 	bl	800530c <preference_writer_close>
				 preference_writer_load(prefs);
 800367a:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <run_fsm+0x1cc>)
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	9200      	str	r2, [sp, #0]
 8003680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003682:	f001 fe01 	bl	8005288 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8003686:	211b      	movs	r1, #27
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8f7 	bl	800387c <update_fsm>
			 break;
 800368e:	e025      	b.n	80036dc <run_fsm+0x1a8>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003690:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <run_fsm+0x1bc>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	dd09      	ble.n	80036ac <run_fsm+0x178>
 8003698:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <run_fsm+0x1b4>)
 800369a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800369e:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <run_fsm+0x1bc>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	dd02      	ble.n	80036ac <run_fsm+0x178>
				 zero_commands(&controller);
 80036a6:	4810      	ldr	r0, [pc, #64]	@ (80036e8 <run_fsm+0x1b4>)
 80036a8:	f7ff ff1c 	bl	80034e4 <zero_commands>
			 }
			 /* Otherwise, commutate */

			 torque_control(&controller);
 80036ac:	480e      	ldr	r0, [pc, #56]	@ (80036e8 <run_fsm+0x1b4>)
 80036ae:	f7ff fe97 	bl	80033e0 <torque_control>
			 field_weaken(&controller);
 80036b2:	480d      	ldr	r0, [pc, #52]	@ (80036e8 <run_fsm+0x1b4>)
 80036b4:	f7ff fbda 	bl	8002e6c <field_weaken>
			 commutate(&controller, &comm_encoder);
 80036b8:	490c      	ldr	r1, [pc, #48]	@ (80036ec <run_fsm+0x1b8>)
 80036ba:	480b      	ldr	r0, [pc, #44]	@ (80036e8 <run_fsm+0x1b4>)
 80036bc:	f7ff fc7c 	bl	8002fb8 <commutate>

			 controller.timeout ++;
 80036c0:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <run_fsm+0x1b4>)
 80036c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80036c6:	3301      	adds	r3, #1
 80036c8:	4a07      	ldr	r2, [pc, #28]	@ (80036e8 <run_fsm+0x1b4>)
 80036ca:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
			 break;
 80036ce:	e005      	b.n	80036dc <run_fsm+0x1a8>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 80036d0:	2164      	movs	r1, #100	@ 0x64
 80036d2:	4806      	ldr	r0, [pc, #24]	@ (80036ec <run_fsm+0x1b8>)
 80036d4:	f001 fd28 	bl	8005128 <ps_print>
			 break;
 80036d8:	e000      	b.n	80036dc <run_fsm+0x1a8>
			 break;
 80036da:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	20000e44 	.word	0x20000e44
 80036e8:	20000844 	.word	0x20000844
 80036ec:	20000b5c 	.word	0x20000b5c
 80036f0:	20000430 	.word	0x20000430
 80036f4:	47800000 	.word	0x47800000
 80036f8:	40c90fdb 	.word	0x40c90fdb
 80036fc:	0800f918 	.word	0x0800f918
 8003700:	20000830 	.word	0x20000830

08003704 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b05      	cmp	r3, #5
 8003712:	d84b      	bhi.n	80037ac <fsm_enter_state+0xa8>
 8003714:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <fsm_enter_state+0x18>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003735 	.word	0x08003735
 8003720:	08003769 	.word	0x08003769
 8003724:	08003741 	.word	0x08003741
 8003728:	080037ad 	.word	0x080037ad
 800372c:	0800373b 	.word	0x0800373b
 8003730:	080037ab 	.word	0x080037ab
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003734:	f000 f978 	bl	8003a28 <enter_menu_state>
				break;
 8003738:	e038      	b.n	80037ac <fsm_enter_state+0xa8>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 800373a:	f000 f9a1 	bl	8003a80 <enter_setup_state>
				break;
 800373e:	e035      	b.n	80037ac <fsm_enter_state+0xa8>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003740:	2201      	movs	r2, #1
 8003742:	2120      	movs	r1, #32
 8003744:	481b      	ldr	r0, [pc, #108]	@ (80037b4 <fsm_enter_state+0xb0>)
 8003746:	f004 fb9b 	bl	8007e80 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800374a:	481b      	ldr	r0, [pc, #108]	@ (80037b8 <fsm_enter_state+0xb4>)
 800374c:	f7ff fb1a 	bl	8002d84 <reset_foc>
				drv_enable_gd(drv);
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <fsm_enter_state+0xb8>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4611      	mov	r1, r2
 8003756:	889a      	ldrh	r2, [r3, #4]
 8003758:	2300      	movs	r3, #0
 800375a:	f362 030f 	bfi	r3, r2, #0, #16
 800375e:	4608      	mov	r0, r1
 8003760:	4619      	mov	r1, r3
 8003762:	f7fe fd52 	bl	800220a <drv_enable_gd>
				break;
 8003766:	e021      	b.n	80037ac <fsm_enter_state+0xa8>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <fsm_enter_state+0xbc>)
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				comm_encoder_cal.done_ordering = 0;
 8003770:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <fsm_enter_state+0xbc>)
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				comm_encoder_cal.started = 0;
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <fsm_enter_state+0xbc>)
 800377a:	2200      	movs	r2, #0
 800377c:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 800377e:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <fsm_enter_state+0xc0>)
 8003780:	2200      	movs	r2, #0
 8003782:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378a:	2100      	movs	r1, #0
 800378c:	480e      	ldr	r0, [pc, #56]	@ (80037c8 <fsm_enter_state+0xc4>)
 800378e:	f009 fccb 	bl	800d128 <memset>
				drv_enable_gd(drv);
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <fsm_enter_state+0xb8>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4611      	mov	r1, r2
 8003798:	889a      	ldrh	r2, [r3, #4]
 800379a:	2300      	movs	r3, #0
 800379c:	f362 030f 	bfi	r3, r2, #0, #16
 80037a0:	4608      	mov	r0, r1
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7fe fd31 	bl	800220a <drv_enable_gd>
				break;
 80037a8:	e000      	b.n	80037ac <fsm_enter_state+0xa8>
				break;
 80037aa:	bf00      	nop

		}
 }
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40020800 	.word	0x40020800
 80037b8:	20000844 	.word	0x20000844
 80037bc:	20000e3c 	.word	0x20000e3c
 80037c0:	20000e44 	.word	0x20000e44
 80037c4:	20000b5c 	.word	0x20000b5c
 80037c8:	20000c38 	.word	0x20000c38

080037cc <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d844      	bhi.n	8003866 <fsm_exit_state+0x9a>
 80037dc:	a201      	add	r2, pc, #4	@ (adr r2, 80037e4 <fsm_exit_state+0x18>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	080037fd 	.word	0x080037fd
 80037e8:	08003849 	.word	0x08003849
 80037ec:	08003815 	.word	0x08003815
 80037f0:	08003867 	.word	0x08003867
 80037f4:	08003805 	.word	0x08003805
 80037f8:	0800380d 	.word	0x0800380d
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	70da      	strb	r2, [r3, #3]
				break;
 8003802:	e030      	b.n	8003866 <fsm_exit_state+0x9a>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	70da      	strb	r2, [r3, #3]
				break;
 800380a:	e02c      	b.n	8003866 <fsm_exit_state+0x9a>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	70da      	strb	r2, [r3, #3]
				break;
 8003812:	e028      	b.n	8003866 <fsm_exit_state+0x9a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 800381a:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <fsm_exit_state+0xa4>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4611      	mov	r1, r2
 8003820:	889a      	ldrh	r2, [r3, #4]
 8003822:	2300      	movs	r3, #0
 8003824:	f362 030f 	bfi	r3, r2, #0, #16
 8003828:	4608      	mov	r0, r1
 800382a:	4619      	mov	r1, r3
 800382c:	f7fe fd07 	bl	800223e <drv_disable_gd>
					reset_foc(&controller);
 8003830:	4810      	ldr	r0, [pc, #64]	@ (8003874 <fsm_exit_state+0xa8>)
 8003832:	f7ff faa7 	bl	8002d84 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003836:	2200      	movs	r2, #0
 8003838:	2120      	movs	r1, #32
 800383a:	480f      	ldr	r0, [pc, #60]	@ (8003878 <fsm_exit_state+0xac>)
 800383c:	f004 fb20 	bl	8007e80 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003840:	480c      	ldr	r0, [pc, #48]	@ (8003874 <fsm_exit_state+0xa8>)
 8003842:	f7ff fe4f 	bl	80034e4 <zero_commands>
				break;
 8003846:	e00e      	b.n	8003866 <fsm_exit_state+0x9a>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <fsm_exit_state+0xa4>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4611      	mov	r1, r2
 800384e:	889a      	ldrh	r2, [r3, #4]
 8003850:	2300      	movs	r3, #0
 8003852:	f362 030f 	bfi	r3, r2, #0, #16
 8003856:	4608      	mov	r0, r1
 8003858:	4619      	mov	r1, r3
 800385a:	f7fe fcf0 	bl	800223e <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	70da      	strb	r2, [r3, #3]
				break;
 8003864:	bf00      	nop
		}

 }
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000e3c 	.word	0x20000e3c
 8003874:	20000844 	.word	0x20000844
 8003878:	40020800 	.word	0x40020800

0800387c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b1b      	cmp	r3, #27
 800388c:	d106      	bne.n	800389c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	70da      	strb	r2, [r3, #3]
		return;
 800389a:	e0b7      	b.n	8003a0c <update_fsm+0x190>
	}
	switch(fsmstate->state){
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	f200 80b3 	bhi.w	8003a0c <update_fsm+0x190>
 80038a6:	a201      	add	r2, pc, #4	@ (adr r2, 80038ac <update_fsm+0x30>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038c5 	.word	0x080038c5
 80038b0:	08003a0d 	.word	0x08003a0d
 80038b4:	08003a0d 	.word	0x08003a0d
 80038b8:	08003a0d 	.word	0x08003a0d
 80038bc:	080039d1 	.word	0x080039d1
 80038c0:	08003a0d 	.word	0x08003a0d
		case MENU_MODE:
			switch (fsm_input){
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	3b63      	subs	r3, #99	@ 0x63
 80038c8:	2b17      	cmp	r3, #23
 80038ca:	f200 809e 	bhi.w	8003a0a <update_fsm+0x18e>
 80038ce:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <update_fsm+0x58>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	08003935 	.word	0x08003935
 80038d8:	08003a0b 	.word	0x08003a0b
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003a0b 	.word	0x08003a0b
 80038e4:	08003a0b 	.word	0x08003a0b
 80038e8:	08003a0b 	.word	0x08003a0b
 80038ec:	08003a0b 	.word	0x08003a0b
 80038f0:	08003a0b 	.word	0x08003a0b
 80038f4:	08003a0b 	.word	0x08003a0b
 80038f8:	08003a0b 	.word	0x08003a0b
 80038fc:	08003943 	.word	0x08003943
 8003900:	08003a0b 	.word	0x08003a0b
 8003904:	08003a0b 	.word	0x08003a0b
 8003908:	08003a0b 	.word	0x08003a0b
 800390c:	08003a0b 	.word	0x08003a0b
 8003910:	08003a0b 	.word	0x08003a0b
 8003914:	0800395f 	.word	0x0800395f
 8003918:	08003a0b 	.word	0x08003a0b
 800391c:	08003a0b 	.word	0x08003a0b
 8003920:	08003a0b 	.word	0x08003a0b
 8003924:	08003a0b 	.word	0x08003a0b
 8003928:	08003a0b 	.word	0x08003a0b
 800392c:	08003a0b 	.word	0x08003a0b
 8003930:	0800396d 	.word	0x0800396d
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	70da      	strb	r2, [r3, #3]
					break;
 8003940:	e045      	b.n	80039ce <update_fsm+0x152>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	70da      	strb	r2, [r3, #3]
					break;
 800394e:	e03e      	b.n	80039ce <update_fsm+0x152>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2205      	movs	r2, #5
 8003954:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	70da      	strb	r2, [r3, #3]
					break;
 800395c:	e037      	b.n	80039ce <update_fsm+0x152>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2204      	movs	r2, #4
 8003962:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	70da      	strb	r2, [r3, #3]
					break;
 800396a:	e030      	b.n	80039ce <update_fsm+0x152>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 800396c:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <update_fsm+0x198>)
 800396e:	2200      	movs	r2, #0
 8003970:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
					ps_sample(&comm_encoder, DT);
 8003974:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003a18 <update_fsm+0x19c>
 8003978:	4826      	ldr	r0, [pc, #152]	@ (8003a14 <update_fsm+0x198>)
 800397a:	f001 fa41 	bl	8004e00 <ps_sample>
					int zero_count = comm_encoder.count;
 800397e:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <update_fsm+0x198>)
 8003980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003982:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003984:	4a25      	ldr	r2, [pc, #148]	@ (8003a1c <update_fsm+0x1a0>)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800398a:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <update_fsm+0x1a4>)
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	9200      	str	r2, [sp, #0]
 8003990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003992:	f001 fc2f 	bl	80051f4 <preference_writer_ready>
 8003996:	4603      	mov	r3, r0
 8003998:	f083 0301 	eor.w	r3, r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <update_fsm+0x12c>
 80039a2:	481f      	ldr	r0, [pc, #124]	@ (8003a20 <update_fsm+0x1a4>)
 80039a4:	f001 fc17 	bl	80051d6 <preference_writer_open>
					preference_writer_flush(&prefs);
 80039a8:	481d      	ldr	r0, [pc, #116]	@ (8003a20 <update_fsm+0x1a4>)
 80039aa:	f001 fc31 	bl	8005210 <preference_writer_flush>
					preference_writer_close(&prefs);
 80039ae:	481c      	ldr	r0, [pc, #112]	@ (8003a20 <update_fsm+0x1a4>)
 80039b0:	f001 fcac 	bl	800530c <preference_writer_close>
					preference_writer_load(prefs);
 80039b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <update_fsm+0x1a4>)
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	9200      	str	r2, [sp, #0]
 80039ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039bc:	f001 fc64 	bl	8005288 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 80039c0:	4b16      	ldr	r3, [pc, #88]	@ (8003a1c <update_fsm+0x1a0>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4619      	mov	r1, r3
 80039c6:	4817      	ldr	r0, [pc, #92]	@ (8003a24 <update_fsm+0x1a8>)
 80039c8:	f009 fa66 	bl	800ce98 <iprintf>
					break;
 80039cc:	bf00      	nop
				}
			break;
 80039ce:	e01c      	b.n	8003a0a <update_fsm+0x18e>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b0d      	cmp	r3, #13
 80039d4:	d103      	bne.n	80039de <update_fsm+0x162>
				process_user_input(fsmstate);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9c6 	bl	8003d68 <process_user_input>
				break;
 80039dc:	e016      	b.n	8003a0c <update_fsm+0x190>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7b1b      	ldrb	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <update_fsm+0x172>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	735a      	strb	r2, [r3, #13]
 80039ec:	e006      	b.n	80039fc <update_fsm+0x180>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7b1b      	ldrb	r3, [r3, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7b1b      	ldrb	r3, [r3, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003a08:	e000      	b.n	8003a0c <update_fsm+0x190>
			break;
 8003a0a:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000b5c 	.word	0x20000b5c
 8003a18:	37d1b717 	.word	0x37d1b717
 8003a1c:	20000430 	.word	0x20000430
 8003a20:	20000830 	.word	0x20000830
 8003a24:	0800f92c 	.word	0x0800f92c

08003a28 <enter_menu_state>:


 void enter_menu_state(void){
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003a2c:	480c      	ldr	r0, [pc, #48]	@ (8003a60 <enter_menu_state+0x38>)
 8003a2e:	f009 fa33 	bl	800ce98 <iprintf>
	    printf(" Commands:\n\r");
 8003a32:	480c      	ldr	r0, [pc, #48]	@ (8003a64 <enter_menu_state+0x3c>)
 8003a34:	f009 fa30 	bl	800ce98 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003a38:	480b      	ldr	r0, [pc, #44]	@ (8003a68 <enter_menu_state+0x40>)
 8003a3a:	f009 fa2d 	bl	800ce98 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003a3e:	480b      	ldr	r0, [pc, #44]	@ (8003a6c <enter_menu_state+0x44>)
 8003a40:	f009 fa2a 	bl	800ce98 <iprintf>
	    printf(" s - Setup\n\r");
 8003a44:	480a      	ldr	r0, [pc, #40]	@ (8003a70 <enter_menu_state+0x48>)
 8003a46:	f009 fa27 	bl	800ce98 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003a4a:	480a      	ldr	r0, [pc, #40]	@ (8003a74 <enter_menu_state+0x4c>)
 8003a4c:	f009 fa24 	bl	800ce98 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003a50:	4809      	ldr	r0, [pc, #36]	@ (8003a78 <enter_menu_state+0x50>)
 8003a52:	f009 fa21 	bl	800ce98 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003a56:	4809      	ldr	r0, [pc, #36]	@ (8003a7c <enter_menu_state+0x54>)
 8003a58:	f009 fa1e 	bl	800ce98 <iprintf>

	    //gpio.led->write(0);
 }
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0800f954 	.word	0x0800f954
 8003a64:	0800f95c 	.word	0x0800f95c
 8003a68:	0800f96c 	.word	0x0800f96c
 8003a6c:	0800f980 	.word	0x0800f980
 8003a70:	0800f99c 	.word	0x0800f99c
 8003a74:	0800f9ac 	.word	0x0800f9ac
 8003a78:	0800f9c4 	.word	0x0800f9c4
 8003a7c:	0800f9e0 	.word	0x0800f9e0

08003a80 <enter_setup_state>:

 void enter_setup_state(void){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003a86:	487d      	ldr	r0, [pc, #500]	@ (8003c7c <enter_setup_state+0x1fc>)
 8003a88:	f009 fa06 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c80 <enter_setup_state+0x200>)
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	4b7c      	ldr	r3, [pc, #496]	@ (8003c84 <enter_setup_state+0x204>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	4b7c      	ldr	r3, [pc, #496]	@ (8003c88 <enter_setup_state+0x208>)
 8003a96:	4a7d      	ldr	r2, [pc, #500]	@ (8003c8c <enter_setup_state+0x20c>)
 8003a98:	497d      	ldr	r1, [pc, #500]	@ (8003c90 <enter_setup_state+0x210>)
 8003a9a:	487e      	ldr	r0, [pc, #504]	@ (8003c94 <enter_setup_state+0x214>)
 8003a9c:	f009 f9fc 	bl	800ce98 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003aa0:	487d      	ldr	r0, [pc, #500]	@ (8003c98 <enter_setup_state+0x218>)
 8003aa2:	f009 fa61 	bl	800cf68 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8003c9c <enter_setup_state+0x21c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd6c 	bl	8000588 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ab8:	4b79      	ldr	r3, [pc, #484]	@ (8003ca0 <enter_setup_state+0x220>)
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4b79      	ldr	r3, [pc, #484]	@ (8003ca4 <enter_setup_state+0x224>)
 8003abe:	4a7a      	ldr	r2, [pc, #488]	@ (8003ca8 <enter_setup_state+0x228>)
 8003ac0:	497a      	ldr	r1, [pc, #488]	@ (8003cac <enter_setup_state+0x22c>)
 8003ac2:	487b      	ldr	r0, [pc, #492]	@ (8003cb0 <enter_setup_state+0x230>)
 8003ac4:	f009 f9e8 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003ac8:	4b74      	ldr	r3, [pc, #464]	@ (8003c9c <enter_setup_state+0x21c>)
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd5b 	bl	8000588 <__aeabi_f2d>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ada:	4b71      	ldr	r3, [pc, #452]	@ (8003ca0 <enter_setup_state+0x220>)
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4b71      	ldr	r3, [pc, #452]	@ (8003ca4 <enter_setup_state+0x224>)
 8003ae0:	4a74      	ldr	r2, [pc, #464]	@ (8003cb4 <enter_setup_state+0x234>)
 8003ae2:	4975      	ldr	r1, [pc, #468]	@ (8003cb8 <enter_setup_state+0x238>)
 8003ae4:	4875      	ldr	r0, [pc, #468]	@ (8003cbc <enter_setup_state+0x23c>)
 8003ae6:	f009 f9d7 	bl	800ce98 <iprintf>
	    printf("\r\n Control:\r\n");
 8003aea:	4875      	ldr	r0, [pc, #468]	@ (8003cc0 <enter_setup_state+0x240>)
 8003aec:	f009 fa3c 	bl	800cf68 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003af0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <enter_setup_state+0x21c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fd47 	bl	8000588 <__aeabi_f2d>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b02:	4b70      	ldr	r3, [pc, #448]	@ (8003cc4 <enter_setup_state+0x244>)
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4b70      	ldr	r3, [pc, #448]	@ (8003cc8 <enter_setup_state+0x248>)
 8003b08:	4a70      	ldr	r2, [pc, #448]	@ (8003ccc <enter_setup_state+0x24c>)
 8003b0a:	4971      	ldr	r1, [pc, #452]	@ (8003cd0 <enter_setup_state+0x250>)
 8003b0c:	4868      	ldr	r0, [pc, #416]	@ (8003cb0 <enter_setup_state+0x230>)
 8003b0e:	f009 f9c3 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "l", "Current Limit (A)", "0.0", "75.0", I_MAX);
 8003b12:	4b62      	ldr	r3, [pc, #392]	@ (8003c9c <enter_setup_state+0x21c>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fc fd36 	bl	8000588 <__aeabi_f2d>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b24:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd4 <enter_setup_state+0x254>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd8 <enter_setup_state+0x258>)
 8003b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003cdc <enter_setup_state+0x25c>)
 8003b2c:	496c      	ldr	r1, [pc, #432]	@ (8003ce0 <enter_setup_state+0x260>)
 8003b2e:	4860      	ldr	r0, [pc, #384]	@ (8003cb0 <enter_setup_state+0x230>)
 8003b30:	f009 f9b2 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003b34:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <enter_setup_state+0x21c>)
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fd25 	bl	8000588 <__aeabi_f2d>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b46:	4b56      	ldr	r3, [pc, #344]	@ (8003ca0 <enter_setup_state+0x220>)
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	4b55      	ldr	r3, [pc, #340]	@ (8003ca0 <enter_setup_state+0x220>)
 8003b4c:	4a65      	ldr	r2, [pc, #404]	@ (8003ce4 <enter_setup_state+0x264>)
 8003b4e:	4966      	ldr	r1, [pc, #408]	@ (8003ce8 <enter_setup_state+0x268>)
 8003b50:	4857      	ldr	r0, [pc, #348]	@ (8003cb0 <enter_setup_state+0x230>)
 8003b52:	f009 f9a1 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003b56:	4b51      	ldr	r3, [pc, #324]	@ (8003c9c <enter_setup_state+0x21c>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fd14 	bl	8000588 <__aeabi_f2d>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca0 <enter_setup_state+0x220>)
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca0 <enter_setup_state+0x220>)
 8003b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003cec <enter_setup_state+0x26c>)
 8003b70:	495f      	ldr	r1, [pc, #380]	@ (8003cf0 <enter_setup_state+0x270>)
 8003b72:	484f      	ldr	r0, [pc, #316]	@ (8003cb0 <enter_setup_state+0x230>)
 8003b74:	f009 f990 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003b78:	4b48      	ldr	r3, [pc, #288]	@ (8003c9c <enter_setup_state+0x21c>)
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fd03 	bl	8000588 <__aeabi_f2d>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf4 <enter_setup_state+0x274>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4b52      	ldr	r3, [pc, #328]	@ (8003cd8 <enter_setup_state+0x258>)
 8003b90:	4a59      	ldr	r2, [pc, #356]	@ (8003cf8 <enter_setup_state+0x278>)
 8003b92:	495a      	ldr	r1, [pc, #360]	@ (8003cfc <enter_setup_state+0x27c>)
 8003b94:	4846      	ldr	r0, [pc, #280]	@ (8003cb0 <enter_setup_state+0x230>)
 8003b96:	f009 f97f 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003b9a:	4b40      	ldr	r3, [pc, #256]	@ (8003c9c <enter_setup_state+0x21c>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fcf2 	bl	8000588 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bac:	4b54      	ldr	r3, [pc, #336]	@ (8003d00 <enter_setup_state+0x280>)
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4b49      	ldr	r3, [pc, #292]	@ (8003cd8 <enter_setup_state+0x258>)
 8003bb2:	4a54      	ldr	r2, [pc, #336]	@ (8003d04 <enter_setup_state+0x284>)
 8003bb4:	4954      	ldr	r1, [pc, #336]	@ (8003d08 <enter_setup_state+0x288>)
 8003bb6:	483e      	ldr	r0, [pc, #248]	@ (8003cb0 <enter_setup_state+0x230>)
 8003bb8:	f009 f96e 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003bbc:	4b37      	ldr	r3, [pc, #220]	@ (8003c9c <enter_setup_state+0x21c>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fce1 	bl	8000588 <__aeabi_f2d>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bce:	4b4f      	ldr	r3, [pc, #316]	@ (8003d0c <enter_setup_state+0x28c>)
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <enter_setup_state+0x258>)
 8003bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d10 <enter_setup_state+0x290>)
 8003bd6:	494f      	ldr	r1, [pc, #316]	@ (8003d14 <enter_setup_state+0x294>)
 8003bd8:	4835      	ldr	r0, [pc, #212]	@ (8003cb0 <enter_setup_state+0x230>)
 8003bda:	f009 f95d 	bl	800ce98 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003bde:	4b2f      	ldr	r3, [pc, #188]	@ (8003c9c <enter_setup_state+0x21c>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fcd0 	bl	8000588 <__aeabi_f2d>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <enter_setup_state+0x298>)
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4b38      	ldr	r3, [pc, #224]	@ (8003cd8 <enter_setup_state+0x258>)
 8003bf6:	4a49      	ldr	r2, [pc, #292]	@ (8003d1c <enter_setup_state+0x29c>)
 8003bf8:	4949      	ldr	r1, [pc, #292]	@ (8003d20 <enter_setup_state+0x2a0>)
 8003bfa:	482d      	ldr	r0, [pc, #180]	@ (8003cb0 <enter_setup_state+0x230>)
 8003bfc:	f009 f94c 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003c00:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <enter_setup_state+0x21c>)
 8003c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fcbf 	bl	8000588 <__aeabi_f2d>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c12:	4b44      	ldr	r3, [pc, #272]	@ (8003d24 <enter_setup_state+0x2a4>)
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <enter_setup_state+0x258>)
 8003c18:	4a43      	ldr	r2, [pc, #268]	@ (8003d28 <enter_setup_state+0x2a8>)
 8003c1a:	4944      	ldr	r1, [pc, #272]	@ (8003d2c <enter_setup_state+0x2ac>)
 8003c1c:	4824      	ldr	r0, [pc, #144]	@ (8003cb0 <enter_setup_state+0x230>)
 8003c1e:	f009 f93b 	bl	800ce98 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003c22:	4843      	ldr	r0, [pc, #268]	@ (8003d30 <enter_setup_state+0x2b0>)
 8003c24:	f009 f9a0 	bl	800cf68 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003c28:	4b42      	ldr	r3, [pc, #264]	@ (8003d34 <enter_setup_state+0x2b4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	4b42      	ldr	r3, [pc, #264]	@ (8003d38 <enter_setup_state+0x2b8>)
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca4 <enter_setup_state+0x224>)
 8003c34:	4a41      	ldr	r2, [pc, #260]	@ (8003d3c <enter_setup_state+0x2bc>)
 8003c36:	4942      	ldr	r1, [pc, #264]	@ (8003d40 <enter_setup_state+0x2c0>)
 8003c38:	4842      	ldr	r0, [pc, #264]	@ (8003d44 <enter_setup_state+0x2c4>)
 8003c3a:	f009 f92d 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d34 <enter_setup_state+0x2b4>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <enter_setup_state+0x2b8>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <enter_setup_state+0x224>)
 8003c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d48 <enter_setup_state+0x2c8>)
 8003c4c:	493f      	ldr	r1, [pc, #252]	@ (8003d4c <enter_setup_state+0x2cc>)
 8003c4e:	483d      	ldr	r0, [pc, #244]	@ (8003d44 <enter_setup_state+0x2c4>)
 8003c50:	f009 f922 	bl	800ce98 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003c54:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <enter_setup_state+0x2b4>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <enter_setup_state+0x2d0>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <enter_setup_state+0x224>)
 8003c60:	4a3c      	ldr	r2, [pc, #240]	@ (8003d54 <enter_setup_state+0x2d4>)
 8003c62:	493d      	ldr	r1, [pc, #244]	@ (8003d58 <enter_setup_state+0x2d8>)
 8003c64:	483d      	ldr	r0, [pc, #244]	@ (8003d5c <enter_setup_state+0x2dc>)
 8003c66:	f009 f917 	bl	800ce98 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003c6a:	483d      	ldr	r0, [pc, #244]	@ (8003d60 <enter_setup_state+0x2e0>)
 8003c6c:	f009 f914 	bl	800ce98 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003c70:	483c      	ldr	r0, [pc, #240]	@ (8003d64 <enter_setup_state+0x2e4>)
 8003c72:	f009 f911 	bl	800ce98 <iprintf>
 }
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	0800f9f8 	.word	0x0800f9f8
 8003c80:	0800fa4c 	.word	0x0800fa4c
 8003c84:	0800fa5c 	.word	0x0800fa5c
 8003c88:	0800fa14 	.word	0x0800fa14
 8003c8c:	0800fa18 	.word	0x0800fa18
 8003c90:	0800fa24 	.word	0x0800fa24
 8003c94:	0800fa2c 	.word	0x0800fa2c
 8003c98:	0800fa60 	.word	0x0800fa60
 8003c9c:	20000330 	.word	0x20000330
 8003ca0:	0800faa0 	.word	0x0800faa0
 8003ca4:	0800fa6c 	.word	0x0800fa6c
 8003ca8:	0800fa70 	.word	0x0800fa70
 8003cac:	0800fa7c 	.word	0x0800fa7c
 8003cb0:	0800fa80 	.word	0x0800fa80
 8003cb4:	0800faa4 	.word	0x0800faa4
 8003cb8:	0800fabc 	.word	0x0800fabc
 8003cbc:	0800fac0 	.word	0x0800fac0
 8003cc0:	0800fae0 	.word	0x0800fae0
 8003cc4:	0800fb10 	.word	0x0800fb10
 8003cc8:	0800faf0 	.word	0x0800faf0
 8003ccc:	0800faf4 	.word	0x0800faf4
 8003cd0:	0800fb0c 	.word	0x0800fb0c
 8003cd4:	0800fb34 	.word	0x0800fb34
 8003cd8:	0800fb18 	.word	0x0800fb18
 8003cdc:	0800fb1c 	.word	0x0800fb1c
 8003ce0:	0800fb30 	.word	0x0800fb30
 8003ce4:	0800fb3c 	.word	0x0800fb3c
 8003ce8:	0800fb58 	.word	0x0800fb58
 8003cec:	0800fb5c 	.word	0x0800fb5c
 8003cf0:	0800fb7c 	.word	0x0800fb7c
 8003cf4:	0800fba0 	.word	0x0800fba0
 8003cf8:	0800fb80 	.word	0x0800fb80
 8003cfc:	0800fb9c 	.word	0x0800fb9c
 8003d00:	0800fbcc 	.word	0x0800fbcc
 8003d04:	0800fba8 	.word	0x0800fba8
 8003d08:	0800fbc8 	.word	0x0800fbc8
 8003d0c:	0800fbec 	.word	0x0800fbec
 8003d10:	0800fbd0 	.word	0x0800fbd0
 8003d14:	0800fbe8 	.word	0x0800fbe8
 8003d18:	0800fc10 	.word	0x0800fc10
 8003d1c:	0800fbf4 	.word	0x0800fbf4
 8003d20:	0800fc0c 	.word	0x0800fc0c
 8003d24:	0800fc34 	.word	0x0800fc34
 8003d28:	0800fc18 	.word	0x0800fc18
 8003d2c:	0800fc30 	.word	0x0800fc30
 8003d30:	0800fc3c 	.word	0x0800fc3c
 8003d34:	20000430 	.word	0x20000430
 8003d38:	0800fc74 	.word	0x0800fc74
 8003d3c:	0800fc48 	.word	0x0800fc48
 8003d40:	0800fc50 	.word	0x0800fc50
 8003d44:	0800fc54 	.word	0x0800fc54
 8003d48:	0800fc78 	.word	0x0800fc78
 8003d4c:	0800fc84 	.word	0x0800fc84
 8003d50:	0800fcc8 	.word	0x0800fcc8
 8003d54:	0800fc88 	.word	0x0800fc88
 8003d58:	0800fca8 	.word	0x0800fca8
 8003d5c:	0800fcac 	.word	0x0800fcac
 8003d60:	0800fcd0 	.word	0x0800fcd0
 8003d64:	0800fd1c 	.word	0x0800fd1c

08003d68 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7b5b      	ldrb	r3, [r3, #13]
 8003d74:	3b61      	subs	r3, #97	@ 0x61
 8003d76:	2b17      	cmp	r3, #23
 8003d78:	f200 8268 	bhi.w	800424c <process_user_input+0x4e4>
 8003d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <process_user_input+0x1c>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003fe3 	.word	0x08003fe3
 8003d88:	08003de5 	.word	0x08003de5
 8003d8c:	08003f8f 	.word	0x08003f8f
 8003d90:	08004161 	.word	0x08004161
 8003d94:	0800424d 	.word	0x0800424d
 8003d98:	08003ec9 	.word	0x08003ec9
 8003d9c:	08004037 	.word	0x08004037
 8003da0:	08003f3b 	.word	0x08003f3b
 8003da4:	08003e39 	.word	0x08003e39
 8003da8:	0800424d 	.word	0x0800424d
 8003dac:	0800407b 	.word	0x0800407b
 8003db0:	08003e75 	.word	0x08003e75
 8003db4:	08003e57 	.word	0x08003e57
 8003db8:	0800424d 	.word	0x0800424d
 8003dbc:	0800424d 	.word	0x0800424d
 8003dc0:	080041a5 	.word	0x080041a5
 8003dc4:	0800424d 	.word	0x0800424d
 8003dc8:	0800424d 	.word	0x0800424d
 8003dcc:	0800424d 	.word	0x0800424d
 8003dd0:	08003f1d 	.word	0x08003f1d
 8003dd4:	0800424d 	.word	0x0800424d
 8003dd8:	080041f9 	.word	0x080041f9
 8003ddc:	0800424d 	.word	0x0800424d
 8003de0:	080040bf 	.word	0x080040bf
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f007 fca1 	bl	800b730 <atof>
 8003dee:	ec53 2b10 	vmov	r2, r3, d0
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc ff17 	bl	8000c28 <__aeabi_d2f>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 8004104 <process_user_input+0x39c>
 8003e00:	ee00 3a10 	vmov	s0, r3
 8003e04:	f007 f9d6 	bl	800b1b4 <fminf>
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	eddf 0abe 	vldr	s1, [pc, #760]	@ 8004108 <process_user_input+0x3a0>
 8003e10:	eeb0 0a67 	vmov.f32	s0, s15
 8003e14:	f007 f9b1 	bl	800b17a <fmaxf>
 8003e18:	eef0 7a40 	vmov.f32	s15, s0
 8003e1c:	4bbb      	ldr	r3, [pc, #748]	@ (800410c <process_user_input+0x3a4>)
 8003e1e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003e22:	4bba      	ldr	r3, [pc, #744]	@ (800410c <process_user_input+0x3a4>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fbae 	bl	8000588 <__aeabi_f2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	48b7      	ldr	r0, [pc, #732]	@ (8004110 <process_user_input+0x3a8>)
 8003e32:	f009 f831 	bl	800ce98 <iprintf>
			 break;
 8003e36:	e210      	b.n	800425a <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f007 fc7a 	bl	800b736 <atoi>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4ab3      	ldr	r2, [pc, #716]	@ (8004114 <process_user_input+0x3ac>)
 8003e46:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003e48:	4bb2      	ldr	r3, [pc, #712]	@ (8004114 <process_user_input+0x3ac>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	48b2      	ldr	r0, [pc, #712]	@ (8004118 <process_user_input+0x3b0>)
 8003e50:	f009 f822 	bl	800ce98 <iprintf>
			 break;
 8003e54:	e201      	b.n	800425a <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f007 fc6b 	bl	800b736 <atoi>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4aac      	ldr	r2, [pc, #688]	@ (8004114 <process_user_input+0x3ac>)
 8003e64:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8003e66:	4bab      	ldr	r3, [pc, #684]	@ (8004114 <process_user_input+0x3ac>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	48ab      	ldr	r0, [pc, #684]	@ (800411c <process_user_input+0x3b4>)
 8003e6e:	f009 f813 	bl	800ce98 <iprintf>
			 break;
 8003e72:	e1f2      	b.n	800425a <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 75.0f), 0.0f);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f007 fc59 	bl	800b730 <atof>
 8003e7e:	ec53 2b10 	vmov	r2, r3, d0
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7fc fecf 	bl	8000c28 <__aeabi_d2f>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8004120 <process_user_input+0x3b8>
 8003e90:	ee00 3a10 	vmov	s0, r3
 8003e94:	f007 f98e 	bl	800b1b4 <fminf>
 8003e98:	eef0 7a40 	vmov.f32	s15, s0
 8003e9c:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 800415c <process_user_input+0x3f4>
 8003ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea4:	f007 f969 	bl	800b17a <fmaxf>
 8003ea8:	eef0 7a40 	vmov.f32	s15, s0
 8003eac:	4b97      	ldr	r3, [pc, #604]	@ (800410c <process_user_input+0x3a4>)
 8003eae:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003eb2:	4b96      	ldr	r3, [pc, #600]	@ (800410c <process_user_input+0x3a4>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fb66 	bl	8000588 <__aeabi_f2d>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4898      	ldr	r0, [pc, #608]	@ (8004124 <process_user_input+0x3bc>)
 8003ec2:	f008 ffe9 	bl	800ce98 <iprintf>
			 break;
 8003ec6:	e1c8      	b.n	800425a <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f007 fc2f 	bl	800b730 <atof>
 8003ed2:	ec53 2b10 	vmov	r2, r3, d0
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fc fea5 	bl	8000c28 <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8004128 <process_user_input+0x3c0>
 8003ee4:	ee00 3a10 	vmov	s0, r3
 8003ee8:	f007 f964 	bl	800b1b4 <fminf>
 8003eec:	eef0 7a40 	vmov.f32	s15, s0
 8003ef0:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 800415c <process_user_input+0x3f4>
 8003ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef8:	f007 f93f 	bl	800b17a <fmaxf>
 8003efc:	eef0 7a40 	vmov.f32	s15, s0
 8003f00:	4b82      	ldr	r3, [pc, #520]	@ (800410c <process_user_input+0x3a4>)
 8003f02:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003f06:	4b81      	ldr	r3, [pc, #516]	@ (800410c <process_user_input+0x3a4>)
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb3c 	bl	8000588 <__aeabi_f2d>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4885      	ldr	r0, [pc, #532]	@ (800412c <process_user_input+0x3c4>)
 8003f16:	f008 ffbf 	bl	800ce98 <iprintf>
			 break;
 8003f1a:	e19e      	b.n	800425a <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f007 fc08 	bl	800b736 <atoi>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a7a      	ldr	r2, [pc, #488]	@ (8004114 <process_user_input+0x3ac>)
 8003f2a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003f2c:	4b79      	ldr	r3, [pc, #484]	@ (8004114 <process_user_input+0x3ac>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4619      	mov	r1, r3
 8003f32:	487f      	ldr	r0, [pc, #508]	@ (8004130 <process_user_input+0x3c8>)
 8003f34:	f008 ffb0 	bl	800ce98 <iprintf>
			 break;
 8003f38:	e18f      	b.n	800425a <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f007 fbf6 	bl	800b730 <atof>
 8003f44:	ec53 2b10 	vmov	r2, r3, d0
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7fc fe6c 	bl	8000c28 <__aeabi_d2f>
 8003f50:	4603      	mov	r3, r0
 8003f52:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8004134 <process_user_input+0x3cc>
 8003f56:	ee00 3a10 	vmov	s0, r3
 8003f5a:	f007 f92b 	bl	800b1b4 <fminf>
 8003f5e:	eef0 7a40 	vmov.f32	s15, s0
 8003f62:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 800415c <process_user_input+0x3f4>
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	f007 f906 	bl	800b17a <fmaxf>
 8003f6e:	eef0 7a40 	vmov.f32	s15, s0
 8003f72:	4b66      	ldr	r3, [pc, #408]	@ (800410c <process_user_input+0x3a4>)
 8003f74:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003f78:	4b64      	ldr	r3, [pc, #400]	@ (800410c <process_user_input+0x3a4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fb03 	bl	8000588 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	486c      	ldr	r0, [pc, #432]	@ (8004138 <process_user_input+0x3d0>)
 8003f88:	f008 ff86 	bl	800ce98 <iprintf>
			 break;
 8003f8c:	e165      	b.n	800425a <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f007 fbcc 	bl	800b730 <atof>
 8003f98:	ec53 2b10 	vmov	r2, r3, d0
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f7fc fe42 	bl	8000c28 <__aeabi_d2f>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	eddf 0a65 	vldr	s1, [pc, #404]	@ 800413c <process_user_input+0x3d4>
 8003faa:	ee00 3a10 	vmov	s0, r3
 8003fae:	f007 f901 	bl	800b1b4 <fminf>
 8003fb2:	eef0 7a40 	vmov.f32	s15, s0
 8003fb6:	eddf 0a69 	vldr	s1, [pc, #420]	@ 800415c <process_user_input+0x3f4>
 8003fba:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbe:	f007 f8dc 	bl	800b17a <fmaxf>
 8003fc2:	eef0 7a40 	vmov.f32	s15, s0
 8003fc6:	4b51      	ldr	r3, [pc, #324]	@ (800410c <process_user_input+0x3a4>)
 8003fc8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800410c <process_user_input+0x3a4>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fad9 	bl	8000588 <__aeabi_f2d>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4859      	ldr	r0, [pc, #356]	@ (8004140 <process_user_input+0x3d8>)
 8003fdc:	f008 ff5c 	bl	800ce98 <iprintf>
			 break;
 8003fe0:	e13b      	b.n	800425a <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f007 fba2 	bl	800b730 <atof>
 8003fec:	ec53 2b10 	vmov	r2, r3, d0
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7fc fe18 	bl	8000c28 <__aeabi_d2f>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8003ffe:	ee00 3a10 	vmov	s0, r3
 8004002:	f007 f8d7 	bl	800b1b4 <fminf>
 8004006:	eef0 7a40 	vmov.f32	s15, s0
 800400a:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800415c <process_user_input+0x3f4>
 800400e:	eeb0 0a67 	vmov.f32	s0, s15
 8004012:	f007 f8b2 	bl	800b17a <fmaxf>
 8004016:	eef0 7a40 	vmov.f32	s15, s0
 800401a:	4b3c      	ldr	r3, [pc, #240]	@ (800410c <process_user_input+0x3a4>)
 800401c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004020:	4b3a      	ldr	r3, [pc, #232]	@ (800410c <process_user_input+0x3a4>)
 8004022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc faaf 	bl	8000588 <__aeabi_f2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4845      	ldr	r0, [pc, #276]	@ (8004144 <process_user_input+0x3dc>)
 8004030:	f008 ff32 	bl	800ce98 <iprintf>
			 break;
 8004034:	e111      	b.n	800425a <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f007 fb78 	bl	800b730 <atof>
 8004040:	ec53 2b10 	vmov	r2, r3, d0
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	f7fc fdee 	bl	8000c28 <__aeabi_d2f>
 800404c:	4603      	mov	r3, r0
 800404e:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8004148 <process_user_input+0x3e0>
 8004052:	ee00 3a10 	vmov	s0, r3
 8004056:	f007 f890 	bl	800b17a <fmaxf>
 800405a:	eef0 7a40 	vmov.f32	s15, s0
 800405e:	4b2b      	ldr	r3, [pc, #172]	@ (800410c <process_user_input+0x3a4>)
 8004060:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			 printf("GR set to %f\r\n", GR);
 8004064:	4b29      	ldr	r3, [pc, #164]	@ (800410c <process_user_input+0x3a4>)
 8004066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fa8d 	bl	8000588 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4836      	ldr	r0, [pc, #216]	@ (800414c <process_user_input+0x3e4>)
 8004074:	f008 ff10 	bl	800ce98 <iprintf>
			 break;
 8004078:	e0ef      	b.n	800425a <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f007 fb56 	bl	800b730 <atof>
 8004084:	ec53 2b10 	vmov	r2, r3, d0
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	f7fc fdcc 	bl	8000c28 <__aeabi_d2f>
 8004090:	4603      	mov	r3, r0
 8004092:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8004150 <process_user_input+0x3e8>
 8004096:	ee00 3a10 	vmov	s0, r3
 800409a:	f007 f86e 	bl	800b17a <fmaxf>
 800409e:	eef0 7a40 	vmov.f32	s15, s0
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <process_user_input+0x3a4>)
 80040a4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			 printf("KT set to %f\r\n", KT);
 80040a8:	4b18      	ldr	r3, [pc, #96]	@ (800410c <process_user_input+0x3a4>)
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fa6b 	bl	8000588 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4827      	ldr	r0, [pc, #156]	@ (8004154 <process_user_input+0x3ec>)
 80040b8:	f008 feee 	bl	800ce98 <iprintf>
			 break;
 80040bc:	e0cd      	b.n	800425a <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 fb34 	bl	800b730 <atof>
 80040c8:	ec53 2b10 	vmov	r2, r3, d0
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f7fc fdaa 	bl	8000c28 <__aeabi_d2f>
 80040d4:	4603      	mov	r3, r0
 80040d6:	eddf 0a21 	vldr	s1, [pc, #132]	@ 800415c <process_user_input+0x3f4>
 80040da:	ee00 3a10 	vmov	s0, r3
 80040de:	f007 f84c 	bl	800b17a <fmaxf>
 80040e2:	eef0 7a40 	vmov.f32	s15, s0
 80040e6:	4b09      	ldr	r3, [pc, #36]	@ (800410c <process_user_input+0x3a4>)
 80040e8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80040ec:	4b07      	ldr	r3, [pc, #28]	@ (800410c <process_user_input+0x3a4>)
 80040ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc fa49 	bl	8000588 <__aeabi_f2d>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4817      	ldr	r0, [pc, #92]	@ (8004158 <process_user_input+0x3f0>)
 80040fc:	f008 fecc 	bl	800ce98 <iprintf>
			 break;
 8004100:	e0ab      	b.n	800425a <process_user_input+0x4f2>
 8004102:	bf00      	nop
 8004104:	44fa0000 	.word	0x44fa0000
 8004108:	42c80000 	.word	0x42c80000
 800410c:	20000330 	.word	0x20000330
 8004110:	0800fd48 	.word	0x0800fd48
 8004114:	20000430 	.word	0x20000430
 8004118:	0800fd5c 	.word	0x0800fd5c
 800411c:	0800fd70 	.word	0x0800fd70
 8004120:	42960000 	.word	0x42960000
 8004124:	0800fd88 	.word	0x0800fd88
 8004128:	42040000 	.word	0x42040000
 800412c:	0800fd9c 	.word	0x0800fd9c
 8004130:	0800fdb4 	.word	0x0800fdb4
 8004134:	43160000 	.word	0x43160000
 8004138:	0800fdcc 	.word	0x0800fdcc
 800413c:	42200000 	.word	0x42200000
 8004140:	0800fde4 	.word	0x0800fde4
 8004144:	0800fdfc 	.word	0x0800fdfc
 8004148:	3a83126f 	.word	0x3a83126f
 800414c:	0800fe10 	.word	0x0800fe10
 8004150:	38d1b717 	.word	0x38d1b717
 8004154:	0800fe20 	.word	0x0800fe20
 8004158:	0800fe30 	.word	0x0800fe30
 800415c:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f007 fae3 	bl	800b730 <atof>
 800416a:	ec53 2b10 	vmov	r2, r3, d0
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc fd59 	bl	8000c28 <__aeabi_d2f>
 8004176:	4603      	mov	r3, r0
 8004178:	ed5f 0a08 	vldr	s1, [pc, #-32]	@ 800415c <process_user_input+0x3f4>
 800417c:	ee00 3a10 	vmov	s0, r3
 8004180:	f006 fffb 	bl	800b17a <fmaxf>
 8004184:	eef0 7a40 	vmov.f32	s15, s0
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <process_user_input+0x550>)
 800418a:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <process_user_input+0x550>)
 8004190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc f9f8 	bl	8000588 <__aeabi_f2d>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4847      	ldr	r0, [pc, #284]	@ (80042bc <process_user_input+0x554>)
 800419e:	f008 fe7b 	bl	800ce98 <iprintf>
			 break;
 80041a2:	e05a      	b.n	800425a <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4618      	mov	r0, r3
 80041aa:	f007 fac1 	bl	800b730 <atof>
 80041ae:	ec53 2b10 	vmov	r2, r3, d0
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	f7fc fd37 	bl	8000c28 <__aeabi_d2f>
 80041ba:	4603      	mov	r3, r0
 80041bc:	eddf 0a40 	vldr	s1, [pc, #256]	@ 80042c0 <process_user_input+0x558>
 80041c0:	ee00 3a10 	vmov	s0, r3
 80041c4:	f006 ffd9 	bl	800b17a <fmaxf>
 80041c8:	eef0 7a40 	vmov.f32	s15, s0
 80041cc:	4b3a      	ldr	r3, [pc, #232]	@ (80042b8 <process_user_input+0x550>)
 80041ce:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
			 P_MIN = -P_MAX;
 80041d2:	4b39      	ldr	r3, [pc, #228]	@ (80042b8 <process_user_input+0x550>)
 80041d4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80041d8:	eef1 7a67 	vneg.f32	s15, s15
 80041dc:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <process_user_input+0x550>)
 80041de:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 80041e2:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <process_user_input+0x550>)
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc f9ce 	bl	8000588 <__aeabi_f2d>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4834      	ldr	r0, [pc, #208]	@ (80042c4 <process_user_input+0x55c>)
 80041f2:	f008 fe51 	bl	800ce98 <iprintf>
			 break;
 80041f6:	e030      	b.n	800425a <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f007 fa97 	bl	800b730 <atof>
 8004202:	ec53 2b10 	vmov	r2, r3, d0
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f7fc fd0d 	bl	8000c28 <__aeabi_d2f>
 800420e:	4603      	mov	r3, r0
 8004210:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80042c0 <process_user_input+0x558>
 8004214:	ee00 3a10 	vmov	s0, r3
 8004218:	f006 ffaf 	bl	800b17a <fmaxf>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	4b25      	ldr	r3, [pc, #148]	@ (80042b8 <process_user_input+0x550>)
 8004222:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
			 V_MIN = -V_MAX;
 8004226:	4b24      	ldr	r3, [pc, #144]	@ (80042b8 <process_user_input+0x550>)
 8004228:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800422c:	eef1 7a67 	vneg.f32	s15, s15
 8004230:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <process_user_input+0x550>)
 8004232:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <process_user_input+0x550>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	4618      	mov	r0, r3
 800423c:	f7fc f9a4 	bl	8000588 <__aeabi_f2d>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4820      	ldr	r0, [pc, #128]	@ (80042c8 <process_user_input+0x560>)
 8004246:	f008 fe27 	bl	800ce98 <iprintf>
			 break;
 800424a:	e006      	b.n	800425a <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	481e      	ldr	r0, [pc, #120]	@ (80042cc <process_user_input+0x564>)
 8004254:	f008 fe20 	bl	800ce98 <iprintf>
			 break;
 8004258:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800425a:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <process_user_input+0x568>)
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	9200      	str	r2, [sp, #0]
 8004260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004262:	f000 ffc7 	bl	80051f4 <preference_writer_ready>
 8004266:	4603      	mov	r3, r0
 8004268:	f083 0301 	eor.w	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <process_user_input+0x510>
 8004272:	4817      	ldr	r0, [pc, #92]	@ (80042d0 <process_user_input+0x568>)
 8004274:	f000 ffaf 	bl	80051d6 <preference_writer_open>
	 preference_writer_flush(&prefs);
 8004278:	4815      	ldr	r0, [pc, #84]	@ (80042d0 <process_user_input+0x568>)
 800427a:	f000 ffc9 	bl	8005210 <preference_writer_flush>
	 preference_writer_close(&prefs);
 800427e:	4814      	ldr	r0, [pc, #80]	@ (80042d0 <process_user_input+0x568>)
 8004280:	f001 f844 	bl	800530c <preference_writer_close>
	 preference_writer_load(prefs);
 8004284:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <process_user_input+0x568>)
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800428c:	f000 fffc 	bl	8005288 <preference_writer_load>

	 enter_setup_state();
 8004290:	f7ff fbf6 	bl	8003a80 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	2208      	movs	r2, #8
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f008 ff3d 	bl	800d128 <memset>
 }
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000330 	.word	0x20000330
 80042bc:	0800fe44 	.word	0x0800fe44
 80042c0:	00000000 	.word	0x00000000
 80042c4:	0800fe58 	.word	0x0800fe58
 80042c8:	0800fe6c 	.word	0x0800fe6c
 80042cc:	0800fe80 	.word	0x0800fe80
 80042d0:	20000830 	.word	0x20000830

080042d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042da:	f107 0314 	add.w	r3, r7, #20
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	609a      	str	r2, [r3, #8]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	4b37      	ldr	r3, [pc, #220]	@ (80043cc <MX_GPIO_Init+0xf8>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4a36      	ldr	r2, [pc, #216]	@ (80043cc <MX_GPIO_Init+0xf8>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fa:	4b34      	ldr	r3, [pc, #208]	@ (80043cc <MX_GPIO_Init+0xf8>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4b30      	ldr	r3, [pc, #192]	@ (80043cc <MX_GPIO_Init+0xf8>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	4a2f      	ldr	r2, [pc, #188]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	6313      	str	r3, [r2, #48]	@ 0x30
 8004316:	4b2d      	ldr	r3, [pc, #180]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	4a28      	ldr	r2, [pc, #160]	@ (80043cc <MX_GPIO_Init+0xf8>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6313      	str	r3, [r2, #48]	@ 0x30
 8004332:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	4a21      	ldr	r2, [pc, #132]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	6313      	str	r3, [r2, #48]	@ 0x30
 800434e:	4b1f      	ldr	r3, [pc, #124]	@ (80043cc <MX_GPIO_Init+0xf8>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800435a:	2200      	movs	r2, #0
 800435c:	f648 0110 	movw	r1, #34832	@ 0x8810
 8004360:	481b      	ldr	r0, [pc, #108]	@ (80043d0 <MX_GPIO_Init+0xfc>)
 8004362:	f003 fd8d 	bl	8007e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004366:	2200      	movs	r2, #0
 8004368:	2120      	movs	r1, #32
 800436a:	481a      	ldr	r0, [pc, #104]	@ (80043d4 <MX_GPIO_Init+0x100>)
 800436c:	f003 fd88 	bl	8007e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004376:	4b18      	ldr	r3, [pc, #96]	@ (80043d8 <MX_GPIO_Init+0x104>)
 8004378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	4619      	mov	r1, r3
 8004384:	4813      	ldr	r0, [pc, #76]	@ (80043d4 <MX_GPIO_Init+0x100>)
 8004386:	f003 fbe7 	bl	8007b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800438a:	f648 0310 	movw	r3, #34832	@ 0x8810
 800438e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004390:	2301      	movs	r3, #1
 8004392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004398:	2303      	movs	r3, #3
 800439a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	4619      	mov	r1, r3
 80043a2:	480b      	ldr	r0, [pc, #44]	@ (80043d0 <MX_GPIO_Init+0xfc>)
 80043a4:	f003 fbd8 	bl	8007b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80043a8:	2320      	movs	r3, #32
 80043aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ac:	2301      	movs	r3, #1
 80043ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b4:	2303      	movs	r3, #3
 80043b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	4805      	ldr	r0, [pc, #20]	@ (80043d4 <MX_GPIO_Init+0x100>)
 80043c0:	f003 fbca 	bl	8007b58 <HAL_GPIO_Init>

}
 80043c4:	bf00      	nop
 80043c6:	3728      	adds	r7, #40	@ 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40020800 	.word	0x40020800
 80043d8:	10210000 	.word	0x10210000
 80043dc:	00000000 	.word	0x00000000

080043e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043e6:	f001 ff15 	bl	8006214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ea:	f000 fab7 	bl	800495c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043ee:	f7ff ff71 	bl	80042d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80043f2:	f001 fe47 	bl	8006084 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80043f6:	f001 fd2b 	bl	8005e50 <MX_TIM1_Init>
  MX_CAN1_Init();
 80043fa:	f7fd fba1 	bl	8001b40 <MX_CAN1_Init>
  MX_SPI1_Init();
 80043fe:	f000 ff95 	bl	800532c <MX_SPI1_Init>
  MX_SPI3_Init();
 8004402:	f000 ffcb 	bl	800539c <MX_SPI3_Init>
  MX_ADC1_Init();
 8004406:	f7fc fe2b 	bl	8001060 <MX_ADC1_Init>
  MX_ADC2_Init();
 800440a:	f7fc fe93 	bl	8001134 <MX_ADC2_Init>
  MX_ADC3_Init();
 800440e:	f7fc fedb 	bl	80011c8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004412:	2106      	movs	r1, #6
 8004414:	48ac      	ldr	r0, [pc, #688]	@ (80046c8 <main+0x2e8>)
 8004416:	f000 fecd 	bl	80051b4 <preference_writer_init>
  preference_writer_load(prefs);
 800441a:	4bab      	ldr	r3, [pc, #684]	@ (80046c8 <main+0x2e8>)
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	9200      	str	r2, [sp, #0]
 8004420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004422:	f000 ff31 	bl	8005288 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 8004426:	4ba9      	ldr	r3, [pc, #676]	@ (80046cc <main+0x2ec>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d102      	bne.n	8004436 <main+0x56>
 8004430:	4ba6      	ldr	r3, [pc, #664]	@ (80046cc <main+0x2ec>)
 8004432:	2200      	movs	r2, #0
 8004434:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8004436:	4ba5      	ldr	r3, [pc, #660]	@ (80046cc <main+0x2ec>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d102      	bne.n	8004446 <main+0x66>
 8004440:	4ba2      	ldr	r3, [pc, #648]	@ (80046cc <main+0x2ec>)
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004446:	4ba2      	ldr	r3, [pc, #648]	@ (80046d0 <main+0x2f0>)
 8004448:	edd3 7a02 	vldr	s15, [r3, #8]
 800444c:	eef4 7a67 	vcmp.f32	s15, s15
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	d609      	bvs.n	800446a <main+0x8a>
 8004456:	4b9e      	ldr	r3, [pc, #632]	@ (80046d0 <main+0x2f0>)
 8004458:	edd3 7a02 	vldr	s15, [r3, #8]
 800445c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004460:	eef4 7a47 	vcmp.f32	s15, s14
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	d102      	bne.n	8004470 <main+0x90>
 800446a:	4b99      	ldr	r3, [pc, #612]	@ (80046d0 <main+0x2f0>)
 800446c:	4a99      	ldr	r2, [pc, #612]	@ (80046d4 <main+0x2f4>)
 800446e:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004470:	4b97      	ldr	r3, [pc, #604]	@ (80046d0 <main+0x2f0>)
 8004472:	edd3 7a03 	vldr	s15, [r3, #12]
 8004476:	eef4 7a67 	vcmp.f32	s15, s15
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	d609      	bvs.n	8004494 <main+0xb4>
 8004480:	4b93      	ldr	r3, [pc, #588]	@ (80046d0 <main+0x2f0>)
 8004482:	edd3 7a03 	vldr	s15, [r3, #12]
 8004486:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800448a:	eef4 7a47 	vcmp.f32	s15, s14
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	d102      	bne.n	800449a <main+0xba>
 8004494:	4b8e      	ldr	r3, [pc, #568]	@ (80046d0 <main+0x2f0>)
 8004496:	4a90      	ldr	r2, [pc, #576]	@ (80046d8 <main+0x2f8>)
 8004498:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800449a:	4b8d      	ldr	r3, [pc, #564]	@ (80046d0 <main+0x2f0>)
 800449c:	edd3 7a06 	vldr	s15, [r3, #24]
 80044a0:	eef4 7a67 	vcmp.f32	s15, s15
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	d609      	bvs.n	80044be <main+0xde>
 80044aa:	4b89      	ldr	r3, [pc, #548]	@ (80046d0 <main+0x2f0>)
 80044ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80044b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80044b4:	eef4 7a47 	vcmp.f32	s15, s14
 80044b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044bc:	d103      	bne.n	80044c6 <main+0xe6>
 80044be:	4b84      	ldr	r3, [pc, #528]	@ (80046d0 <main+0x2f0>)
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80044c6:	4b81      	ldr	r3, [pc, #516]	@ (80046cc <main+0x2ec>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d102      	bne.n	80044d6 <main+0xf6>
 80044d0:	4b7e      	ldr	r3, [pc, #504]	@ (80046cc <main+0x2ec>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80044d6:	4b7d      	ldr	r3, [pc, #500]	@ (80046cc <main+0x2ec>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d102      	bne.n	80044e6 <main+0x106>
 80044e0:	4b7a      	ldr	r3, [pc, #488]	@ (80046cc <main+0x2ec>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80044e6:	4b79      	ldr	r3, [pc, #484]	@ (80046cc <main+0x2ec>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d103      	bne.n	80044f8 <main+0x118>
 80044f0:	4b76      	ldr	r3, [pc, #472]	@ (80046cc <main+0x2ec>)
 80044f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044f6:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80044f8:	4b75      	ldr	r3, [pc, #468]	@ (80046d0 <main+0x2f0>)
 80044fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80044fe:	eef4 7a67 	vcmp.f32	s15, s15
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	d609      	bvs.n	800451c <main+0x13c>
 8004508:	4b71      	ldr	r3, [pc, #452]	@ (80046d0 <main+0x2f0>)
 800450a:	edd3 7a07 	vldr	s15, [r3, #28]
 800450e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004512:	eef4 7a47 	vcmp.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d103      	bne.n	8004524 <main+0x144>
 800451c:	4b6c      	ldr	r3, [pc, #432]	@ (80046d0 <main+0x2f0>)
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004524:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <main+0x2f0>)
 8004526:	edd3 7a08 	vldr	s15, [r3, #32]
 800452a:	eef4 7a67 	vcmp.f32	s15, s15
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	d609      	bvs.n	8004548 <main+0x168>
 8004534:	4b66      	ldr	r3, [pc, #408]	@ (80046d0 <main+0x2f0>)
 8004536:	edd3 7a08 	vldr	s15, [r3, #32]
 800453a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800453e:	eef4 7a47 	vcmp.f32	s15, s14
 8004542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004546:	d102      	bne.n	800454e <main+0x16e>
 8004548:	4b61      	ldr	r3, [pc, #388]	@ (80046d0 <main+0x2f0>)
 800454a:	4a64      	ldr	r2, [pc, #400]	@ (80046dc <main+0x2fc>)
 800454c:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 800454e:	4b60      	ldr	r3, [pc, #384]	@ (80046d0 <main+0x2f0>)
 8004550:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004554:	eef4 7a67 	vcmp.f32	s15, s15
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	d609      	bvs.n	8004572 <main+0x192>
 800455e:	4b5c      	ldr	r3, [pc, #368]	@ (80046d0 <main+0x2f0>)
 8004560:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004564:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004568:	eef4 7a47 	vcmp.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d102      	bne.n	8004578 <main+0x198>
 8004572:	4b57      	ldr	r3, [pc, #348]	@ (80046d0 <main+0x2f0>)
 8004574:	4a5a      	ldr	r2, [pc, #360]	@ (80046e0 <main+0x300>)
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004578:	4b55      	ldr	r3, [pc, #340]	@ (80046d0 <main+0x2f0>)
 800457a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800457e:	eef4 7a67 	vcmp.f32	s15, s15
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	d609      	bvs.n	800459c <main+0x1bc>
 8004588:	4b51      	ldr	r3, [pc, #324]	@ (80046d0 <main+0x2f0>)
 800458a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800458e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004592:	eef4 7a47 	vcmp.f32	s15, s14
 8004596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459a:	d102      	bne.n	80045a2 <main+0x1c2>
 800459c:	4b4c      	ldr	r3, [pc, #304]	@ (80046d0 <main+0x2f0>)
 800459e:	4a51      	ldr	r2, [pc, #324]	@ (80046e4 <main+0x304>)
 80045a0:	649a      	str	r2, [r3, #72]	@ 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80045a2:	4b4b      	ldr	r3, [pc, #300]	@ (80046d0 <main+0x2f0>)
 80045a4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80045a8:	eef4 7a67 	vcmp.f32	s15, s15
 80045ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b0:	d609      	bvs.n	80045c6 <main+0x1e6>
 80045b2:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <main+0x2f0>)
 80045b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80045b8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80045bc:	eef4 7a47 	vcmp.f32	s15, s14
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	d102      	bne.n	80045cc <main+0x1ec>
 80045c6:	4b42      	ldr	r3, [pc, #264]	@ (80046d0 <main+0x2f0>)
 80045c8:	4a47      	ldr	r2, [pc, #284]	@ (80046e8 <main+0x308>)
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if(isnan(GR) || GR==-1){GR = 6.0f;}
 80045cc:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <main+0x2f0>)
 80045ce:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80045d2:	eef4 7a67 	vcmp.f32	s15, s15
 80045d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045da:	d609      	bvs.n	80045f0 <main+0x210>
 80045dc:	4b3c      	ldr	r3, [pc, #240]	@ (80046d0 <main+0x2f0>)
 80045de:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80045e2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80045e6:	eef4 7a47 	vcmp.f32	s15, s14
 80045ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ee:	d102      	bne.n	80045f6 <main+0x216>
 80045f0:	4b37      	ldr	r3, [pc, #220]	@ (80046d0 <main+0x2f0>)
 80045f2:	4a3e      	ldr	r2, [pc, #248]	@ (80046ec <main+0x30c>)
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
  if(isnan(KT) || KT==-1){KT = 0.08f;}
 80045f6:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <main+0x2f0>)
 80045f8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80045fc:	eef4 7a67 	vcmp.f32	s15, s15
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	d609      	bvs.n	800461a <main+0x23a>
 8004606:	4b32      	ldr	r3, [pc, #200]	@ (80046d0 <main+0x2f0>)
 8004608:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800460c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004610:	eef4 7a47 	vcmp.f32	s15, s14
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	d102      	bne.n	8004620 <main+0x240>
 800461a:	4b2d      	ldr	r3, [pc, #180]	@ (80046d0 <main+0x2f0>)
 800461c:	4a34      	ldr	r2, [pc, #208]	@ (80046f0 <main+0x310>)
 800461e:	639a      	str	r2, [r3, #56]	@ 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <main+0x2f0>)
 8004622:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004626:	eef4 7a67 	vcmp.f32	s15, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d609      	bvs.n	8004644 <main+0x264>
 8004630:	4b27      	ldr	r3, [pc, #156]	@ (80046d0 <main+0x2f0>)
 8004632:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004636:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800463a:	eef4 7a47 	vcmp.f32	s15, s14
 800463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004642:	d102      	bne.n	800464a <main+0x26a>
 8004644:	4b22      	ldr	r3, [pc, #136]	@ (80046d0 <main+0x2f0>)
 8004646:	4a2b      	ldr	r2, [pc, #172]	@ (80046f4 <main+0x314>)
 8004648:	65da      	str	r2, [r3, #92]	@ 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 800464a:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <main+0x2f0>)
 800464c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004650:	eef4 7a67 	vcmp.f32	s15, s15
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	d609      	bvs.n	800466e <main+0x28e>
 800465a:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <main+0x2f0>)
 800465c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004660:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004664:	eef4 7a47 	vcmp.f32	s15, s14
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	d102      	bne.n	8004674 <main+0x294>
 800466e:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <main+0x2f0>)
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <main+0x304>)
 8004672:	661a      	str	r2, [r3, #96]	@ 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <main+0x2f0>)
 8004676:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800467a:	eef4 7a67 	vcmp.f32	s15, s15
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	d702      	bvc.n	800468a <main+0x2aa>
 8004684:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <main+0x2f0>)
 8004686:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <main+0x318>)
 8004688:	651a      	str	r2, [r3, #80]	@ 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 800468a:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <main+0x2f0>)
 800468c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004690:	eef4 7a67 	vcmp.f32	s15, s15
 8004694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004698:	d702      	bvc.n	80046a0 <main+0x2c0>
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <main+0x2f0>)
 800469c:	4a17      	ldr	r2, [pc, #92]	@ (80046fc <main+0x31c>)
 800469e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <main+0x2f0>)
 80046a2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80046a6:	eef4 7a67 	vcmp.f32	s15, s15
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	d702      	bvc.n	80046b6 <main+0x2d6>
 80046b0:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <main+0x2f0>)
 80046b2:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <main+0x320>)
 80046b4:	659a      	str	r2, [r3, #88]	@ 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <main+0x2f0>)
 80046b8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80046bc:	eef4 7a67 	vcmp.f32	s15, s15
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	e01e      	b.n	8004704 <main+0x324>
 80046c6:	bf00      	nop
 80046c8:	20000830 	.word	0x20000830
 80046cc:	20000430 	.word	0x20000430
 80046d0:	20000330 	.word	0x20000330
 80046d4:	447a0000 	.word	0x447a0000
 80046d8:	42200000 	.word	0x42200000
 80046dc:	42fa0000 	.word	0x42fa0000
 80046e0:	41600000 	.word	0x41600000
 80046e4:	40a00000 	.word	0x40a00000
 80046e8:	41a80000 	.word	0x41a80000
 80046ec:	40c00000 	.word	0x40c00000
 80046f0:	3da3d70a 	.word	0x3da3d70a
 80046f4:	43fa0000 	.word	0x43fa0000
 80046f8:	41480000 	.word	0x41480000
 80046fc:	c1480000 	.word	0xc1480000
 8004700:	42820000 	.word	0x42820000
 8004704:	d702      	bvc.n	800470c <main+0x32c>
 8004706:	4b80      	ldr	r3, [pc, #512]	@ (8004908 <main+0x528>)
 8004708:	4a80      	ldr	r2, [pc, #512]	@ (800490c <main+0x52c>)
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800470c:	a37c      	add	r3, pc, #496	@ (adr r3, 8004900 <main+0x520>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	487f      	ldr	r0, [pc, #508]	@ (8004910 <main+0x530>)
 8004714:	f008 fbc0 	bl	800ce98 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8004718:	487e      	ldr	r0, [pc, #504]	@ (8004914 <main+0x534>)
 800471a:	f7fe fa6b 	bl	8002bf4 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800471e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8004722:	2100      	movs	r1, #0
 8004724:	487c      	ldr	r0, [pc, #496]	@ (8004918 <main+0x538>)
 8004726:	f008 fcff 	bl	800d128 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 800472a:	4b7c      	ldr	r3, [pc, #496]	@ (800491c <main+0x53c>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	4a7c      	ldr	r2, [pc, #496]	@ (8004920 <main+0x540>)
 8004730:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  comm_encoder.e_zero = E_ZERO;
 8004734:	4b79      	ldr	r3, [pc, #484]	@ (800491c <main+0x53c>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	4a79      	ldr	r2, [pc, #484]	@ (8004920 <main+0x540>)
 800473a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  comm_encoder.ppairs = PPAIRS;
 800473e:	4b72      	ldr	r3, [pc, #456]	@ (8004908 <main+0x528>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	4a77      	ldr	r2, [pc, #476]	@ (8004920 <main+0x540>)
 8004744:	6693      	str	r3, [r2, #104]	@ 0x68

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004746:	4b76      	ldr	r3, [pc, #472]	@ (8004920 <main+0x540>)
 8004748:	4a74      	ldr	r2, [pc, #464]	@ (800491c <main+0x53c>)
 800474a:	33dc      	adds	r3, #220	@ 0xdc
 800474c:	f102 0118 	add.w	r1, r2, #24
 8004750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004754:	4618      	mov	r0, r3
 8004756:	f008 fd78 	bl	800d24a <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 800475a:	2164      	movs	r1, #100	@ 0x64
 800475c:	4870      	ldr	r0, [pc, #448]	@ (8004920 <main+0x540>)
 800475e:	f000 fb17 	bl	8004d90 <ps_warmup>

  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004762:	4870      	ldr	r0, [pc, #448]	@ (8004924 <main+0x544>)
 8004764:	f001 fe30 	bl	80063c8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004768:	486f      	ldr	r0, [pc, #444]	@ (8004928 <main+0x548>)
 800476a:	f001 fe2d 	bl	80063c8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800476e:	486f      	ldr	r0, [pc, #444]	@ (800492c <main+0x54c>)
 8004770:	f001 fe2a 	bl	80063c8 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004774:	2201      	movs	r2, #1
 8004776:	2110      	movs	r1, #16
 8004778:	486d      	ldr	r0, [pc, #436]	@ (8004930 <main+0x550>)
 800477a:	f003 fb81 	bl	8007e80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800477e:	2201      	movs	r2, #1
 8004780:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004784:	486a      	ldr	r0, [pc, #424]	@ (8004930 <main+0x550>)
 8004786:	f003 fb7b 	bl	8007e80 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800478a:	2001      	movs	r0, #1
 800478c:	f001 fdb4 	bl	80062f8 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004790:	2001      	movs	r0, #1
 8004792:	f001 fdb1 	bl	80062f8 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004796:	4967      	ldr	r1, [pc, #412]	@ (8004934 <main+0x554>)
 8004798:	2301      	movs	r3, #1
 800479a:	9306      	str	r3, [sp, #24]
 800479c:	2300      	movs	r3, #0
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	2300      	movs	r3, #0
 80047a6:	9303      	str	r3, [sp, #12]
 80047a8:	2300      	movs	r3, #0
 80047aa:	9302      	str	r3, [sp, #8]
 80047ac:	2301      	movs	r3, #1
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2300      	movs	r3, #0
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	2200      	movs	r2, #0
 80047b8:	c903      	ldmia	r1, {r0, r1}
 80047ba:	f7fd fc60 	bl	800207e <drv_write_DCR>
  HAL_Delay(1);
 80047be:	2001      	movs	r0, #1
 80047c0:	f001 fd9a 	bl	80062f8 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 80047c4:	4b50      	ldr	r3, [pc, #320]	@ (8004908 <main+0x528>)
 80047c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80047ca:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8004938 <main+0x558>
 80047ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d802      	bhi.n	80047de <main+0x3fe>
 80047d8:	2303      	movs	r3, #3
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	e001      	b.n	80047e2 <main+0x402>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 80047de:	2302      	movs	r3, #2
 80047e0:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 80047e2:	4954      	ldr	r1, [pc, #336]	@ (8004934 <main+0x554>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	9306      	str	r3, [sp, #24]
 80047e8:	2301      	movs	r3, #1
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	2301      	movs	r3, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	2301      	movs	r3, #1
 80047f2:	9303      	str	r3, [sp, #12]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	2303      	movs	r3, #3
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	2300      	movs	r3, #0
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2301      	movs	r3, #1
 8004802:	2200      	movs	r2, #0
 8004804:	c903      	ldmia	r1, {r0, r1}
 8004806:	f7fd fcb6 	bl	8002176 <drv_write_CSACR>
  HAL_Delay(1);
 800480a:	2001      	movs	r0, #1
 800480c:	f001 fd74 	bl	80062f8 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 8004810:	4948      	ldr	r1, [pc, #288]	@ (8004934 <main+0x554>)
 8004812:	2300      	movs	r3, #0
 8004814:	9306      	str	r3, [sp, #24]
 8004816:	2300      	movs	r3, #0
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	2300      	movs	r3, #0
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	2300      	movs	r3, #0
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	2301      	movs	r3, #1
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2301      	movs	r3, #1
 8004830:	2200      	movs	r2, #0
 8004832:	c903      	ldmia	r1, {r0, r1}
 8004834:	f7fd fc9f 	bl	8002176 <drv_write_CSACR>
  HAL_Delay(1);
 8004838:	2001      	movs	r0, #1
 800483a:	f001 fd5d 	bl	80062f8 <HAL_Delay>
  zero_current(&controller);
 800483e:	4835      	ldr	r0, [pc, #212]	@ (8004914 <main+0x534>)
 8004840:	f7fe f994 	bl	8002b6c <zero_current>
  HAL_Delay(1);
 8004844:	2001      	movs	r0, #1
 8004846:	f001 fd57 	bl	80062f8 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_8US, VDS_LVL_0_45);
 800484a:	493a      	ldr	r1, [pc, #232]	@ (8004934 <main+0x554>)
 800484c:	2305      	movs	r3, #5
 800484e:	9302      	str	r3, [sp, #8]
 8004850:	2303      	movs	r3, #3
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	2301      	movs	r3, #1
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2300      	movs	r3, #0
 800485a:	2201      	movs	r2, #1
 800485c:	c903      	ldmia	r1, {r0, r1}
 800485e:	f7fd fc58 	bl	8002112 <drv_write_OCPCR>
  HAL_Delay(1);
 8004862:	2001      	movs	r0, #1
 8004864:	f001 fd48 	bl	80062f8 <HAL_Delay>
  drv_disable_gd(drv);
 8004868:	4b32      	ldr	r3, [pc, #200]	@ (8004934 <main+0x554>)
 800486a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800486e:	f7fd fce6 	bl	800223e <drv_disable_gd>
  HAL_Delay(1);
 8004872:	2001      	movs	r0, #1
 8004874:	f001 fd40 	bl	80062f8 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8004878:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <main+0x534>)
 800487a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800487e:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <main+0x534>)
 8004880:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
 8004884:	4619      	mov	r1, r3
 8004886:	482d      	ldr	r0, [pc, #180]	@ (800493c <main+0x55c>)
 8004888:	f008 fb06 	bl	800ce98 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800488c:	2100      	movs	r1, #0
 800488e:	482c      	ldr	r0, [pc, #176]	@ (8004940 <main+0x560>)
 8004890:	f004 fd58 	bl	8009344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004894:	2104      	movs	r1, #4
 8004896:	482a      	ldr	r0, [pc, #168]	@ (8004940 <main+0x560>)
 8004898:	f004 fd54 	bl	8009344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800489c:	2108      	movs	r1, #8
 800489e:	4828      	ldr	r0, [pc, #160]	@ (8004940 <main+0x560>)
 80048a0:	f004 fd50 	bl	8009344 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 80048a4:	4827      	ldr	r0, [pc, #156]	@ (8004944 <main+0x564>)
 80048a6:	f7fd f9d1 	bl	8001c4c <can_rx_init>
  can_tx_init(&can_tx);
 80048aa:	4827      	ldr	r0, [pc, #156]	@ (8004948 <main+0x568>)
 80048ac:	f7fd f9fc 	bl	8001ca8 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 80048b0:	4826      	ldr	r0, [pc, #152]	@ (800494c <main+0x56c>)
 80048b2:	f002 fb43 	bl	8006f3c <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	2019      	movs	r0, #25
 80048bc:	f003 f883 	bl	80079c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 80048c0:	2201      	movs	r2, #1
 80048c2:	2101      	movs	r1, #1
 80048c4:	2014      	movs	r0, #20
 80048c6:	f003 f87e 	bl	80079c6 <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 80048ca:	4b21      	ldr	r3, [pc, #132]	@ (8004950 <main+0x570>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 80048d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004950 <main+0x570>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 80048d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004950 <main+0x570>)
 80048d8:	2201      	movs	r2, #1
 80048da:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80048dc:	2201      	movs	r2, #1
 80048de:	491d      	ldr	r1, [pc, #116]	@ (8004954 <main+0x574>)
 80048e0:	481d      	ldr	r0, [pc, #116]	@ (8004958 <main+0x578>)
 80048e2:	f005 fd84 	bl	800a3ee <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80048e6:	4816      	ldr	r0, [pc, #88]	@ (8004940 <main+0x560>)
 80048e8:	f004 fc62 	bl	80091b0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 80048ec:	2064      	movs	r0, #100	@ 0x64
 80048ee:	f001 fd03 	bl	80062f8 <HAL_Delay>
	  drv_print_faults(drv);
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <main+0x554>)
 80048f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048f8:	f7fd fcbc 	bl	8002274 <drv_print_faults>
	  HAL_Delay(100);
 80048fc:	bf00      	nop
 80048fe:	e7f5      	b.n	80048ec <main+0x50c>
 8004900:	e0000000 	.word	0xe0000000
 8004904:	4000147a 	.word	0x4000147a
 8004908:	20000330 	.word	0x20000330
 800490c:	c2820000 	.word	0xc2820000
 8004910:	0800fea8 	.word	0x0800fea8
 8004914:	20000844 	.word	0x20000844
 8004918:	20009070 	.word	0x20009070
 800491c:	20000430 	.word	0x20000430
 8004920:	20000b5c 	.word	0x20000b5c
 8004924:	20000230 	.word	0x20000230
 8004928:	20000278 	.word	0x20000278
 800492c:	200002c0 	.word	0x200002c0
 8004930:	40020000 	.word	0x40020000
 8004934:	20000e3c 	.word	0x20000e3c
 8004938:	42200000 	.word	0x42200000
 800493c:	0800fecc 	.word	0x0800fecc
 8004940:	20009478 	.word	0x20009478
 8004944:	20009370 	.word	0x20009370
 8004948:	20009350 	.word	0x20009350
 800494c:	20000308 	.word	0x20000308
 8004950:	20000b4c 	.word	0x20000b4c
 8004954:	200093c0 	.word	0x200093c0
 8004958:	200094c0 	.word	0x200094c0

0800495c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b094      	sub	sp, #80	@ 0x50
 8004960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004962:	f107 031c 	add.w	r3, r7, #28
 8004966:	2234      	movs	r2, #52	@ 0x34
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f008 fbdc 	bl	800d128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004970:	f107 0308 	add.w	r3, r7, #8
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	2300      	movs	r3, #0
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	4b2c      	ldr	r3, [pc, #176]	@ (8004a38 <SystemClock_Config+0xdc>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	4a2b      	ldr	r2, [pc, #172]	@ (8004a38 <SystemClock_Config+0xdc>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004990:	4b29      	ldr	r3, [pc, #164]	@ (8004a38 <SystemClock_Config+0xdc>)
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800499c:	2300      	movs	r3, #0
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <SystemClock_Config+0xe0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a25      	ldr	r2, [pc, #148]	@ (8004a3c <SystemClock_Config+0xe0>)
 80049a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b23      	ldr	r3, [pc, #140]	@ (8004a3c <SystemClock_Config+0xe0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049c2:	2302      	movs	r3, #2
 80049c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80049ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80049cc:	2304      	movs	r3, #4
 80049ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80049d0:	23b4      	movs	r3, #180	@ 0xb4
 80049d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049d4:	2302      	movs	r3, #2
 80049d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80049d8:	2302      	movs	r3, #2
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80049dc:	2302      	movs	r3, #2
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049e0:	f107 031c 	add.w	r3, r7, #28
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 fdff 	bl	80085e8 <HAL_RCC_OscConfig>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80049f0:	f000 f826 	bl	8004a40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80049f4:	f003 fa5e 	bl	8007eb4 <HAL_PWREx_EnableOverDrive>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80049fe:	f000 f81f 	bl	8004a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a02:	230f      	movs	r3, #15
 8004a04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a06:	2302      	movs	r3, #2
 8004a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	2105      	movs	r1, #5
 8004a20:	4618      	mov	r0, r3
 8004a22:	f003 fa97 	bl	8007f54 <HAL_RCC_ClockConfig>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004a2c:	f000 f808 	bl	8004a40 <Error_Handler>
  }
}
 8004a30:	bf00      	nop
 8004a32:	3750      	adds	r7, #80	@ 0x50
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40007000 	.word	0x40007000

08004a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a58:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004a5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a60:	edd7 7a00 	vldr	s15, [r7]
 8004a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	dd01      	ble.n	8004a72 <fast_fmaxf+0x24>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e000      	b.n	8004a74 <fast_fmaxf+0x26>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	ee07 3a90 	vmov	s15, r3
    }
 8004a78:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <fast_fminf>:

float fast_fminf(float x, float y){
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a90:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004a94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a98:	edd7 7a00 	vldr	s15, [r7]
 8004a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	d501      	bpl.n	8004aaa <fast_fminf+0x24>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	e000      	b.n	8004aac <fast_fminf+0x26>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	ee07 3a90 	vmov	s15, r3
    }
 8004ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ac8:	edc7 0a02 	vstr	s1, [r7, #8]
 8004acc:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004ad0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ad4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae0:	dd0c      	ble.n	8004afc <fmaxf3+0x3e>
 8004ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af2:	dd01      	ble.n	8004af8 <fmaxf3+0x3a>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	e00d      	b.n	8004b14 <fmaxf3+0x56>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	e00b      	b.n	8004b14 <fmaxf3+0x56>
 8004afc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0c:	dd01      	ble.n	8004b12 <fmaxf3+0x54>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	e000      	b.n	8004b14 <fmaxf3+0x56>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	ee07 3a90 	vmov	s15, r3
    }
 8004b18:	eeb0 0a67 	vmov.f32	s0, s15
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <fminf3>:

float fminf3(float x, float y, float z){
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b30:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b34:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004b38:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d50c      	bpl.n	8004b64 <fminf3+0x3e>
 8004b4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	d501      	bpl.n	8004b60 <fminf3+0x3a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	e00d      	b.n	8004b7c <fminf3+0x56>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	e00b      	b.n	8004b7c <fminf3+0x56>
 8004b64:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	d501      	bpl.n	8004b7a <fminf3+0x54>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	e000      	b.n	8004b7c <fminf3+0x56>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	ee07 3a90 	vmov	s15, r3
    }
 8004b80:	eeb0 0a67 	vmov.f32	s0, s15
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	ed93 7a00 	vldr	s14, [r3]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	edd3 7a00 	vldr	s15, [r3]
 8004ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	edd3 6a00 	vldr	s13, [r3]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	edd3 7a00 	vldr	s15, [r3]
 8004bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc4:	f006 fab0 	bl	800b128 <sqrtf>
 8004bc8:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004bcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	dc00      	bgt.n	8004be0 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004bde:	e01b      	b.n	8004c18 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	ed93 7a00 	vldr	s14, [r3]
 8004be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004bee:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	ed93 7a00 	vldr	s14, [r3]
 8004c02:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	edc3 7a00 	vstr	s15, [r3]
    }
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c2e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004c32:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004c34:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c38:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c40:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004c48:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c54:	2201      	movs	r2, #1
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c66:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c76:	ee17 3a90 	vmov	r3, s15
    }
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c92:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004c98:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca4:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <sin_lut>:

float sin_lut(float theta){
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004cf6:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8004d54 <sin_lut+0x68>
 8004cfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8004cfe:	f006 f9f3 	bl	800b0e8 <fmodf>
 8004d02:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	d506      	bpl.n	8004d22 <sin_lut+0x36>
 8004d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d18:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004d54 <sin_lut+0x68>
 8004d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d20:	e001      	b.n	8004d26 <sin_lut+0x3a>
 8004d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d26:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d2e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004d58 <sin_lut+0x6c>
 8004d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d3a:	ee17 3a90 	vmov	r3, s15
 8004d3e:	4a07      	ldr	r2, [pc, #28]	@ (8004d5c <sin_lut+0x70>)
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	ee07 3a90 	vmov	s15, r3
}
 8004d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40c90fdb 	.word	0x40c90fdb
 8004d58:	42a2f983 	.word	0x42a2f983
 8004d5c:	0800ff60 	.word	0x0800ff60

08004d60 <cos_lut>:

float cos_lut(float theta){
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004d6a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004d8c <cos_lut+0x2c>
 8004d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d76:	eeb0 0a67 	vmov.f32	s0, s15
 8004d7a:	f7ff ffb7 	bl	8004cec <sin_lut>
 8004d7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8004d82:	eeb0 0a67 	vmov.f32	s0, s15
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	3fc90fdb 	.word	0x3fc90fdb

08004d90 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e021      	b.n	8004de4 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dac:	4812      	ldr	r0, [pc, #72]	@ (8004df8 <ps_warmup+0x68>)
 8004dae:	f003 f867 	bl	8007e80 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	2364      	movs	r3, #100	@ 0x64
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	480f      	ldr	r0, [pc, #60]	@ (8004dfc <ps_warmup+0x6c>)
 8004dc0:	f003 ff39 	bl	8008c36 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004dc4:	bf00      	nop
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <ps_warmup+0x6c>)
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d0f9      	beq.n	8004dc6 <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dd8:	4807      	ldr	r0, [pc, #28]	@ (8004df8 <ps_warmup+0x68>)
 8004dda:	f003 f851 	bl	8007e80 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	dbd9      	blt.n	8004da0 <ps_warmup+0x10>
	}
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40020000 	.word	0x40020000
 8004dfc:	2000941c 	.word	0x2000941c

08004e00 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	@ 0x30
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004e14:	2313      	movs	r3, #19
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e18:	e011      	b.n	8004e3e <ps_sample+0x3e>
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	3302      	adds	r3, #2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	3304      	adds	r3, #4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	3302      	adds	r3, #2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	3304      	adds	r3, #4
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	dcea      	bgt.n	8004e1a <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e50:	48ac      	ldr	r0, [pc, #688]	@ (8005104 <ps_sample+0x304>)
 8004e52:	f003 f815 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1c9a      	adds	r2, r3, #2
 8004e5c:	2364      	movs	r3, #100	@ 0x64
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2301      	movs	r3, #1
 8004e62:	48a9      	ldr	r0, [pc, #676]	@ (8005108 <ps_sample+0x308>)
 8004e64:	f003 fee7 	bl	8008c36 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004e68:	bf00      	nop
 8004e6a:	4ba7      	ldr	r3, [pc, #668]	@ (8005108 <ps_sample+0x308>)
 8004e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d0f9      	beq.n	8004e6a <ps_sample+0x6a>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004e76:	2201      	movs	r2, #1
 8004e78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e7c:	48a1      	ldr	r0, [pc, #644]	@ (8005104 <ps_sample+0x304>)
 8004e7e:	f002 ffff 	bl	8007e80 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	885b      	ldrh	r3, [r3, #2]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	675a      	str	r2, [r3, #116]	@ 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e90:	125b      	asrs	r3, r3, #9
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	3336      	adds	r3, #54	@ 0x36
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	125b      	asrs	r3, r3, #9
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	425a      	negs	r2, r3
 8004ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eb0:	bf58      	it	pl
 8004eb2:	4253      	negpl	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	3336      	adds	r3, #54	@ 0x36
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	125b      	asrs	r3, r3, #9
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	679a      	str	r2, [r3, #120]	@ 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004eea:	4b88      	ldr	r3, [pc, #544]	@ (800510c <ps_sample+0x30c>)
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ef8:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8005110 <ps_sample+0x310>
 8004efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f10:	ee17 3a90 	vmov	r3, s15
 8004f14:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f2a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8005114 <ps_sample+0x314>
 8004f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	d507      	bpl.n	8004f58 <ps_sample+0x158>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f4e:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8005114 <ps_sample+0x314>
 8004f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f56:	e002      	b.n	8004f5e <ps_sample+0x15e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004f6e:	4b67      	ldr	r3, [pc, #412]	@ (800510c <ps_sample+0x30c>)
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	ee07 3a90 	vmov	s15, r3
 8004f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f80:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005110 <ps_sample+0x310>
 8004f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	int_angle = (int)encoder->elec_angle;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f98:	ee17 3a90 	vmov	r3, s15
 8004f9c:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb2:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005114 <ps_sample+0x314>
 8004fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d507      	bpl.n	8004fe0 <ps_sample+0x1e0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004fd6:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005114 <ps_sample+0x314>
 8004fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fde:	e002      	b.n	8004fe6 <ps_sample+0x1e6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	/* Rollover */
	int rollover = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005000:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005004:	edd7 7a03 	vldr	s15, [r7, #12]
 8005008:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8005118 <ps_sample+0x318>
 800500c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	dd03      	ble.n	800501e <ps_sample+0x21e>
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	e00a      	b.n	8005034 <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 800501e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005022:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800511c <ps_sample+0x31c>
 8005026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502e:	d501      	bpl.n	8005034 <ps_sample+0x234>
 8005030:	2301      	movs	r3, #1
 8005032:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	if(!encoder->first_sample){
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 800504a:	2b00      	cmp	r3, #0
 800504c:	d125      	bne.n	800509a <ps_sample+0x29a>
		encoder->turns = 0;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		if(encoder->angle_singleturn > PI_OVER_2_F){encoder->turns = -1;}
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	edd3 7a01 	vldr	s15, [r3, #4]
 800505c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005120 <ps_sample+0x320>
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	dd05      	ble.n	8005076 <ps_sample+0x276>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005074:	e00d      	b.n	8005092 <ps_sample+0x292>
		else if(encoder->angle_singleturn < -PI_OVER_2_F){encoder->turns = 1;}
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	edd3 7a01 	vldr	s15, [r3, #4]
 800507c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005124 <ps_sample+0x324>
 8005080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	d503      	bpl.n	8005092 <ps_sample+0x292>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		encoder->first_sample = 1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	ed93 7a01 	vldr	s14, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ae:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005114 <ps_sample+0x314>
 80050b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80050cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80050d0:	edd7 7a00 	vldr	s15, [r7]
 80050d4:	eeb3 7a03 	vmov.f32	s14, #51	@ 0x41980000  19.0
 80050d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

}
 80050fc:	bf00      	nop
 80050fe:	3728      	adds	r7, #40	@ 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40020000 	.word	0x40020000
 8005108:	2000941c 	.word	0x2000941c
 800510c:	20000430 	.word	0x20000430
 8005110:	47800000 	.word	0x47800000
 8005114:	40c90fdb 	.word	0x40c90fdb
 8005118:	40490fdb 	.word	0x40490fdb
 800511c:	c0490fdb 	.word	0xc0490fdb
 8005120:	3fc90fdb 	.word	0x3fc90fdb
 8005124:	bfc90fdb 	.word	0xbfc90fdb

08005128 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005136:	4619      	mov	r1, r3
 8005138:	4818      	ldr	r0, [pc, #96]	@ (800519c <ps_print+0x74>)
 800513a:	f007 fead 	bl	800ce98 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005142:	4619      	mov	r1, r3
 8005144:	4816      	ldr	r0, [pc, #88]	@ (80051a0 <ps_print+0x78>)
 8005146:	f007 fea7 	bl	800ce98 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb fa1a 	bl	8000588 <__aeabi_f2d>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4812      	ldr	r0, [pc, #72]	@ (80051a4 <ps_print+0x7c>)
 800515a:	f007 fe9d 	bl	800ce98 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb fa10 	bl	8000588 <__aeabi_f2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	480e      	ldr	r0, [pc, #56]	@ (80051a8 <ps_print+0x80>)
 800516e:	f007 fe93 	bl	800ce98 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005176:	4618      	mov	r0, r3
 8005178:	f7fb fa06 	bl	8000588 <__aeabi_f2d>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	480a      	ldr	r0, [pc, #40]	@ (80051ac <ps_print+0x84>)
 8005182:	f007 fe89 	bl	800ce98 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518c:	4619      	mov	r1, r3
 800518e:	4808      	ldr	r0, [pc, #32]	@ (80051b0 <ps_print+0x88>)
 8005190:	f007 fe82 	bl	800ce98 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	0800fef4 	.word	0x0800fef4
 80051a0:	0800fefc 	.word	0x0800fefc
 80051a4:	0800ff14 	.word	0x0800ff14
 80051a8:	0800ff28 	.word	0x0800ff28
 80051ac:	0800ff3c 	.word	0x0800ff3c
 80051b0:	0800ff50 	.word	0x0800ff50

080051b4 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd f94a 	bl	800245c <flash_writer_init>
	pr->sector = sector;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	60da      	str	r2, [r3, #12]
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd f959 	bl	8002498 <flash_writer_open>
    pr->ready = true;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	741a      	strb	r2, [r3, #16]
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 80051f4:	b084      	sub	sp, #16
 80051f6:	b490      	push	{r4, r7}
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	f107 0408 	add.w	r4, r7, #8
 80051fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005202:	7e3b      	ldrb	r3, [r7, #24]
}
 8005204:	4618      	mov	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	bc90      	pop	{r4, r7}
 800520a:	b004      	add	sp, #16
 800520c:	4770      	bx	lr
	...

08005210 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af02      	add	r7, sp, #8
 8005216:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e00d      	b.n	800523a <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <preference_writer_flush+0x70>)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	460b      	mov	r3, r1
 800522e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005230:	f7fd f94e 	bl	80024d0 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2bff      	cmp	r3, #255	@ 0xff
 800523e:	ddee      	ble.n	800521e <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005240:	e012      	b.n	8005268 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800524a:	4a0e      	ldr	r2, [pc, #56]	@ (8005284 <preference_writer_flush+0x74>)
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	edd3 7a00 	vldr	s15, [r3]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	eeb0 0a67 	vmov.f32	s0, s15
 800525a:	460b      	mov	r3, r1
 800525c:	ca07      	ldmia	r2, {r0, r1, r2}
 800525e:	f7fd f94d 	bl	80024fc <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800526e:	dbe8      	blt.n	8005242 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	741a      	strb	r2, [r3, #16]
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000430 	.word	0x20000430
 8005284:	20000330 	.word	0x20000330

08005288 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005288:	b084      	sub	sp, #16
 800528a:	b590      	push	{r4, r7, lr}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	f107 0418 	add.w	r4, r7, #24
 8005294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005298:	2300      	movs	r3, #0
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	e00d      	b.n	80052ba <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f107 0218 	add.w	r2, r7, #24
 80052a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80052a6:	f7fd f94f 	bl	8002548 <flash_read_int>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4915      	ldr	r1, [pc, #84]	@ (8005304 <preference_writer_load+0x7c>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3301      	adds	r3, #1
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2bff      	cmp	r3, #255	@ 0xff
 80052be:	ddee      	ble.n	800529e <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 80052c0:	e013      	b.n	80052ea <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80052ca:	4613      	mov	r3, r2
 80052cc:	f107 0218 	add.w	r2, r7, #24
 80052d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80052d2:	f7fd f94f 	bl	8002574 <flash_read_float>
 80052d6:	eef0 7a40 	vmov.f32	s15, s0
 80052da:	4a0b      	ldr	r2, [pc, #44]	@ (8005308 <preference_writer_load+0x80>)
 80052dc:	00a3      	lsls	r3, r4, #2
 80052de:	4413      	add	r3, r2
 80052e0:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3301      	adds	r3, #1
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80052f0:	dbe7      	blt.n	80052c2 <preference_writer_load+0x3a>
    }
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80052fe:	b004      	add	sp, #16
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000430 	.word	0x20000430
 8005308:	20000330 	.word	0x20000330

0800530c <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fd f906 	bl	800252e <flash_writer_close>
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005330:	4b18      	ldr	r3, [pc, #96]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005332:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <MX_SPI1_Init+0x6c>)
 8005334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005336:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005338:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800533c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800533e:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005344:	4b13      	ldr	r3, [pc, #76]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800534a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <MX_SPI1_Init+0x68>)
 800534e:	2200      	movs	r2, #0
 8005350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005352:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005354:	2201      	movs	r2, #1
 8005356:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <MX_SPI1_Init+0x68>)
 800535a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800535e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005360:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005362:	2228      	movs	r2, #40	@ 0x28
 8005364:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005368:	2200      	movs	r2, #0
 800536a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800536c:	4b09      	ldr	r3, [pc, #36]	@ (8005394 <MX_SPI1_Init+0x68>)
 800536e:	2200      	movs	r2, #0
 8005370:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005372:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005374:	2200      	movs	r2, #0
 8005376:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005378:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <MX_SPI1_Init+0x68>)
 800537a:	220a      	movs	r2, #10
 800537c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800537e:	4805      	ldr	r0, [pc, #20]	@ (8005394 <MX_SPI1_Init+0x68>)
 8005380:	f003 fbd0 	bl	8008b24 <HAL_SPI_Init>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800538a:	f7ff fb59 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800538e:	bf00      	nop
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	200093c4 	.word	0x200093c4
 8005398:	40013000 	.word	0x40013000

0800539c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80053a0:	4b18      	ldr	r3, [pc, #96]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053a2:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <MX_SPI3_Init+0x6c>)
 80053a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80053a6:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80053ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80053b4:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053bc:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053c2:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053d8:	2200      	movs	r2, #0
 80053da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80053dc:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053de:	2200      	movs	r2, #0
 80053e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e2:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053ea:	220a      	movs	r2, #10
 80053ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80053ee:	4805      	ldr	r0, [pc, #20]	@ (8005404 <MX_SPI3_Init+0x68>)
 80053f0:	f003 fb98 	bl	8008b24 <HAL_SPI_Init>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80053fa:	f7ff fb21 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	2000941c 	.word	0x2000941c
 8005408:	40003c00 	.word	0x40003c00

0800540c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	@ 0x30
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a32      	ldr	r2, [pc, #200]	@ (80054f4 <HAL_SPI_MspInit+0xe8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d12c      	bne.n	8005488 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	4a30      	ldr	r2, [pc, #192]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 8005438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800543c:	6453      	str	r3, [r2, #68]	@ 0x44
 800543e:	4b2e      	ldr	r3, [pc, #184]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	4b2a      	ldr	r3, [pc, #168]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	4a29      	ldr	r2, [pc, #164]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6313      	str	r3, [r2, #48]	@ 0x30
 800545a:	4b27      	ldr	r3, [pc, #156]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005466:	23e0      	movs	r3, #224	@ 0xe0
 8005468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005476:	2305      	movs	r3, #5
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800547a:	f107 031c 	add.w	r3, r7, #28
 800547e:	4619      	mov	r1, r3
 8005480:	481e      	ldr	r0, [pc, #120]	@ (80054fc <HAL_SPI_MspInit+0xf0>)
 8005482:	f002 fb69 	bl	8007b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005486:	e031      	b.n	80054ec <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_SPI_MspInit+0xf4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d12c      	bne.n	80054ec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	4a17      	ldr	r2, [pc, #92]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 800549c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054a2:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	4b11      	ldr	r3, [pc, #68]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b6:	4a10      	ldr	r2, [pc, #64]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80054be:	4b0e      	ldr	r3, [pc, #56]	@ (80054f8 <HAL_SPI_MspInit+0xec>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80054ca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80054ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d0:	2302      	movs	r3, #2
 80054d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d8:	2303      	movs	r3, #3
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054dc:	2306      	movs	r3, #6
 80054de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054e0:	f107 031c 	add.w	r3, r7, #28
 80054e4:	4619      	mov	r1, r3
 80054e6:	4807      	ldr	r0, [pc, #28]	@ (8005504 <HAL_SPI_MspInit+0xf8>)
 80054e8:	f002 fb36 	bl	8007b58 <HAL_GPIO_Init>
}
 80054ec:	bf00      	nop
 80054ee:	3730      	adds	r7, #48	@ 0x30
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40013000 	.word	0x40013000
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40020000 	.word	0x40020000
 8005500:	40003c00 	.word	0x40003c00
 8005504:	40020800 	.word	0x40020800

08005508 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <FLASH_Unlock+0x24>)
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	da05      	bge.n	8005520 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <FLASH_Unlock+0x24>)
 8005516:	4a06      	ldr	r2, [pc, #24]	@ (8005530 <FLASH_Unlock+0x28>)
 8005518:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800551a:	4b04      	ldr	r3, [pc, #16]	@ (800552c <FLASH_Unlock+0x24>)
 800551c:	4a05      	ldr	r2, [pc, #20]	@ (8005534 <FLASH_Unlock+0x2c>)
 800551e:	605a      	str	r2, [r3, #4]
  }  
}
 8005520:	bf00      	nop
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00
 8005530:	45670123 	.word	0x45670123
 8005534:	cdef89ab 	.word	0xcdef89ab

08005538 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <FLASH_Lock+0x1c>)
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	4a04      	ldr	r2, [pc, #16]	@ (8005554 <FLASH_Lock+0x1c>)
 8005542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005546:	6113      	str	r3, [r2, #16]
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40023c00 	.word	0x40023c00

08005558 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005568:	2309      	movs	r3, #9
 800556a:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e010      	b.n	800559a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d103      	bne.n	8005586 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800557e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e009      	b.n	800559a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d103      	bne.n	8005594 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800558c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e002      	b.n	800559a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005594:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005598:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 800559a:	f000 f8bf 	bl	800571c <FLASH_WaitForLastOperation2>
 800559e:	4603      	mov	r3, r0
 80055a0:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 80055a2:	7afb      	ldrb	r3, [r7, #11]
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	d12f      	bne.n	8005608 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80055a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	4a19      	ldr	r2, [pc, #100]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80055b4:	4b17      	ldr	r3, [pc, #92]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	4916      	ldr	r1, [pc, #88]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 80055c0:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	4a13      	ldr	r2, [pc, #76]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80055ca:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80055cc:	4b11      	ldr	r3, [pc, #68]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055d6:	f043 0302 	orr.w	r3, r3, #2
 80055da:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80055dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e6:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 80055e8:	f000 f898 	bl	800571c <FLASH_WaitForLastOperation2>
 80055ec:	4603      	mov	r3, r0
 80055ee:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80055f0:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	4a07      	ldr	r2, [pc, #28]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055f6:	f023 0302 	bic.w	r3, r3, #2
 80055fa:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <FLASH_EraseSector+0xbc>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	4a04      	ldr	r2, [pc, #16]	@ (8005614 <FLASH_EraseSector+0xbc>)
 8005602:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005606:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8005608:	7afb      	ldrb	r3, [r7, #11]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40023c00 	.word	0x40023c00

08005618 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8005622:	2309      	movs	r3, #9
 8005624:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005626:	f000 f879 	bl	800571c <FLASH_WaitForLastOperation2>
 800562a:	4603      	mov	r3, r0
 800562c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b09      	cmp	r3, #9
 8005632:	d11e      	bne.n	8005672 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005634:	4b11      	ldr	r3, [pc, #68]	@ (800567c <FLASH_ProgramWord+0x64>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	4a10      	ldr	r2, [pc, #64]	@ (800567c <FLASH_ProgramWord+0x64>)
 800563a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005640:	4b0e      	ldr	r3, [pc, #56]	@ (800567c <FLASH_ProgramWord+0x64>)
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4a0d      	ldr	r2, [pc, #52]	@ (800567c <FLASH_ProgramWord+0x64>)
 8005646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800564a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <FLASH_ProgramWord+0x64>)
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <FLASH_ProgramWord+0x64>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 800565e:	f000 f85d 	bl	800571c <FLASH_WaitForLastOperation2>
 8005662:	4603      	mov	r3, r0
 8005664:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005666:	4b05      	ldr	r3, [pc, #20]	@ (800567c <FLASH_ProgramWord+0x64>)
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	4a04      	ldr	r2, [pc, #16]	@ (800567c <FLASH_ProgramWord+0x64>)
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40023c00 	.word	0x40023c00

08005680 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005688:	4a04      	ldr	r2, [pc, #16]	@ (800569c <FLASH_ClearFlag+0x1c>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60d3      	str	r3, [r2, #12]
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40023c00 	.word	0x40023c00

080056a0 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 80056a6:	2309      	movs	r3, #9
 80056a8:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80056aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <FLASH_GetStatus+0x78>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b6:	d102      	bne.n	80056be <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 80056b8:	2301      	movs	r3, #1
 80056ba:	71fb      	strb	r3, [r7, #7]
 80056bc:	e025      	b.n	800570a <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80056be:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <FLASH_GetStatus+0x78>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 80056ca:	2306      	movs	r3, #6
 80056cc:	71fb      	strb	r3, [r7, #7]
 80056ce:	e01c      	b.n	800570a <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 80056d0:	4b11      	ldr	r3, [pc, #68]	@ (8005718 <FLASH_GetStatus+0x78>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 80056dc:	2302      	movs	r3, #2
 80056de:	71fb      	strb	r3, [r7, #7]
 80056e0:	e013      	b.n	800570a <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <FLASH_GetStatus+0x78>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 80056ee:	2307      	movs	r3, #7
 80056f0:	71fb      	strb	r3, [r7, #7]
 80056f2:	e00a      	b.n	800570a <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80056f4:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <FLASH_GetStatus+0x78>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 8005700:	2308      	movs	r3, #8
 8005702:	71fb      	strb	r3, [r7, #7]
 8005704:	e001      	b.n	800570a <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8005706:	2309      	movs	r3, #9
 8005708:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800570a:	79fb      	ldrb	r3, [r7, #7]
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40023c00 	.word	0x40023c00

0800571c <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8005722:	2309      	movs	r3, #9
 8005724:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005726:	f7ff ffbb 	bl	80056a0 <FLASH_GetStatus>
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 800572e:	e003      	b.n	8005738 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8005730:	f7ff ffb6 	bl	80056a0 <FLASH_GetStatus>
 8005734:	4603      	mov	r3, r0
 8005736:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d0f7      	beq.n	8005730 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	b2db      	uxtb	r3, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <HAL_MspInit+0x4c>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	4a0f      	ldr	r2, [pc, #60]	@ (8005798 <HAL_MspInit+0x4c>)
 800575c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005760:	6453      	str	r3, [r2, #68]	@ 0x44
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <HAL_MspInit+0x4c>)
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_MspInit+0x4c>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	4a08      	ldr	r2, [pc, #32]	@ (8005798 <HAL_MspInit+0x4c>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577c:	6413      	str	r3, [r2, #64]	@ 0x40
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_MspInit+0x4c>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800578a:	2007      	movs	r0, #7
 800578c:	f002 f910 	bl	80079b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800

0800579c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057aa:	b480      	push	{r7}
 80057ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <HardFault_Handler+0x4>

080057b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057b2:	b480      	push	{r7}
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <MemManage_Handler+0x4>

080057ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <BusFault_Handler+0x4>

080057c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057c2:	b480      	push	{r7}
 80057c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057c6:	bf00      	nop
 80057c8:	e7fd      	b.n	80057c6 <UsageFault_Handler+0x4>

080057ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057e6:	b480      	push	{r7}
 80057e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057f8:	f000 fd5e 	bl	80062b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057fc:	bf00      	nop
 80057fe:	bd80      	pop	{r7, pc}

08005800 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005802:	b095      	sub	sp, #84	@ 0x54
 8005804:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005806:	4873      	ldr	r0, [pc, #460]	@ (80059d4 <CAN1_RX0_IRQHandler+0x1d4>)
 8005808:	f001 fdc9 	bl	800739e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800580c:	4b72      	ldr	r3, [pc, #456]	@ (80059d8 <CAN1_RX0_IRQHandler+0x1d8>)
 800580e:	4a73      	ldr	r2, [pc, #460]	@ (80059dc <CAN1_RX0_IRQHandler+0x1dc>)
 8005810:	2100      	movs	r1, #0
 8005812:	4870      	ldr	r0, [pc, #448]	@ (80059d4 <CAN1_RX0_IRQHandler+0x1d4>)
 8005814:	f001 fcb1 	bl	800717a <HAL_CAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR, controller.v_bus_filt);	// Pack response
 8005818:	4b71      	ldr	r3, [pc, #452]	@ (80059e0 <CAN1_RX0_IRQHandler+0x1e0>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	4a71      	ldr	r2, [pc, #452]	@ (80059e4 <CAN1_RX0_IRQHandler+0x1e4>)
 8005820:	ed92 7a03 	vldr	s14, [r2, #12]
 8005824:	4a70      	ldr	r2, [pc, #448]	@ (80059e8 <CAN1_RX0_IRQHandler+0x1e8>)
 8005826:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800582a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800582e:	4a6d      	ldr	r2, [pc, #436]	@ (80059e4 <CAN1_RX0_IRQHandler+0x1e4>)
 8005830:	ed92 7a18 	vldr	s14, [r2, #96]	@ 0x60
 8005834:	4a6c      	ldr	r2, [pc, #432]	@ (80059e8 <CAN1_RX0_IRQHandler+0x1e8>)
 8005836:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800583a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800583e:	4a6b      	ldr	r2, [pc, #428]	@ (80059ec <CAN1_RX0_IRQHandler+0x1ec>)
 8005840:	ed92 7a11 	vldr	s14, [r2, #68]	@ 0x44
 8005844:	4a68      	ldr	r2, [pc, #416]	@ (80059e8 <CAN1_RX0_IRQHandler+0x1e8>)
 8005846:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800584a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800584e:	4a66      	ldr	r2, [pc, #408]	@ (80059e8 <CAN1_RX0_IRQHandler+0x1e8>)
 8005850:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	4a64      	ldr	r2, [pc, #400]	@ (80059ec <CAN1_RX0_IRQHandler+0x1ec>)
 800585a:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 800585e:	eef0 1a47 	vmov.f32	s3, s14
 8005862:	eeb0 1a67 	vmov.f32	s2, s15
 8005866:	eef0 0a46 	vmov.f32	s1, s12
 800586a:	eeb0 0a66 	vmov.f32	s0, s13
 800586e:	4619      	mov	r1, r3
 8005870:	485f      	ldr	r0, [pc, #380]	@ (80059f0 <CAN1_RX0_IRQHandler+0x1f0>)
 8005872:	f7fc fa33 	bl	8001cdc <pack_reply>
  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	4a5e      	ldr	r2, [pc, #376]	@ (80059f4 <CAN1_RX0_IRQHandler+0x1f4>)
 800587a:	495f      	ldr	r1, [pc, #380]	@ (80059f8 <CAN1_RX0_IRQHandler+0x1f8>)
 800587c:	4855      	ldr	r0, [pc, #340]	@ (80059d4 <CAN1_RX0_IRQHandler+0x1d4>)
 800587e:	f001 fba1 	bl	8006fc4 <HAL_CAN_AddTxMessage>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005882:	4b5e      	ldr	r3, [pc, #376]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005884:	785a      	ldrb	r2, [r3, #1]
 8005886:	4b5d      	ldr	r3, [pc, #372]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005888:	789b      	ldrb	r3, [r3, #2]
 800588a:	4013      	ands	r3, r2
 800588c:	b2da      	uxtb	r2, r3
 800588e:	4b5b      	ldr	r3, [pc, #364]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	4013      	ands	r3, r2
 8005894:	b2da      	uxtb	r2, r3
 8005896:	4b59      	ldr	r3, [pc, #356]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	4013      	ands	r3, r2
 800589c:	b2da      	uxtb	r2, r3
 800589e:	4b57      	ldr	r3, [pc, #348]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058a0:	795b      	ldrb	r3, [r3, #5]
 80058a2:	4013      	ands	r3, r2
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	4b55      	ldr	r3, [pc, #340]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058a8:	799b      	ldrb	r3, [r3, #6]
 80058aa:	4013      	ands	r3, r2
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4b53      	ldr	r3, [pc, #332]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058b0:	79db      	ldrb	r3, [r3, #7]
 80058b2:	4013      	ands	r3, r2
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2bff      	cmp	r3, #255	@ 0xff
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b4e      	ldr	r3, [pc, #312]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058c2:	7a1b      	ldrb	r3, [r3, #8]
 80058c4:	2bfc      	cmp	r3, #252	@ 0xfc
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	4013      	ands	r3, r2
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <CAN1_RX0_IRQHandler+0xe0>
	  update_fsm(&state, MOTOR_CMD);
 80058d6:	216d      	movs	r1, #109	@ 0x6d
 80058d8:	4849      	ldr	r0, [pc, #292]	@ (8005a00 <CAN1_RX0_IRQHandler+0x200>)
 80058da:	f7fd ffcf 	bl	800387c <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
	  controller.timeout = 0;					// Reset timeout counter
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80058de:	e075      	b.n	80059cc <CAN1_RX0_IRQHandler+0x1cc>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80058e0:	4b46      	ldr	r3, [pc, #280]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058e2:	785a      	ldrb	r2, [r3, #1]
 80058e4:	4b45      	ldr	r3, [pc, #276]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058e6:	789b      	ldrb	r3, [r3, #2]
 80058e8:	4013      	ands	r3, r2
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	4b43      	ldr	r3, [pc, #268]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058ee:	78db      	ldrb	r3, [r3, #3]
 80058f0:	4013      	ands	r3, r2
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058f6:	7919      	ldrb	r1, [r3, #4]
 80058f8:	4b40      	ldr	r3, [pc, #256]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 80058fa:	795b      	ldrb	r3, [r3, #5]
 80058fc:	400b      	ands	r3, r1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	4013      	ands	r3, r2
 8005902:	b2da      	uxtb	r2, r3
 8005904:	4b3d      	ldr	r3, [pc, #244]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005906:	799b      	ldrb	r3, [r3, #6]
 8005908:	4013      	ands	r3, r2
 800590a:	b2da      	uxtb	r2, r3
 800590c:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 800590e:	79db      	ldrb	r3, [r3, #7]
 8005910:	4013      	ands	r3, r2
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2bff      	cmp	r3, #255	@ 0xff
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b37      	ldr	r3, [pc, #220]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005920:	7a1b      	ldrb	r3, [r3, #8]
 8005922:	2bfd      	cmp	r3, #253	@ 0xfd
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	4013      	ands	r3, r2
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <CAN1_RX0_IRQHandler+0x13e>
      update_fsm(&state, MENU_CMD);
 8005934:	211b      	movs	r1, #27
 8005936:	4832      	ldr	r0, [pc, #200]	@ (8005a00 <CAN1_RX0_IRQHandler+0x200>)
 8005938:	f7fd ffa0 	bl	800387c <update_fsm>
}
 800593c:	e046      	b.n	80059cc <CAN1_RX0_IRQHandler+0x1cc>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005940:	785a      	ldrb	r2, [r3, #1]
 8005942:	4b2e      	ldr	r3, [pc, #184]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005944:	789b      	ldrb	r3, [r3, #2]
 8005946:	4013      	ands	r3, r2
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b2c      	ldr	r3, [pc, #176]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	4013      	ands	r3, r2
 8005950:	b2da      	uxtb	r2, r3
 8005952:	4b2a      	ldr	r3, [pc, #168]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005954:	7919      	ldrb	r1, [r3, #4]
 8005956:	4b29      	ldr	r3, [pc, #164]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005958:	795b      	ldrb	r3, [r3, #5]
 800595a:	400b      	ands	r3, r1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	4013      	ands	r3, r2
 8005960:	b2da      	uxtb	r2, r3
 8005962:	4b26      	ldr	r3, [pc, #152]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 8005964:	799b      	ldrb	r3, [r3, #6]
 8005966:	4013      	ands	r3, r2
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4b24      	ldr	r3, [pc, #144]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 800596c:	79db      	ldrb	r3, [r3, #7]
 800596e:	4013      	ands	r3, r2
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2bff      	cmp	r3, #255	@ 0xff
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2da      	uxtb	r2, r3
 800597c:	4b1f      	ldr	r3, [pc, #124]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 800597e:	7a1b      	ldrb	r3, [r3, #8]
 8005980:	2bfe      	cmp	r3, #254	@ 0xfe
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	4013      	ands	r3, r2
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <CAN1_RX0_IRQHandler+0x19c>
	  update_fsm(&state, ZERO_CMD);
 8005992:	217a      	movs	r1, #122	@ 0x7a
 8005994:	481a      	ldr	r0, [pc, #104]	@ (8005a00 <CAN1_RX0_IRQHandler+0x200>)
 8005996:	f7fd ff71 	bl	800387c <update_fsm>
}
 800599a:	e017      	b.n	80059cc <CAN1_RX0_IRQHandler+0x1cc>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800599c:	4e17      	ldr	r6, [pc, #92]	@ (80059fc <CAN1_RX0_IRQHandler+0x1fc>)
 800599e:	4b19      	ldr	r3, [pc, #100]	@ (8005a04 <CAN1_RX0_IRQHandler+0x204>)
 80059a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80059a2:	466d      	mov	r5, sp
 80059a4:	f106 0410 	add.w	r4, r6, #16
 80059a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80059b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80059bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80059c0:	f7fc fa20 	bl	8001e04 <unpack_cmd>
	  controller.timeout = 0;					// Reset timeout counter
 80059c4:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <CAN1_RX0_IRQHandler+0x1ec>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d4:	20000308 	.word	0x20000308
 80059d8:	20009371 	.word	0x20009371
 80059dc:	2000937c 	.word	0x2000937c
 80059e0:	20000430 	.word	0x20000430
 80059e4:	20000b5c 	.word	0x20000b5c
 80059e8:	20000330 	.word	0x20000330
 80059ec:	20000844 	.word	0x20000844
 80059f0:	20009350 	.word	0x20009350
 80059f4:	20009351 	.word	0x20009351
 80059f8:	20009358 	.word	0x20009358
 80059fc:	20009370 	.word	0x20009370
 8005a00:	20000b4c 	.word	0x20000b4c
 8005a04:	2000091c 	.word	0x2000091c

08005a08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8005a0c:	480c      	ldr	r0, [pc, #48]	@ (8005a40 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005a0e:	f7fc fe6f 	bl	80026f0 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005a12:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005a44 <TIM1_UP_TIM10_IRQHandler+0x3c>
 8005a16:	480c      	ldr	r0, [pc, #48]	@ (8005a48 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8005a18:	f7ff f9f2 	bl	8004e00 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005a1c:	480b      	ldr	r0, [pc, #44]	@ (8005a4c <TIM1_UP_TIM10_IRQHandler+0x44>)
 8005a1e:	f7fd fd89 	bl	8003534 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005a22:	f000 f833 	bl	8005a8c <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005a30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a34:	4806      	ldr	r0, [pc, #24]	@ (8005a50 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8005a36:	f003 fd4d 	bl	80094d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000844 	.word	0x20000844
 8005a44:	37d1b717 	.word	0x37d1b717
 8005a48:	20000b5c 	.word	0x20000b5c
 8005a4c:	20000b4c 	.word	0x20000b4c
 8005a50:	20009478 	.word	0x20009478

08005a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005a5a:	4809      	ldr	r0, [pc, #36]	@ (8005a80 <USART2_IRQHandler+0x2c>)
 8005a5c:	f004 fcf8 	bl	800a450 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005a60:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <USART2_IRQHandler+0x30>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4807      	ldr	r0, [pc, #28]	@ (8005a88 <USART2_IRQHandler+0x34>)
 8005a6c:	f7fd ff06 	bl	800387c <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a70:	4803      	ldr	r0, [pc, #12]	@ (8005a80 <USART2_IRQHandler+0x2c>)
 8005a72:	f004 fced 	bl	800a450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200094c0 	.word	0x200094c0
 8005a84:	200093c0 	.word	0x200093c0
 8005a88:	20000b4c 	.word	0x20000b4c

08005a8c <can_tx_rx>:


/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b095      	sub	sp, #84	@ 0x54
 8005a90:	af12      	add	r7, sp, #72	@ 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005a92:	4b79      	ldr	r3, [pc, #484]	@ (8005c78 <can_tx_rx+0x1ec>)
 8005a94:	4a79      	ldr	r2, [pc, #484]	@ (8005c7c <can_tx_rx+0x1f0>)
 8005a96:	2100      	movs	r1, #0
 8005a98:	4879      	ldr	r0, [pc, #484]	@ (8005c80 <can_tx_rx+0x1f4>)
 8005a9a:	f001 fb6e 	bl	800717a <HAL_CAN_GetRxMessage>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 80e3 	bne.w	8005c70 <can_tx_rx+0x1e4>
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_mag_max*KT*GR, controller.v_max-controller.v_ref);	// Pack response
 8005aaa:	4b76      	ldr	r3, [pc, #472]	@ (8005c84 <can_tx_rx+0x1f8>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4a75      	ldr	r2, [pc, #468]	@ (8005c88 <can_tx_rx+0x1fc>)
 8005ab2:	ed92 7a03 	vldr	s14, [r2, #12]
 8005ab6:	4a75      	ldr	r2, [pc, #468]	@ (8005c8c <can_tx_rx+0x200>)
 8005ab8:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8005abc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ac0:	4a71      	ldr	r2, [pc, #452]	@ (8005c88 <can_tx_rx+0x1fc>)
 8005ac2:	ed92 7a18 	vldr	s14, [r2, #96]	@ 0x60
 8005ac6:	4a71      	ldr	r2, [pc, #452]	@ (8005c8c <can_tx_rx+0x200>)
 8005ac8:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8005acc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005ad0:	4a6f      	ldr	r2, [pc, #444]	@ (8005c90 <can_tx_rx+0x204>)
 8005ad2:	ed92 7a14 	vldr	s14, [r2, #80]	@ 0x50
 8005ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c8c <can_tx_rx+0x200>)
 8005ad8:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8005adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c8c <can_tx_rx+0x200>)
 8005ae2:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8005ae6:	ee67 5a27 	vmul.f32	s11, s14, s15
 8005aea:	4a69      	ldr	r2, [pc, #420]	@ (8005c90 <can_tx_rx+0x204>)
 8005aec:	ed92 7a3b 	vldr	s14, [r2, #236]	@ 0xec
 8005af0:	4a67      	ldr	r2, [pc, #412]	@ (8005c90 <can_tx_rx+0x204>)
 8005af2:	edd2 7a3c 	vldr	s15, [r2, #240]	@ 0xf0
 8005af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005afa:	eef0 1a67 	vmov.f32	s3, s15
 8005afe:	eeb0 1a65 	vmov.f32	s2, s11
 8005b02:	eef0 0a46 	vmov.f32	s1, s12
 8005b06:	eeb0 0a66 	vmov.f32	s0, s13
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4861      	ldr	r0, [pc, #388]	@ (8005c94 <can_tx_rx+0x208>)
 8005b0e:	f7fc f8e5 	bl	8001cdc <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8005b12:	463b      	mov	r3, r7
 8005b14:	4a60      	ldr	r2, [pc, #384]	@ (8005c98 <can_tx_rx+0x20c>)
 8005b16:	4961      	ldr	r1, [pc, #388]	@ (8005c9c <can_tx_rx+0x210>)
 8005b18:	4859      	ldr	r0, [pc, #356]	@ (8005c80 <can_tx_rx+0x1f4>)
 8005b1a:	f001 fa53 	bl	8006fc4 <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005b1e:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b20:	785a      	ldrb	r2, [r3, #1]
 8005b22:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b24:	789b      	ldrb	r3, [r3, #2]
 8005b26:	4013      	ands	r3, r2
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b2c:	78db      	ldrb	r3, [r3, #3]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	4b5b      	ldr	r3, [pc, #364]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b34:	791b      	ldrb	r3, [r3, #4]
 8005b36:	4013      	ands	r3, r2
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4b59      	ldr	r3, [pc, #356]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b3c:	795b      	ldrb	r3, [r3, #5]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4b57      	ldr	r3, [pc, #348]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b44:	799b      	ldrb	r3, [r3, #6]
 8005b46:	4013      	ands	r3, r2
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	4b55      	ldr	r3, [pc, #340]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b4c:	79db      	ldrb	r3, [r3, #7]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2bff      	cmp	r3, #255	@ 0xff
 8005b54:	bf0c      	ite	eq
 8005b56:	2301      	moveq	r3, #1
 8005b58:	2300      	movne	r3, #0
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b5e:	7a1b      	ldrb	r3, [r3, #8]
 8005b60:	2bfc      	cmp	r3, #252	@ 0xfc
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <can_tx_rx+0xf0>
			  update_fsm(&state, MOTOR_CMD);
 8005b72:	216d      	movs	r1, #109	@ 0x6d
 8005b74:	484b      	ldr	r0, [pc, #300]	@ (8005ca4 <can_tx_rx+0x218>)
 8005b76:	f7fd fe81 	bl	800387c <update_fsm>
			  controller.timeout = 0;					// Reset timeout counter
		controller.i_mag_max = controller.i_q;
		}
	}

}
 8005b7a:	e079      	b.n	8005c70 <can_tx_rx+0x1e4>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8005b7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b7e:	785a      	ldrb	r2, [r3, #1]
 8005b80:	4b47      	ldr	r3, [pc, #284]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b82:	789b      	ldrb	r3, [r3, #2]
 8005b84:	4013      	ands	r3, r2
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b45      	ldr	r3, [pc, #276]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b8a:	78db      	ldrb	r3, [r3, #3]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b43      	ldr	r3, [pc, #268]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b92:	7919      	ldrb	r1, [r3, #4]
 8005b94:	4b42      	ldr	r3, [pc, #264]	@ (8005ca0 <can_tx_rx+0x214>)
 8005b96:	795b      	ldrb	r3, [r3, #5]
 8005b98:	400b      	ands	r3, r1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ca0 <can_tx_rx+0x214>)
 8005ba2:	799b      	ldrb	r3, [r3, #6]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca0 <can_tx_rx+0x214>)
 8005baa:	79db      	ldrb	r3, [r3, #7]
 8005bac:	4013      	ands	r3, r2
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2bff      	cmp	r3, #255	@ 0xff
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b39      	ldr	r3, [pc, #228]	@ (8005ca0 <can_tx_rx+0x214>)
 8005bbc:	7a1b      	ldrb	r3, [r3, #8]
 8005bbe:	2bfd      	cmp	r3, #253	@ 0xfd
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4013      	ands	r3, r2
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <can_tx_rx+0x14e>
			update_fsm(&state, MENU_CMD);
 8005bd0:	211b      	movs	r1, #27
 8005bd2:	4834      	ldr	r0, [pc, #208]	@ (8005ca4 <can_tx_rx+0x218>)
 8005bd4:	f7fd fe52 	bl	800387c <update_fsm>
}
 8005bd8:	e04a      	b.n	8005c70 <can_tx_rx+0x1e4>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005bda:	4b31      	ldr	r3, [pc, #196]	@ (8005ca0 <can_tx_rx+0x214>)
 8005bdc:	785a      	ldrb	r2, [r3, #1]
 8005bde:	4b30      	ldr	r3, [pc, #192]	@ (8005ca0 <can_tx_rx+0x214>)
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	4013      	ands	r3, r2
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca0 <can_tx_rx+0x214>)
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	4013      	ands	r3, r2
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca0 <can_tx_rx+0x214>)
 8005bf0:	7919      	ldrb	r1, [r3, #4]
 8005bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca0 <can_tx_rx+0x214>)
 8005bf4:	795b      	ldrb	r3, [r3, #5]
 8005bf6:	400b      	ands	r3, r1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ca0 <can_tx_rx+0x214>)
 8005c00:	799b      	ldrb	r3, [r3, #6]
 8005c02:	4013      	ands	r3, r2
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	4b26      	ldr	r3, [pc, #152]	@ (8005ca0 <can_tx_rx+0x214>)
 8005c08:	79db      	ldrb	r3, [r3, #7]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2bff      	cmp	r3, #255	@ 0xff
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	4b21      	ldr	r3, [pc, #132]	@ (8005ca0 <can_tx_rx+0x214>)
 8005c1a:	7a1b      	ldrb	r3, [r3, #8]
 8005c1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	4013      	ands	r3, r2
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <can_tx_rx+0x1ac>
			  update_fsm(&state, ZERO_CMD);
 8005c2e:	217a      	movs	r1, #122	@ 0x7a
 8005c30:	481c      	ldr	r0, [pc, #112]	@ (8005ca4 <can_tx_rx+0x218>)
 8005c32:	f7fd fe23 	bl	800387c <update_fsm>
}
 8005c36:	e01b      	b.n	8005c70 <can_tx_rx+0x1e4>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8005c38:	4e19      	ldr	r6, [pc, #100]	@ (8005ca0 <can_tx_rx+0x214>)
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca8 <can_tx_rx+0x21c>)
 8005c3c:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c3e:	466d      	mov	r5, sp
 8005c40:	f106 0410 	add.w	r4, r6, #16
 8005c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005c54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005c58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c5c:	f7fc f8d2 	bl	8001e04 <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8005c60:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <can_tx_rx+0x204>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
		controller.i_mag_max = controller.i_q;
 8005c68:	4b09      	ldr	r3, [pc, #36]	@ (8005c90 <can_tx_rx+0x204>)
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	4a08      	ldr	r2, [pc, #32]	@ (8005c90 <can_tx_rx+0x204>)
 8005c6e:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c78:	20009371 	.word	0x20009371
 8005c7c:	2000937c 	.word	0x2000937c
 8005c80:	20000308 	.word	0x20000308
 8005c84:	20000430 	.word	0x20000430
 8005c88:	20000b5c 	.word	0x20000b5c
 8005c8c:	20000330 	.word	0x20000330
 8005c90:	20000844 	.word	0x20000844
 8005c94:	20009350 	.word	0x20009350
 8005c98:	20009351 	.word	0x20009351
 8005c9c:	20009358 	.word	0x20009358
 8005ca0:	20009370 	.word	0x20009370
 8005ca4:	20000b4c 	.word	0x20000b4c
 8005ca8:	2000091c 	.word	0x2000091c

08005cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
	return 1;
 8005cb0:	2301      	movs	r3, #1
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <_kill>:

int _kill(int pid, int sig)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005cc6:	f007 fa93 	bl	800d1f0 <__errno>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2216      	movs	r2, #22
 8005cce:	601a      	str	r2, [r3, #0]
	return -1;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <_exit>:

void _exit (int status)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ffe7 	bl	8005cbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <_exit+0x12>

08005cf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	e00a      	b.n	8005d1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d04:	f3af 8000 	nop.w
 8005d08:	4601      	mov	r1, r0
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	60ba      	str	r2, [r7, #8]
 8005d10:	b2ca      	uxtb	r2, r1
 8005d12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3301      	adds	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	dbf0      	blt.n	8005d04 <_read+0x12>
	}

return len;
 8005d22:	687b      	ldr	r3, [r7, #4]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e009      	b.n	8005d52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	60ba      	str	r2, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fa16 	bl	8006178 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	dbf1      	blt.n	8005d3e <_write+0x12>
	}
	return len;
 8005d5a:	687b      	ldr	r3, [r7, #4]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <_close>:

int _close(int file)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	return -1;
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d8c:	605a      	str	r2, [r3, #4]
	return 0;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <_isatty>:

int _isatty(int file)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	return 1;
 8005da4:	2301      	movs	r3, #1
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
	return 0;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void * _sbrk(int incr)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005dd4:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <_sbrk+0x50>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <_sbrk+0x16>
		heap_end = &end;
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <_sbrk+0x50>)
 8005dde:	4a10      	ldr	r2, [pc, #64]	@ (8005e20 <_sbrk+0x54>)
 8005de0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005de2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e1c <_sbrk+0x50>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005de8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <_sbrk+0x50>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	466a      	mov	r2, sp
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d907      	bls.n	8005e06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005df6:	f007 f9fb 	bl	800d1f0 <__errno>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	220c      	movs	r2, #12
 8005dfe:	601a      	str	r2, [r3, #0]
		return (void *) -1;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295
 8005e04:	e006      	b.n	8005e14 <_sbrk+0x48>
	}

	heap_end += incr;
 8005e06:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <_sbrk+0x50>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	4a03      	ldr	r2, [pc, #12]	@ (8005e1c <_sbrk+0x50>)
 8005e10:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20009474 	.word	0x20009474
 8005e20:	20009658 	.word	0x20009658

08005e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e28:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <SystemInit+0x28>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	4a07      	ldr	r2, [pc, #28]	@ (8005e4c <SystemInit+0x28>)
 8005e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <SystemInit+0x28>)
 8005e3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8005e40:	bf00      	nop
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b096      	sub	sp, #88	@ 0x58
 8005e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e56:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	609a      	str	r2, [r3, #8]
 8005e7a:	60da      	str	r2, [r3, #12]
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	615a      	str	r2, [r3, #20]
 8005e80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	2220      	movs	r2, #32
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f007 f94d 	bl	800d128 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005e90:	4a4a      	ldr	r2, [pc, #296]	@ (8005fbc <MX_TIM1_Init+0x16c>)
 8005e92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005e94:	4b48      	ldr	r3, [pc, #288]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005e9a:	4b47      	ldr	r3, [pc, #284]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 8005ea0:	4b45      	ldr	r3, [pc, #276]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005ea2:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 8005ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ea8:	4b43      	ldr	r3, [pc, #268]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005eae:	4b42      	ldr	r3, [pc, #264]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005eb4:	4b40      	ldr	r3, [pc, #256]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005eba:	483f      	ldr	r0, [pc, #252]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005ebc:	f003 f928 	bl	8009110 <HAL_TIM_Base_Init>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005ec6:	f7fe fdbb 	bl	8004a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005ed0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4838      	ldr	r0, [pc, #224]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005ed8:	f003 fcc2 	bl	8009860 <HAL_TIM_ConfigClockSource>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005ee2:	f7fe fdad 	bl	8004a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ee6:	4834      	ldr	r0, [pc, #208]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005ee8:	f003 f9d2 	bl	8009290 <HAL_TIM_PWM_Init>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005ef2:	f7fe fda5 	bl	8004a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005efe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005f02:	4619      	mov	r1, r3
 8005f04:	482c      	ldr	r0, [pc, #176]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005f06:	f004 f8b1 	bl	800a06c <HAL_TIMEx_MasterConfigSynchronization>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005f10:	f7fe fd96 	bl	8004a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f14:	2360      	movs	r3, #96	@ 0x60
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f20:	2300      	movs	r3, #0
 8005f22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005f24:	2304      	movs	r3, #4
 8005f26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f34:	2200      	movs	r2, #0
 8005f36:	4619      	mov	r1, r3
 8005f38:	481f      	ldr	r0, [pc, #124]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005f3a:	f003 fbd3 	bl	80096e4 <HAL_TIM_PWM_ConfigChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005f44:	f7fe fd7c 	bl	8004a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4819      	ldr	r0, [pc, #100]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005f52:	f003 fbc7 	bl	80096e4 <HAL_TIM_PWM_ConfigChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005f5c:	f7fe fd70 	bl	8004a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f64:	2208      	movs	r2, #8
 8005f66:	4619      	mov	r1, r3
 8005f68:	4813      	ldr	r0, [pc, #76]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005f6a:	f003 fbbb 	bl	80096e4 <HAL_TIM_PWM_ConfigChannel>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8005f74:	f7fe fd64 	bl	8004a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4807      	ldr	r0, [pc, #28]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005f9c:	f004 f8e2 	bl	800a164 <HAL_TIMEx_ConfigBreakDeadTime>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8005fa6:	f7fe fd4b 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005faa:	4803      	ldr	r0, [pc, #12]	@ (8005fb8 <MX_TIM1_Init+0x168>)
 8005fac:	f000 f830 	bl	8006010 <HAL_TIM_MspPostInit>

}
 8005fb0:	bf00      	nop
 8005fb2:	3758      	adds	r7, #88	@ 0x58
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20009478 	.word	0x20009478
 8005fbc:	40010000 	.word	0x40010000

08005fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8006008 <HAL_TIM_Base_MspInit+0x48>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d115      	bne.n	8005ffe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <HAL_TIM_Base_MspInit+0x4c>)
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	4a0c      	ldr	r2, [pc, #48]	@ (800600c <HAL_TIM_Base_MspInit+0x4c>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <HAL_TIM_Base_MspInit+0x4c>)
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	2019      	movs	r0, #25
 8005ff4:	f001 fce7 	bl	80079c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005ff8:	2019      	movs	r0, #25
 8005ffa:	f001 fd00 	bl	80079fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000
 800600c:	40023800 	.word	0x40023800

08006010 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006018:	f107 030c 	add.w	r3, r7, #12
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	60da      	str	r2, [r3, #12]
 8006026:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a12      	ldr	r2, [pc, #72]	@ (8006078 <HAL_TIM_MspPostInit+0x68>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d11e      	bne.n	8006070 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	4b11      	ldr	r3, [pc, #68]	@ (800607c <HAL_TIM_MspPostInit+0x6c>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	4a10      	ldr	r2, [pc, #64]	@ (800607c <HAL_TIM_MspPostInit+0x6c>)
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	6313      	str	r3, [r2, #48]	@ 0x30
 8006042:	4b0e      	ldr	r3, [pc, #56]	@ (800607c <HAL_TIM_MspPostInit+0x6c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800604e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8006052:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006054:	2302      	movs	r3, #2
 8006056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605c:	2303      	movs	r3, #3
 800605e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006060:	2301      	movs	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006064:	f107 030c 	add.w	r3, r7, #12
 8006068:	4619      	mov	r1, r3
 800606a:	4805      	ldr	r0, [pc, #20]	@ (8006080 <HAL_TIM_MspPostInit+0x70>)
 800606c:	f001 fd74 	bl	8007b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40010000 	.word	0x40010000
 800607c:	40023800 	.word	0x40023800
 8006080:	40020000 	.word	0x40020000

08006084 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006088:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 800608a:	4a12      	ldr	r2, [pc, #72]	@ (80060d4 <MX_USART2_UART_Init+0x50>)
 800608c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800608e:	4b10      	ldr	r3, [pc, #64]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 8006090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006096:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060a2:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060a8:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 80060aa:	220c      	movs	r2, #12
 80060ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ae:	4b08      	ldr	r3, [pc, #32]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060b4:	4b06      	ldr	r3, [pc, #24]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060ba:	4805      	ldr	r0, [pc, #20]	@ (80060d0 <MX_USART2_UART_Init+0x4c>)
 80060bc:	f004 f8b8 	bl	800a230 <HAL_UART_Init>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060c6:	f7fe fcbb 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200094c0 	.word	0x200094c0
 80060d4:	40004400 	.word	0x40004400

080060d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1d      	ldr	r2, [pc, #116]	@ (800616c <HAL_UART_MspInit+0x94>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d133      	bne.n	8006162 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006170 <HAL_UART_MspInit+0x98>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <HAL_UART_MspInit+0x98>)
 8006104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006108:	6413      	str	r3, [r2, #64]	@ 0x40
 800610a:	4b19      	ldr	r3, [pc, #100]	@ (8006170 <HAL_UART_MspInit+0x98>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <HAL_UART_MspInit+0x98>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <HAL_UART_MspInit+0x98>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6313      	str	r3, [r2, #48]	@ 0x30
 8006126:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <HAL_UART_MspInit+0x98>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006132:	230c      	movs	r3, #12
 8006134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800613e:	2303      	movs	r3, #3
 8006140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006142:	2307      	movs	r3, #7
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	4619      	mov	r1, r3
 800614c:	4809      	ldr	r0, [pc, #36]	@ (8006174 <HAL_UART_MspInit+0x9c>)
 800614e:	f001 fd03 	bl	8007b58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	2026      	movs	r0, #38	@ 0x26
 8006158:	f001 fc35 	bl	80079c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800615c:	2026      	movs	r0, #38	@ 0x26
 800615e:	f001 fc4e 	bl	80079fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006162:	bf00      	nop
 8006164:	3728      	adds	r7, #40	@ 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40004400 	.word	0x40004400
 8006170:	40023800 	.word	0x40023800
 8006174:	40020000 	.word	0x40020000

08006178 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8006180:	1d39      	adds	r1, r7, #4
 8006182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006186:	2201      	movs	r2, #1
 8006188:	4803      	ldr	r0, [pc, #12]	@ (8006198 <__io_putchar+0x20>)
 800618a:	f004 f89e 	bl	800a2ca <HAL_UART_Transmit>
return 0;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200094c0 	.word	0x200094c0

0800619c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80061a4:	2201      	movs	r2, #1
 80061a6:	4904      	ldr	r1, [pc, #16]	@ (80061b8 <HAL_UART_RxCpltCallback+0x1c>)
 80061a8:	4804      	ldr	r0, [pc, #16]	@ (80061bc <HAL_UART_RxCpltCallback+0x20>)
 80061aa:	f004 f920 	bl	800a3ee <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	200093c0 	.word	0x200093c0
 80061bc:	200094c0 	.word	0x200094c0

080061c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80061c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80061f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80061c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80061c6:	e003      	b.n	80061d0 <LoopCopyDataInit>

080061c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80061c8:	4b0c      	ldr	r3, [pc, #48]	@ (80061fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80061ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80061cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80061ce:	3104      	adds	r1, #4

080061d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80061d0:	480b      	ldr	r0, [pc, #44]	@ (8006200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80061d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80061d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061d8:	d3f6      	bcc.n	80061c8 <CopyDataInit>
  ldr  r2, =_sbss
 80061da:	4a0b      	ldr	r2, [pc, #44]	@ (8006208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80061dc:	e002      	b.n	80061e4 <LoopFillZerobss>

080061de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061e0:	f842 3b04 	str.w	r3, [r2], #4

080061e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80061e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061e8:	d3f9      	bcc.n	80061de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061ea:	f7ff fe1b 	bl	8005e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061ee:	f007 f805 	bl	800d1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061f2:	f7fe f8f5 	bl	80043e0 <main>
  bx  lr    
 80061f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80061f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80061fc:	08010be8 	.word	0x08010be8
  ldr  r0, =_sdata
 8006200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006204:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8006208:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 800620c:	20009654 	.word	0x20009654

08006210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006210:	e7fe      	b.n	8006210 <ADC_IRQHandler>
	...

08006214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006218:	4b0e      	ldr	r3, [pc, #56]	@ (8006254 <HAL_Init+0x40>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a0d      	ldr	r2, [pc, #52]	@ (8006254 <HAL_Init+0x40>)
 800621e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_Init+0x40>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a0a      	ldr	r2, [pc, #40]	@ (8006254 <HAL_Init+0x40>)
 800622a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800622e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006230:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <HAL_Init+0x40>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a07      	ldr	r2, [pc, #28]	@ (8006254 <HAL_Init+0x40>)
 8006236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800623a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800623c:	2003      	movs	r0, #3
 800623e:	f001 fbb7 	bl	80079b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006242:	2000      	movs	r0, #0
 8006244:	f000 f808 	bl	8006258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006248:	f7ff fa80 	bl	800574c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023c00 	.word	0x40023c00

08006258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006260:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <HAL_InitTick+0x54>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_InitTick+0x58>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	4619      	mov	r1, r3
 800626a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800626e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fbcf 	bl	8007a1a <HAL_SYSTICK_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e00e      	b.n	80062a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d80a      	bhi.n	80062a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800628c:	2200      	movs	r2, #0
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	f001 fb97 	bl	80079c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006298:	4a06      	ldr	r2, [pc, #24]	@ (80062b4 <HAL_InitTick+0x5c>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000040 	.word	0x20000040
 80062b0:	20000048 	.word	0x20000048
 80062b4:	20000044 	.word	0x20000044

080062b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062bc:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <HAL_IncTick+0x20>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <HAL_IncTick+0x24>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	4a04      	ldr	r2, [pc, #16]	@ (80062dc <HAL_IncTick+0x24>)
 80062ca:	6013      	str	r3, [r2, #0]
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000048 	.word	0x20000048
 80062dc:	20009504 	.word	0x20009504

080062e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return uwTick;
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <HAL_GetTick+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20009504 	.word	0x20009504

080062f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006300:	f7ff ffee 	bl	80062e0 <HAL_GetTick>
 8006304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d005      	beq.n	800631e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006312:	4b0a      	ldr	r3, [pc, #40]	@ (800633c <HAL_Delay+0x44>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800631e:	bf00      	nop
 8006320:	f7ff ffde 	bl	80062e0 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	429a      	cmp	r2, r3
 800632e:	d8f7      	bhi.n	8006320 <HAL_Delay+0x28>
  {
  }
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000048 	.word	0x20000048

08006340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e033      	b.n	80063be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fa ff7c 	bl	800125c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d118      	bne.n	80063b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006386:	f023 0302 	bic.w	r3, r3, #2
 800638a:	f043 0202 	orr.w	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fab4 	bl	8006900 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	f043 0201 	orr.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80063ae:	e001      	b.n	80063b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_ADC_Start+0x1a>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0b2      	b.n	8006548 <HAL_ADC_Start+0x180>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d018      	beq.n	800642a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006408:	4b52      	ldr	r3, [pc, #328]	@ (8006554 <HAL_ADC_Start+0x18c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a52      	ldr	r2, [pc, #328]	@ (8006558 <HAL_ADC_Start+0x190>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	0c9a      	lsrs	r2, r3, #18
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800641c:	e002      	b.n	8006424 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3b01      	subs	r3, #1
 8006422:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f9      	bne.n	800641e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d17a      	bne.n	800652e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006440:	f023 0301 	bic.w	r3, r3, #1
 8006444:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006462:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006476:	d106      	bne.n	8006486 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647c:	f023 0206 	bic.w	r2, r3, #6
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	645a      	str	r2, [r3, #68]	@ 0x44
 8006484:	e002      	b.n	800648c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006494:	4b31      	ldr	r3, [pc, #196]	@ (800655c <HAL_ADC_Start+0x194>)
 8006496:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80064a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d12a      	bne.n	8006504 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <HAL_ADC_Start+0x198>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d015      	beq.n	80064e4 <HAL_ADC_Start+0x11c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a29      	ldr	r2, [pc, #164]	@ (8006564 <HAL_ADC_Start+0x19c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d105      	bne.n	80064ce <HAL_ADC_Start+0x106>
 80064c2:	4b26      	ldr	r3, [pc, #152]	@ (800655c <HAL_ADC_Start+0x194>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a25      	ldr	r2, [pc, #148]	@ (8006568 <HAL_ADC_Start+0x1a0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d136      	bne.n	8006546 <HAL_ADC_Start+0x17e>
 80064d8:	4b20      	ldr	r3, [pc, #128]	@ (800655c <HAL_ADC_Start+0x194>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d130      	bne.n	8006546 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d129      	bne.n	8006546 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	e020      	b.n	8006546 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <HAL_ADC_Start+0x198>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d11b      	bne.n	8006546 <HAL_ADC_Start+0x17e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d114      	bne.n	8006546 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	e00b      	b.n	8006546 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f043 0210 	orr.w	r2, r3, #16
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653e:	f043 0201 	orr.w	r2, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000040 	.word	0x20000040
 8006558:	431bde83 	.word	0x431bde83
 800655c:	40012300 	.word	0x40012300
 8006560:	40012000 	.word	0x40012000
 8006564:	40012100 	.word	0x40012100
 8006568:	40012200 	.word	0x40012200

0800656c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006588:	d113      	bne.n	80065b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006598:	d10b      	bne.n	80065b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e063      	b.n	800667a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80065b2:	f7ff fe95 	bl	80062e0 <HAL_GetTick>
 80065b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80065b8:	e021      	b.n	80065fe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d01d      	beq.n	80065fe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d007      	beq.n	80065d8 <HAL_ADC_PollForConversion+0x6c>
 80065c8:	f7ff fe8a 	bl	80062e0 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d212      	bcs.n	80065fe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d00b      	beq.n	80065fe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	f043 0204 	orr.w	r2, r3, #4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e03d      	b.n	800667a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d1d6      	bne.n	80065ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0212 	mvn.w	r2, #18
 8006614:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d123      	bne.n	8006678 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006634:	2b00      	cmp	r3, #0
 8006636:	d11f      	bne.n	8006678 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006650:	2b00      	cmp	r3, #0
 8006652:	d111      	bne.n	8006678 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006670:	f043 0201 	orr.w	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e113      	b.n	80068e0 <HAL_ADC_ConfigChannel+0x244>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d925      	bls.n	8006714 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68d9      	ldr	r1, [r3, #12]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	4613      	mov	r3, r2
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4413      	add	r3, r2
 80066dc:	3b1e      	subs	r3, #30
 80066de:	2207      	movs	r2, #7
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43da      	mvns	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	400a      	ands	r2, r1
 80066ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68d9      	ldr	r1, [r3, #12]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4618      	mov	r0, r3
 8006700:	4603      	mov	r3, r0
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	4403      	add	r3, r0
 8006706:	3b1e      	subs	r3, #30
 8006708:	409a      	lsls	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e022      	b.n	800675a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6919      	ldr	r1, [r3, #16]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	2207      	movs	r2, #7
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43da      	mvns	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	400a      	ands	r2, r1
 8006736:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6919      	ldr	r1, [r3, #16]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	4618      	mov	r0, r3
 800674a:	4603      	mov	r3, r0
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4403      	add	r3, r0
 8006750:	409a      	lsls	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b06      	cmp	r3, #6
 8006760:	d824      	bhi.n	80067ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	3b05      	subs	r3, #5
 8006774:	221f      	movs	r2, #31
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	43da      	mvns	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	400a      	ands	r2, r1
 8006782:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	4618      	mov	r0, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	3b05      	subs	r3, #5
 800679e:	fa00 f203 	lsl.w	r2, r0, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80067aa:	e04c      	b.n	8006846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b0c      	cmp	r3, #12
 80067b2:	d824      	bhi.n	80067fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	3b23      	subs	r3, #35	@ 0x23
 80067c6:	221f      	movs	r2, #31
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	43da      	mvns	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	400a      	ands	r2, r1
 80067d4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4618      	mov	r0, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	3b23      	subs	r3, #35	@ 0x23
 80067f0:	fa00 f203 	lsl.w	r2, r0, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80067fc:	e023      	b.n	8006846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	3b41      	subs	r3, #65	@ 0x41
 8006810:	221f      	movs	r2, #31
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	43da      	mvns	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	400a      	ands	r2, r1
 800681e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4618      	mov	r0, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	3b41      	subs	r3, #65	@ 0x41
 800683a:	fa00 f203 	lsl.w	r2, r0, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006846:	4b29      	ldr	r3, [pc, #164]	@ (80068ec <HAL_ADC_ConfigChannel+0x250>)
 8006848:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a28      	ldr	r2, [pc, #160]	@ (80068f0 <HAL_ADC_ConfigChannel+0x254>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d10f      	bne.n	8006874 <HAL_ADC_ConfigChannel+0x1d8>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b12      	cmp	r3, #18
 800685a:	d10b      	bne.n	8006874 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1d      	ldr	r2, [pc, #116]	@ (80068f0 <HAL_ADC_ConfigChannel+0x254>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d12b      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x23a>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1c      	ldr	r2, [pc, #112]	@ (80068f4 <HAL_ADC_ConfigChannel+0x258>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <HAL_ADC_ConfigChannel+0x1f4>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b11      	cmp	r3, #17
 800688e:	d122      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <HAL_ADC_ConfigChannel+0x258>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80068b2:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <HAL_ADC_ConfigChannel+0x25c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a11      	ldr	r2, [pc, #68]	@ (80068fc <HAL_ADC_ConfigChannel+0x260>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	0c9a      	lsrs	r2, r3, #18
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80068c8:	e002      	b.n	80068d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f9      	bne.n	80068ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	40012300 	.word	0x40012300
 80068f0:	40012000 	.word	0x40012000
 80068f4:	10000012 	.word	0x10000012
 80068f8:	20000040 	.word	0x20000040
 80068fc:	431bde83 	.word	0x431bde83

08006900 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006908:	4b79      	ldr	r3, [pc, #484]	@ (8006af0 <ADC_Init+0x1f0>)
 800690a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	431a      	orrs	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6859      	ldr	r1, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	021a      	lsls	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6859      	ldr	r1, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800697a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6899      	ldr	r1, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006992:	4a58      	ldr	r2, [pc, #352]	@ (8006af4 <ADC_Init+0x1f4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6899      	ldr	r1, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80069c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6899      	ldr	r1, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	e00f      	b.n	80069fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80069fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0202 	bic.w	r2, r2, #2
 8006a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6899      	ldr	r1, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7e1b      	ldrb	r3, [r3, #24]
 8006a18:	005a      	lsls	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01b      	beq.n	8006a64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006a4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6859      	ldr	r1, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	3b01      	subs	r3, #1
 8006a58:	035a      	lsls	r2, r3, #13
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	e007      	b.n	8006a74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	051a      	lsls	r2, r3, #20
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6899      	ldr	r1, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ab6:	025a      	lsls	r2, r3, #9
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6899      	ldr	r1, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	029a      	lsls	r2, r3, #10
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40012300 	.word	0x40012300
 8006af4:	0f000001 	.word	0x0f000001

08006af8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e031      	b.n	8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b18:	4b19      	ldr	r3, [pc, #100]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f023 021f 	bic.w	r2, r3, #31
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	40012300 	.word	0x40012300

08006b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0ed      	b.n	8006d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb f802 	bl	8001bac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0202 	bic.w	r2, r2, #2
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bb8:	f7ff fb92 	bl	80062e0 <HAL_GetTick>
 8006bbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006bbe:	e012      	b.n	8006be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006bc0:	f7ff fb8e 	bl	80062e0 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b0a      	cmp	r3, #10
 8006bcc:	d90b      	bls.n	8006be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2205      	movs	r2, #5
 8006bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e0c5      	b.n	8006d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e5      	bne.n	8006bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c04:	f7ff fb6c 	bl	80062e0 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006c0a:	e012      	b.n	8006c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c0c:	f7ff fb68 	bl	80062e0 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b0a      	cmp	r3, #10
 8006c18:	d90b      	bls.n	8006c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2205      	movs	r2, #5
 8006c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e09f      	b.n	8006d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0e5      	beq.n	8006c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7e1b      	ldrb	r3, [r3, #24]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d108      	bne.n	8006c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e007      	b.n	8006c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7e5b      	ldrb	r3, [r3, #25]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d108      	bne.n	8006c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e007      	b.n	8006c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7e9b      	ldrb	r3, [r3, #26]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d108      	bne.n	8006cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0220 	orr.w	r2, r2, #32
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e007      	b.n	8006cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0220 	bic.w	r2, r2, #32
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	7edb      	ldrb	r3, [r3, #27]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d108      	bne.n	8006cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0210 	bic.w	r2, r2, #16
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	e007      	b.n	8006ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0210 	orr.w	r2, r2, #16
 8006ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7f1b      	ldrb	r3, [r3, #28]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d108      	bne.n	8006d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e007      	b.n	8006d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0208 	bic.w	r2, r2, #8
 8006d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7f5b      	ldrb	r3, [r3, #29]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d108      	bne.n	8006d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0204 	orr.w	r2, r2, #4
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e007      	b.n	8006d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0204 	bic.w	r2, r2, #4
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	ea42 0103 	orr.w	r1, r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d003      	beq.n	8006da2 <HAL_CAN_ConfigFilter+0x26>
 8006d9a:	7cfb      	ldrb	r3, [r7, #19]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	f040 80be 	bne.w	8006f1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006da2:	4b65      	ldr	r3, [pc, #404]	@ (8006f38 <HAL_CAN_ConfigFilter+0x1bc>)
 8006da4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006dbc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	2201      	movs	r2, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	43db      	mvns	r3, r3
 8006df4:	401a      	ands	r2, r3
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d123      	bne.n	8006e4c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	401a      	ands	r2, r3
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006e26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3248      	adds	r2, #72	@ 0x48
 8006e2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e42:	6979      	ldr	r1, [r7, #20]
 8006e44:	3348      	adds	r3, #72	@ 0x48
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d122      	bne.n	8006e9a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006e74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	3248      	adds	r2, #72	@ 0x48
 8006e7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e90:	6979      	ldr	r1, [r7, #20]
 8006e92:	3348      	adds	r3, #72	@ 0x48
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	440b      	add	r3, r1
 8006e98:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	401a      	ands	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006eb4:	e007      	b.n	8006ec6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	401a      	ands	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006ee0:	e007      	b.n	8006ef2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d107      	bne.n	8006f0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006f10:	f023 0201 	bic.w	r2, r3, #1
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e006      	b.n	8006f2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40006400 	.word	0x40006400

08006f3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d12e      	bne.n	8006fae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f68:	f7ff f9ba 	bl	80062e0 <HAL_GetTick>
 8006f6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006f6e:	e012      	b.n	8006f96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f70:	f7ff f9b6 	bl	80062e0 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b0a      	cmp	r3, #10
 8006f7c:	d90b      	bls.n	8006f96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e012      	b.n	8006fbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e5      	bne.n	8006f70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e006      	b.n	8006fbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b089      	sub	sp, #36	@ 0x24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006fe2:	7ffb      	ldrb	r3, [r7, #31]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d003      	beq.n	8006ff0 <HAL_CAN_AddTxMessage+0x2c>
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	f040 80b8 	bne.w	8007160 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80a0 	beq.w	8007150 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	0e1b      	lsrs	r3, r3, #24
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d907      	bls.n	8007030 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e09e      	b.n	800716e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007030:	2201      	movs	r2, #1
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	409a      	lsls	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800704c:	68f9      	ldr	r1, [r7, #12]
 800704e:	6809      	ldr	r1, [r1, #0]
 8007050:	431a      	orrs	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	3318      	adds	r3, #24
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	440b      	add	r3, r1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e00f      	b.n	800707e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007068:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007072:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	3318      	adds	r3, #24
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	440b      	add	r3, r1
 800707c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6819      	ldr	r1, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	3318      	adds	r3, #24
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	440b      	add	r3, r1
 800708e:	3304      	adds	r3, #4
 8007090:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	7d1b      	ldrb	r3, [r3, #20]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d111      	bne.n	80070be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	3318      	adds	r3, #24
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	4413      	add	r3, r2
 80070a6:	3304      	adds	r3, #4
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	6811      	ldr	r1, [r2, #0]
 80070ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3318      	adds	r3, #24
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	440b      	add	r3, r1
 80070ba:	3304      	adds	r3, #4
 80070bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3307      	adds	r3, #7
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	061a      	lsls	r2, r3, #24
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3306      	adds	r3, #6
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	041b      	lsls	r3, r3, #16
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3305      	adds	r3, #5
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	4313      	orrs	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	3204      	adds	r2, #4
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	4610      	mov	r0, r2
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	6811      	ldr	r1, [r2, #0]
 80070e6:	ea43 0200 	orr.w	r2, r3, r0
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	440b      	add	r3, r1
 80070f0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80070f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3303      	adds	r3, #3
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	061a      	lsls	r2, r3, #24
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3302      	adds	r3, #2
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3301      	adds	r3, #1
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	4313      	orrs	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	4610      	mov	r0, r2
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	6811      	ldr	r1, [r2, #0]
 800711c:	ea43 0200 	orr.w	r2, r3, r0
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	440b      	add	r3, r1
 8007126:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800712a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3318      	adds	r3, #24
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	4413      	add	r3, r2
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	f043 0201 	orr.w	r2, r3, #1
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	3318      	adds	r3, #24
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	440b      	add	r3, r1
 800714a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e00e      	b.n	800716e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e006      	b.n	800716e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007164:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
  }
}
 800716e:	4618      	mov	r0, r3
 8007170:	3724      	adds	r7, #36	@ 0x24
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800717a:	b480      	push	{r7}
 800717c:	b087      	sub	sp, #28
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800718e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d003      	beq.n	800719e <HAL_CAN_GetRxMessage+0x24>
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	2b02      	cmp	r3, #2
 800719a:	f040 80f3 	bne.w	8007384 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10e      	bne.n	80071c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d116      	bne.n	80071e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0e7      	b.n	8007392 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d107      	bne.n	80071e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0d8      	b.n	8007392 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	331b      	adds	r3, #27
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	4413      	add	r3, r2
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0204 	and.w	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10c      	bne.n	8007218 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	331b      	adds	r3, #27
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	0d5b      	lsrs	r3, r3, #21
 800720e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	e00b      	b.n	8007230 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	331b      	adds	r3, #27
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	4413      	add	r3, r2
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	331b      	adds	r3, #27
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	4413      	add	r3, r2
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0202 	and.w	r2, r3, #2
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	331b      	adds	r3, #27
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	4413      	add	r3, r2
 8007252:	3304      	adds	r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 020f 	and.w	r2, r3, #15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	331b      	adds	r3, #27
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	4413      	add	r3, r2
 800726a:	3304      	adds	r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	b2da      	uxtb	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	331b      	adds	r3, #27
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	4413      	add	r3, r2
 8007282:	3304      	adds	r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	4413      	add	r3, r2
 8007298:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0a1a      	lsrs	r2, r3, #8
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	3301      	adds	r3, #1
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	0c1a      	lsrs	r2, r3, #16
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	3302      	adds	r3, #2
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	0e1a      	lsrs	r2, r3, #24
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	3303      	adds	r3, #3
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	3304      	adds	r3, #4
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	4413      	add	r3, r2
 8007314:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	0a1a      	lsrs	r2, r3, #8
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	3305      	adds	r3, #5
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	4413      	add	r3, r2
 800732e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	0c1a      	lsrs	r2, r3, #16
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	3306      	adds	r3, #6
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	4413      	add	r3, r2
 8007348:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	0e1a      	lsrs	r2, r3, #24
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	3307      	adds	r3, #7
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d108      	bne.n	8007370 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0220 	orr.w	r2, r2, #32
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	e007      	b.n	8007380 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691a      	ldr	r2, [r3, #16]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0220 	orr.w	r2, r2, #32
 800737e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	e006      	b.n	8007392 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007388:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b08a      	sub	sp, #40	@ 0x28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d07c      	beq.n	80074de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d023      	beq.n	8007436 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2201      	movs	r2, #1
 80073f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f983 	bl	800770c <HAL_CAN_TxMailbox0CompleteCallback>
 8007406:	e016      	b.n	8007436 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
 800741a:	e00c      	b.n	8007436 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e002      	b.n	8007436 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f989 	bl	8007748 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d024      	beq.n	800748a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f963 	bl	8007720 <HAL_CAN_TxMailbox1CompleteCallback>
 800745a:	e016      	b.n	800748a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
 800746e:	e00c      	b.n	800748a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24
 8007482:	e002      	b.n	800748a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f969 	bl	800775c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d024      	beq.n	80074de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800749c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f943 	bl	8007734 <HAL_CAN_TxMailbox2CompleteCallback>
 80074ae:	e016      	b.n	80074de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c2:	e00c      	b.n	80074de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d004      	beq.n	80074d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d6:	e002      	b.n	80074de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f949 	bl	8007770 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00c      	beq.n	8007502 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2210      	movs	r2, #16
 8007500:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d006      	beq.n	8007524 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2208      	movs	r2, #8
 800751c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f93a 	bl	8007798 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f921 	bl	8007784 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00c      	beq.n	8007566 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f003 0310 	and.w	r3, r3, #16
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2210      	movs	r2, #16
 8007564:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d006      	beq.n	8007588 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2208      	movs	r2, #8
 8007580:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f91c 	bl	80077c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f903 	bl	80077ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d006      	beq.n	80075c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2210      	movs	r2, #16
 80075c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f906 	bl	80077d4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8ff 	bl	80077e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d07b      	beq.n	80076ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d072      	beq.n	80076e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d008      	beq.n	800761a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	f043 0302 	orr.w	r3, r3, #2
 8007634:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800763c:	2b00      	cmp	r3, #0
 800763e:	d008      	beq.n	8007652 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007658:	2b00      	cmp	r3, #0
 800765a:	d043      	beq.n	80076e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007662:	2b00      	cmp	r3, #0
 8007664:	d03e      	beq.n	80076e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800766c:	2b60      	cmp	r3, #96	@ 0x60
 800766e:	d02b      	beq.n	80076c8 <HAL_CAN_IRQHandler+0x32a>
 8007670:	2b60      	cmp	r3, #96	@ 0x60
 8007672:	d82e      	bhi.n	80076d2 <HAL_CAN_IRQHandler+0x334>
 8007674:	2b50      	cmp	r3, #80	@ 0x50
 8007676:	d022      	beq.n	80076be <HAL_CAN_IRQHandler+0x320>
 8007678:	2b50      	cmp	r3, #80	@ 0x50
 800767a:	d82a      	bhi.n	80076d2 <HAL_CAN_IRQHandler+0x334>
 800767c:	2b40      	cmp	r3, #64	@ 0x40
 800767e:	d019      	beq.n	80076b4 <HAL_CAN_IRQHandler+0x316>
 8007680:	2b40      	cmp	r3, #64	@ 0x40
 8007682:	d826      	bhi.n	80076d2 <HAL_CAN_IRQHandler+0x334>
 8007684:	2b30      	cmp	r3, #48	@ 0x30
 8007686:	d010      	beq.n	80076aa <HAL_CAN_IRQHandler+0x30c>
 8007688:	2b30      	cmp	r3, #48	@ 0x30
 800768a:	d822      	bhi.n	80076d2 <HAL_CAN_IRQHandler+0x334>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d002      	beq.n	8007696 <HAL_CAN_IRQHandler+0x2f8>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d005      	beq.n	80076a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007694:	e01d      	b.n	80076d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	f043 0308 	orr.w	r3, r3, #8
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800769e:	e019      	b.n	80076d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	f043 0310 	orr.w	r3, r3, #16
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80076a8:	e014      	b.n	80076d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	f043 0320 	orr.w	r3, r3, #32
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80076b2:	e00f      	b.n	80076d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80076bc:	e00a      	b.n	80076d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80076c6:	e005      	b.n	80076d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80076d0:	e000      	b.n	80076d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80076d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80076e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2204      	movs	r2, #4
 80076ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f87c 	bl	80077fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007704:	bf00      	nop
 8007706:	3728      	adds	r7, #40	@ 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007820:	4b0c      	ldr	r3, [pc, #48]	@ (8007854 <__NVIC_SetPriorityGrouping+0x44>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800782c:	4013      	ands	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800783c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007842:	4a04      	ldr	r2, [pc, #16]	@ (8007854 <__NVIC_SetPriorityGrouping+0x44>)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	60d3      	str	r3, [r2, #12]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800785c:	4b04      	ldr	r3, [pc, #16]	@ (8007870 <__NVIC_GetPriorityGrouping+0x18>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	0a1b      	lsrs	r3, r3, #8
 8007862:	f003 0307 	and.w	r3, r3, #7
}
 8007866:	4618      	mov	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800787e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007882:	2b00      	cmp	r3, #0
 8007884:	db0b      	blt.n	800789e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	f003 021f 	and.w	r2, r3, #31
 800788c:	4907      	ldr	r1, [pc, #28]	@ (80078ac <__NVIC_EnableIRQ+0x38>)
 800788e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	2001      	movs	r0, #1
 8007896:	fa00 f202 	lsl.w	r2, r0, r2
 800789a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	e000e100 	.word	0xe000e100

080078b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	db0a      	blt.n	80078da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	490c      	ldr	r1, [pc, #48]	@ (80078fc <__NVIC_SetPriority+0x4c>)
 80078ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ce:	0112      	lsls	r2, r2, #4
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	440b      	add	r3, r1
 80078d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078d8:	e00a      	b.n	80078f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	4908      	ldr	r1, [pc, #32]	@ (8007900 <__NVIC_SetPriority+0x50>)
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	3b04      	subs	r3, #4
 80078e8:	0112      	lsls	r2, r2, #4
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	440b      	add	r3, r1
 80078ee:	761a      	strb	r2, [r3, #24]
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	e000e100 	.word	0xe000e100
 8007900:	e000ed00 	.word	0xe000ed00

08007904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007904:	b480      	push	{r7}
 8007906:	b089      	sub	sp, #36	@ 0x24
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f1c3 0307 	rsb	r3, r3, #7
 800791e:	2b04      	cmp	r3, #4
 8007920:	bf28      	it	cs
 8007922:	2304      	movcs	r3, #4
 8007924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	3304      	adds	r3, #4
 800792a:	2b06      	cmp	r3, #6
 800792c:	d902      	bls.n	8007934 <NVIC_EncodePriority+0x30>
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	3b03      	subs	r3, #3
 8007932:	e000      	b.n	8007936 <NVIC_EncodePriority+0x32>
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	43da      	mvns	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	401a      	ands	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800794c:	f04f 31ff 	mov.w	r1, #4294967295
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	fa01 f303 	lsl.w	r3, r1, r3
 8007956:	43d9      	mvns	r1, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800795c:	4313      	orrs	r3, r2
         );
}
 800795e:	4618      	mov	r0, r3
 8007960:	3724      	adds	r7, #36	@ 0x24
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3b01      	subs	r3, #1
 8007978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800797c:	d301      	bcc.n	8007982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800797e:	2301      	movs	r3, #1
 8007980:	e00f      	b.n	80079a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007982:	4a0a      	ldr	r2, [pc, #40]	@ (80079ac <SysTick_Config+0x40>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3b01      	subs	r3, #1
 8007988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800798a:	210f      	movs	r1, #15
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	f7ff ff8e 	bl	80078b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007994:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <SysTick_Config+0x40>)
 8007996:	2200      	movs	r2, #0
 8007998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800799a:	4b04      	ldr	r3, [pc, #16]	@ (80079ac <SysTick_Config+0x40>)
 800799c:	2207      	movs	r2, #7
 800799e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	e000e010 	.word	0xe000e010

080079b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff29 	bl	8007810 <__NVIC_SetPriorityGrouping>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	4603      	mov	r3, r0
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079d8:	f7ff ff3e 	bl	8007858 <__NVIC_GetPriorityGrouping>
 80079dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	6978      	ldr	r0, [r7, #20]
 80079e4:	f7ff ff8e 	bl	8007904 <NVIC_EncodePriority>
 80079e8:	4602      	mov	r2, r0
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff ff5d 	bl	80078b0 <__NVIC_SetPriority>
}
 80079f6:	bf00      	nop
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	4603      	mov	r3, r0
 8007a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ff31 	bl	8007874 <__NVIC_EnableIRQ>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff ffa2 	bl	800796c <SysTick_Config>
 8007a28:	4603      	mov	r3, r0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a40:	f7fe fc4e 	bl	80062e0 <HAL_GetTick>
 8007a44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d008      	beq.n	8007a64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2280      	movs	r2, #128	@ 0x80
 8007a56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e052      	b.n	8007b0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0216 	bic.w	r2, r2, #22
 8007a72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695a      	ldr	r2, [r3, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <HAL_DMA_Abort+0x62>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0208 	bic.w	r2, r2, #8
 8007aa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ab4:	e013      	b.n	8007ade <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ab6:	f7fe fc13 	bl	80062e0 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d90c      	bls.n	8007ade <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e015      	b.n	8007b0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e4      	bne.n	8007ab6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af0:	223f      	movs	r2, #63	@ 0x3f
 8007af2:	409a      	lsls	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d004      	beq.n	8007b30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2280      	movs	r2, #128	@ 0x80
 8007b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e00c      	b.n	8007b4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2205      	movs	r2, #5
 8007b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b089      	sub	sp, #36	@ 0x24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	e165      	b.n	8007e40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b74:	2201      	movs	r2, #1
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4013      	ands	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	f040 8154 	bne.w	8007e3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d005      	beq.n	8007baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d130      	bne.n	8007c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007be0:	2201      	movs	r2, #1
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	43db      	mvns	r3, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	4013      	ands	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	f003 0201 	and.w	r2, r3, #1
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d017      	beq.n	8007c48 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	2203      	movs	r2, #3
 8007c24:	fa02 f303 	lsl.w	r3, r2, r3
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d123      	bne.n	8007c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	08da      	lsrs	r2, r3, #3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3208      	adds	r2, #8
 8007c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	220f      	movs	r2, #15
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	43db      	mvns	r3, r3
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	4013      	ands	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	691a      	ldr	r2, [r3, #16]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	08da      	lsrs	r2, r3, #3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3208      	adds	r2, #8
 8007c96:	69b9      	ldr	r1, [r7, #24]
 8007c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	43db      	mvns	r3, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 0203 	and.w	r2, r3, #3
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80ae 	beq.w	8007e3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8007e58 <HAL_GPIO_Init+0x300>)
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce6:	4a5c      	ldr	r2, [pc, #368]	@ (8007e58 <HAL_GPIO_Init+0x300>)
 8007ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cee:	4b5a      	ldr	r3, [pc, #360]	@ (8007e58 <HAL_GPIO_Init+0x300>)
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cfa:	4a58      	ldr	r2, [pc, #352]	@ (8007e5c <HAL_GPIO_Init+0x304>)
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	089b      	lsrs	r3, r3, #2
 8007d00:	3302      	adds	r3, #2
 8007d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	220f      	movs	r2, #15
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	43db      	mvns	r3, r3
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a4f      	ldr	r2, [pc, #316]	@ (8007e60 <HAL_GPIO_Init+0x308>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d025      	beq.n	8007d72 <HAL_GPIO_Init+0x21a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a4e      	ldr	r2, [pc, #312]	@ (8007e64 <HAL_GPIO_Init+0x30c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d01f      	beq.n	8007d6e <HAL_GPIO_Init+0x216>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a4d      	ldr	r2, [pc, #308]	@ (8007e68 <HAL_GPIO_Init+0x310>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d019      	beq.n	8007d6a <HAL_GPIO_Init+0x212>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a4c      	ldr	r2, [pc, #304]	@ (8007e6c <HAL_GPIO_Init+0x314>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d013      	beq.n	8007d66 <HAL_GPIO_Init+0x20e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a4b      	ldr	r2, [pc, #300]	@ (8007e70 <HAL_GPIO_Init+0x318>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00d      	beq.n	8007d62 <HAL_GPIO_Init+0x20a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a4a      	ldr	r2, [pc, #296]	@ (8007e74 <HAL_GPIO_Init+0x31c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <HAL_GPIO_Init+0x206>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a49      	ldr	r2, [pc, #292]	@ (8007e78 <HAL_GPIO_Init+0x320>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d101      	bne.n	8007d5a <HAL_GPIO_Init+0x202>
 8007d56:	2306      	movs	r3, #6
 8007d58:	e00c      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d5a:	2307      	movs	r3, #7
 8007d5c:	e00a      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d5e:	2305      	movs	r3, #5
 8007d60:	e008      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d62:	2304      	movs	r3, #4
 8007d64:	e006      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d66:	2303      	movs	r3, #3
 8007d68:	e004      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e002      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <HAL_GPIO_Init+0x21c>
 8007d72:	2300      	movs	r3, #0
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	f002 0203 	and.w	r2, r2, #3
 8007d7a:	0092      	lsls	r2, r2, #2
 8007d7c:	4093      	lsls	r3, r2
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d84:	4935      	ldr	r1, [pc, #212]	@ (8007e5c <HAL_GPIO_Init+0x304>)
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	089b      	lsrs	r3, r3, #2
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d92:	4b3a      	ldr	r3, [pc, #232]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007db6:	4a31      	ldr	r2, [pc, #196]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007de0:	4a26      	ldr	r2, [pc, #152]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007de6:	4b25      	ldr	r3, [pc, #148]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	43db      	mvns	r3, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4013      	ands	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e10:	4b1a      	ldr	r3, [pc, #104]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e34:	4a11      	ldr	r2, [pc, #68]	@ (8007e7c <HAL_GPIO_Init+0x324>)
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	f67f ae96 	bls.w	8007b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	3724      	adds	r7, #36	@ 0x24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	40013800 	.word	0x40013800
 8007e60:	40020000 	.word	0x40020000
 8007e64:	40020400 	.word	0x40020400
 8007e68:	40020800 	.word	0x40020800
 8007e6c:	40020c00 	.word	0x40020c00
 8007e70:	40021000 	.word	0x40021000
 8007e74:	40021400 	.word	0x40021400
 8007e78:	40021800 	.word	0x40021800
 8007e7c:	40013c00 	.word	0x40013c00

08007e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e90:	787b      	ldrb	r3, [r7, #1]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e9c:	e003      	b.n	8007ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e9e:	887b      	ldrh	r3, [r7, #2]
 8007ea0:	041a      	lsls	r2, r3, #16
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	619a      	str	r2, [r3, #24]
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
	...

08007eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4b20      	ldr	r3, [pc, #128]	@ (8007f44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ece:	4b1d      	ldr	r3, [pc, #116]	@ (8007f44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007eda:	4b1b      	ldr	r3, [pc, #108]	@ (8007f48 <HAL_PWREx_EnableOverDrive+0x94>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ee0:	f7fe f9fe 	bl	80062e0 <HAL_GetTick>
 8007ee4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ee6:	e009      	b.n	8007efc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ee8:	f7fe f9fa 	bl	80062e0 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ef6:	d901      	bls.n	8007efc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e01f      	b.n	8007f3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007efc:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f08:	d1ee      	bne.n	8007ee8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007f0a:	4b11      	ldr	r3, [pc, #68]	@ (8007f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f10:	f7fe f9e6 	bl	80062e0 <HAL_GetTick>
 8007f14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f16:	e009      	b.n	8007f2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f18:	f7fe f9e2 	bl	80062e0 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f26:	d901      	bls.n	8007f2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e007      	b.n	8007f3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f2c:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f38:	d1ee      	bne.n	8007f18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40023800 	.word	0x40023800
 8007f48:	420e0040 	.word	0x420e0040
 8007f4c:	40007000 	.word	0x40007000
 8007f50:	420e0044 	.word	0x420e0044

08007f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e0cc      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f68:	4b68      	ldr	r3, [pc, #416]	@ (800810c <HAL_RCC_ClockConfig+0x1b8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d90c      	bls.n	8007f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f76:	4b65      	ldr	r3, [pc, #404]	@ (800810c <HAL_RCC_ClockConfig+0x1b8>)
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f7e:	4b63      	ldr	r3, [pc, #396]	@ (800810c <HAL_RCC_ClockConfig+0x1b8>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e0b8      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d020      	beq.n	8007fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fa8:	4b59      	ldr	r3, [pc, #356]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	4a58      	ldr	r2, [pc, #352]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007fae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fc0:	4b53      	ldr	r3, [pc, #332]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4a52      	ldr	r2, [pc, #328]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fcc:	4b50      	ldr	r3, [pc, #320]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	494d      	ldr	r1, [pc, #308]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d044      	beq.n	8008074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff2:	4b47      	ldr	r3, [pc, #284]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d119      	bne.n	8008032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e07f      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d003      	beq.n	8008012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800800e:	2b03      	cmp	r3, #3
 8008010:	d107      	bne.n	8008022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008012:	4b3f      	ldr	r3, [pc, #252]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d109      	bne.n	8008032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e06f      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008022:	4b3b      	ldr	r3, [pc, #236]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e067      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008032:	4b37      	ldr	r3, [pc, #220]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f023 0203 	bic.w	r2, r3, #3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	4934      	ldr	r1, [pc, #208]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8008040:	4313      	orrs	r3, r2
 8008042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008044:	f7fe f94c 	bl	80062e0 <HAL_GetTick>
 8008048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800804a:	e00a      	b.n	8008062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800804c:	f7fe f948 	bl	80062e0 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805a:	4293      	cmp	r3, r2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e04f      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008062:	4b2b      	ldr	r3, [pc, #172]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 020c 	and.w	r2, r3, #12
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	429a      	cmp	r2, r3
 8008072:	d1eb      	bne.n	800804c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008074:	4b25      	ldr	r3, [pc, #148]	@ (800810c <HAL_RCC_ClockConfig+0x1b8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d20c      	bcs.n	800809c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008082:	4b22      	ldr	r3, [pc, #136]	@ (800810c <HAL_RCC_ClockConfig+0x1b8>)
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800808a:	4b20      	ldr	r3, [pc, #128]	@ (800810c <HAL_RCC_ClockConfig+0x1b8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d001      	beq.n	800809c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e032      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080a8:	4b19      	ldr	r3, [pc, #100]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4916      	ldr	r1, [pc, #88]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080c6:	4b12      	ldr	r3, [pc, #72]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	490e      	ldr	r1, [pc, #56]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080da:	f000 f855 	bl	8008188 <HAL_RCC_GetSysClockFreq>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <HAL_RCC_ClockConfig+0x1bc>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	490a      	ldr	r1, [pc, #40]	@ (8008114 <HAL_RCC_ClockConfig+0x1c0>)
 80080ec:	5ccb      	ldrb	r3, [r1, r3]
 80080ee:	fa22 f303 	lsr.w	r3, r2, r3
 80080f2:	4a09      	ldr	r2, [pc, #36]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 80080f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080f6:	4b09      	ldr	r3, [pc, #36]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f8ac 	bl	8006258 <HAL_InitTick>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40023c00 	.word	0x40023c00
 8008110:	40023800 	.word	0x40023800
 8008114:	08010760 	.word	0x08010760
 8008118:	20000040 	.word	0x20000040
 800811c:	20000044 	.word	0x20000044

08008120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008124:	4b03      	ldr	r3, [pc, #12]	@ (8008134 <HAL_RCC_GetHCLKFreq+0x14>)
 8008126:	681b      	ldr	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	20000040 	.word	0x20000040

08008138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800813c:	f7ff fff0 	bl	8008120 <HAL_RCC_GetHCLKFreq>
 8008140:	4602      	mov	r2, r0
 8008142:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	0a9b      	lsrs	r3, r3, #10
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	4903      	ldr	r1, [pc, #12]	@ (800815c <HAL_RCC_GetPCLK1Freq+0x24>)
 800814e:	5ccb      	ldrb	r3, [r1, r3]
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40023800 	.word	0x40023800
 800815c:	08010770 	.word	0x08010770

08008160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008164:	f7ff ffdc 	bl	8008120 <HAL_RCC_GetHCLKFreq>
 8008168:	4602      	mov	r2, r0
 800816a:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	0b5b      	lsrs	r3, r3, #13
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	4903      	ldr	r1, [pc, #12]	@ (8008184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008176:	5ccb      	ldrb	r3, [r1, r3]
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40023800 	.word	0x40023800
 8008184:	08010770 	.word	0x08010770

08008188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800818c:	b0ae      	sub	sp, #184	@ 0xb8
 800818e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ae:	4bcb      	ldr	r3, [pc, #812]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 030c 	and.w	r3, r3, #12
 80081b6:	2b0c      	cmp	r3, #12
 80081b8:	f200 8206 	bhi.w	80085c8 <HAL_RCC_GetSysClockFreq+0x440>
 80081bc:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081f9 	.word	0x080081f9
 80081c8:	080085c9 	.word	0x080085c9
 80081cc:	080085c9 	.word	0x080085c9
 80081d0:	080085c9 	.word	0x080085c9
 80081d4:	08008201 	.word	0x08008201
 80081d8:	080085c9 	.word	0x080085c9
 80081dc:	080085c9 	.word	0x080085c9
 80081e0:	080085c9 	.word	0x080085c9
 80081e4:	08008209 	.word	0x08008209
 80081e8:	080085c9 	.word	0x080085c9
 80081ec:	080085c9 	.word	0x080085c9
 80081f0:	080085c9 	.word	0x080085c9
 80081f4:	080083f9 	.word	0x080083f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081f8:	4bb9      	ldr	r3, [pc, #740]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80081fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80081fe:	e1e7      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008200:	4bb8      	ldr	r3, [pc, #736]	@ (80084e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008206:	e1e3      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008208:	4bb4      	ldr	r3, [pc, #720]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008214:	4bb1      	ldr	r3, [pc, #708]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d071      	beq.n	8008304 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008220:	4bae      	ldr	r3, [pc, #696]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	099b      	lsrs	r3, r3, #6
 8008226:	2200      	movs	r2, #0
 8008228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800822c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008238:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008246:	4622      	mov	r2, r4
 8008248:	462b      	mov	r3, r5
 800824a:	f04f 0000 	mov.w	r0, #0
 800824e:	f04f 0100 	mov.w	r1, #0
 8008252:	0159      	lsls	r1, r3, #5
 8008254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008258:	0150      	lsls	r0, r2, #5
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4621      	mov	r1, r4
 8008260:	1a51      	subs	r1, r2, r1
 8008262:	6439      	str	r1, [r7, #64]	@ 0x40
 8008264:	4629      	mov	r1, r5
 8008266:	eb63 0301 	sbc.w	r3, r3, r1
 800826a:	647b      	str	r3, [r7, #68]	@ 0x44
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008278:	4649      	mov	r1, r9
 800827a:	018b      	lsls	r3, r1, #6
 800827c:	4641      	mov	r1, r8
 800827e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008282:	4641      	mov	r1, r8
 8008284:	018a      	lsls	r2, r1, #6
 8008286:	4641      	mov	r1, r8
 8008288:	1a51      	subs	r1, r2, r1
 800828a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800828c:	4649      	mov	r1, r9
 800828e:	eb63 0301 	sbc.w	r3, r3, r1
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80082a0:	4649      	mov	r1, r9
 80082a2:	00cb      	lsls	r3, r1, #3
 80082a4:	4641      	mov	r1, r8
 80082a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082aa:	4641      	mov	r1, r8
 80082ac:	00ca      	lsls	r2, r1, #3
 80082ae:	4610      	mov	r0, r2
 80082b0:	4619      	mov	r1, r3
 80082b2:	4603      	mov	r3, r0
 80082b4:	4622      	mov	r2, r4
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ba:	462b      	mov	r3, r5
 80082bc:	460a      	mov	r2, r1
 80082be:	eb42 0303 	adc.w	r3, r2, r3
 80082c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80082d0:	4629      	mov	r1, r5
 80082d2:	024b      	lsls	r3, r1, #9
 80082d4:	4621      	mov	r1, r4
 80082d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082da:	4621      	mov	r1, r4
 80082dc:	024a      	lsls	r2, r1, #9
 80082de:	4610      	mov	r0, r2
 80082e0:	4619      	mov	r1, r3
 80082e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80082f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80082f4:	f7f8 fce8 	bl	8000cc8 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4613      	mov	r3, r2
 80082fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008302:	e067      	b.n	80083d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008304:	4b75      	ldr	r3, [pc, #468]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	099b      	lsrs	r3, r3, #6
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008310:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008314:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800831e:	2300      	movs	r3, #0
 8008320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008322:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008326:	4622      	mov	r2, r4
 8008328:	462b      	mov	r3, r5
 800832a:	f04f 0000 	mov.w	r0, #0
 800832e:	f04f 0100 	mov.w	r1, #0
 8008332:	0159      	lsls	r1, r3, #5
 8008334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008338:	0150      	lsls	r0, r2, #5
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4621      	mov	r1, r4
 8008340:	1a51      	subs	r1, r2, r1
 8008342:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008344:	4629      	mov	r1, r5
 8008346:	eb63 0301 	sbc.w	r3, r3, r1
 800834a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008358:	4649      	mov	r1, r9
 800835a:	018b      	lsls	r3, r1, #6
 800835c:	4641      	mov	r1, r8
 800835e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008362:	4641      	mov	r1, r8
 8008364:	018a      	lsls	r2, r1, #6
 8008366:	4641      	mov	r1, r8
 8008368:	ebb2 0a01 	subs.w	sl, r2, r1
 800836c:	4649      	mov	r1, r9
 800836e:	eb63 0b01 	sbc.w	fp, r3, r1
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800837e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008386:	4692      	mov	sl, r2
 8008388:	469b      	mov	fp, r3
 800838a:	4623      	mov	r3, r4
 800838c:	eb1a 0303 	adds.w	r3, sl, r3
 8008390:	623b      	str	r3, [r7, #32]
 8008392:	462b      	mov	r3, r5
 8008394:	eb4b 0303 	adc.w	r3, fp, r3
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
 800839a:	f04f 0200 	mov.w	r2, #0
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80083a6:	4629      	mov	r1, r5
 80083a8:	028b      	lsls	r3, r1, #10
 80083aa:	4621      	mov	r1, r4
 80083ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083b0:	4621      	mov	r1, r4
 80083b2:	028a      	lsls	r2, r1, #10
 80083b4:	4610      	mov	r0, r2
 80083b6:	4619      	mov	r1, r3
 80083b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083bc:	2200      	movs	r2, #0
 80083be:	673b      	str	r3, [r7, #112]	@ 0x70
 80083c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80083c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80083c6:	f7f8 fc7f 	bl	8000cc8 <__aeabi_uldivmod>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4613      	mov	r3, r2
 80083d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80083d4:	4b41      	ldr	r3, [pc, #260]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	3301      	adds	r3, #1
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80083e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80083f6:	e0eb      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083f8:	4b38      	ldr	r3, [pc, #224]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008404:	4b35      	ldr	r3, [pc, #212]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d06b      	beq.n	80084e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008410:	4b32      	ldr	r3, [pc, #200]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x354>)
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	099b      	lsrs	r3, r3, #6
 8008416:	2200      	movs	r2, #0
 8008418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800841a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800841c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800841e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008422:	663b      	str	r3, [r7, #96]	@ 0x60
 8008424:	2300      	movs	r3, #0
 8008426:	667b      	str	r3, [r7, #100]	@ 0x64
 8008428:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800842c:	4622      	mov	r2, r4
 800842e:	462b      	mov	r3, r5
 8008430:	f04f 0000 	mov.w	r0, #0
 8008434:	f04f 0100 	mov.w	r1, #0
 8008438:	0159      	lsls	r1, r3, #5
 800843a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800843e:	0150      	lsls	r0, r2, #5
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4621      	mov	r1, r4
 8008446:	1a51      	subs	r1, r2, r1
 8008448:	61b9      	str	r1, [r7, #24]
 800844a:	4629      	mov	r1, r5
 800844c:	eb63 0301 	sbc.w	r3, r3, r1
 8008450:	61fb      	str	r3, [r7, #28]
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800845e:	4659      	mov	r1, fp
 8008460:	018b      	lsls	r3, r1, #6
 8008462:	4651      	mov	r1, sl
 8008464:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008468:	4651      	mov	r1, sl
 800846a:	018a      	lsls	r2, r1, #6
 800846c:	4651      	mov	r1, sl
 800846e:	ebb2 0801 	subs.w	r8, r2, r1
 8008472:	4659      	mov	r1, fp
 8008474:	eb63 0901 	sbc.w	r9, r3, r1
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008484:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008488:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800848c:	4690      	mov	r8, r2
 800848e:	4699      	mov	r9, r3
 8008490:	4623      	mov	r3, r4
 8008492:	eb18 0303 	adds.w	r3, r8, r3
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	462b      	mov	r3, r5
 800849a:	eb49 0303 	adc.w	r3, r9, r3
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80084ac:	4629      	mov	r1, r5
 80084ae:	024b      	lsls	r3, r1, #9
 80084b0:	4621      	mov	r1, r4
 80084b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80084b6:	4621      	mov	r1, r4
 80084b8:	024a      	lsls	r2, r1, #9
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c2:	2200      	movs	r2, #0
 80084c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80084c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80084cc:	f7f8 fbfc 	bl	8000cc8 <__aeabi_uldivmod>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4613      	mov	r3, r2
 80084d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084da:	e065      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x420>
 80084dc:	40023800 	.word	0x40023800
 80084e0:	00f42400 	.word	0x00f42400
 80084e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084e8:	4b3d      	ldr	r3, [pc, #244]	@ (80085e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	099b      	lsrs	r3, r3, #6
 80084ee:	2200      	movs	r2, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	4611      	mov	r1, r2
 80084f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80084fa:	2300      	movs	r3, #0
 80084fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80084fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008502:	4642      	mov	r2, r8
 8008504:	464b      	mov	r3, r9
 8008506:	f04f 0000 	mov.w	r0, #0
 800850a:	f04f 0100 	mov.w	r1, #0
 800850e:	0159      	lsls	r1, r3, #5
 8008510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008514:	0150      	lsls	r0, r2, #5
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4641      	mov	r1, r8
 800851c:	1a51      	subs	r1, r2, r1
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	4649      	mov	r1, r9
 8008522:	eb63 0301 	sbc.w	r3, r3, r1
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008534:	4659      	mov	r1, fp
 8008536:	018b      	lsls	r3, r1, #6
 8008538:	4651      	mov	r1, sl
 800853a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800853e:	4651      	mov	r1, sl
 8008540:	018a      	lsls	r2, r1, #6
 8008542:	4651      	mov	r1, sl
 8008544:	1a54      	subs	r4, r2, r1
 8008546:	4659      	mov	r1, fp
 8008548:	eb63 0501 	sbc.w	r5, r3, r1
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	00eb      	lsls	r3, r5, #3
 8008556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800855a:	00e2      	lsls	r2, r4, #3
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	4643      	mov	r3, r8
 8008562:	18e3      	adds	r3, r4, r3
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	464b      	mov	r3, r9
 8008568:	eb45 0303 	adc.w	r3, r5, r3
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800857a:	4629      	mov	r1, r5
 800857c:	028b      	lsls	r3, r1, #10
 800857e:	4621      	mov	r1, r4
 8008580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008584:	4621      	mov	r1, r4
 8008586:	028a      	lsls	r2, r1, #10
 8008588:	4610      	mov	r0, r2
 800858a:	4619      	mov	r1, r3
 800858c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008590:	2200      	movs	r2, #0
 8008592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008594:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008596:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800859a:	f7f8 fb95 	bl	8000cc8 <__aeabi_uldivmod>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4613      	mov	r3, r2
 80085a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80085a8:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	0f1b      	lsrs	r3, r3, #28
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80085b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80085be:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80085c6:	e003      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085c8:	4b06      	ldr	r3, [pc, #24]	@ (80085e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80085ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80085ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	37b8      	adds	r7, #184	@ 0xb8
 80085d8:	46bd      	mov	sp, r7
 80085da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085de:	bf00      	nop
 80085e0:	40023800 	.word	0x40023800
 80085e4:	00f42400 	.word	0x00f42400

080085e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e28d      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8083 	beq.w	800870e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008608:	4b94      	ldr	r3, [pc, #592]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 030c 	and.w	r3, r3, #12
 8008610:	2b04      	cmp	r3, #4
 8008612:	d019      	beq.n	8008648 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008614:	4b91      	ldr	r3, [pc, #580]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800861c:	2b08      	cmp	r3, #8
 800861e:	d106      	bne.n	800862e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008620:	4b8e      	ldr	r3, [pc, #568]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800862c:	d00c      	beq.n	8008648 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800862e:	4b8b      	ldr	r3, [pc, #556]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008636:	2b0c      	cmp	r3, #12
 8008638:	d112      	bne.n	8008660 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800863a:	4b88      	ldr	r3, [pc, #544]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008642:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008646:	d10b      	bne.n	8008660 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008648:	4b84      	ldr	r3, [pc, #528]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d05b      	beq.n	800870c <HAL_RCC_OscConfig+0x124>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d157      	bne.n	800870c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e25a      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008668:	d106      	bne.n	8008678 <HAL_RCC_OscConfig+0x90>
 800866a:	4b7c      	ldr	r3, [pc, #496]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a7b      	ldr	r2, [pc, #492]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e01d      	b.n	80086b4 <HAL_RCC_OscConfig+0xcc>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008680:	d10c      	bne.n	800869c <HAL_RCC_OscConfig+0xb4>
 8008682:	4b76      	ldr	r3, [pc, #472]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a75      	ldr	r2, [pc, #468]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	4b73      	ldr	r3, [pc, #460]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a72      	ldr	r2, [pc, #456]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	e00b      	b.n	80086b4 <HAL_RCC_OscConfig+0xcc>
 800869c:	4b6f      	ldr	r3, [pc, #444]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a6e      	ldr	r2, [pc, #440]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80086a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	4b6c      	ldr	r3, [pc, #432]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a6b      	ldr	r2, [pc, #428]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80086ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d013      	beq.n	80086e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fd fe10 	bl	80062e0 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086c4:	f7fd fe0c 	bl	80062e0 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b64      	cmp	r3, #100	@ 0x64
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e21f      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086d6:	4b61      	ldr	r3, [pc, #388]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0xdc>
 80086e2:	e014      	b.n	800870e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fd fdfc 	bl	80062e0 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086ec:	f7fd fdf8 	bl	80062e0 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	@ 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e20b      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086fe:	4b57      	ldr	r3, [pc, #348]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x104>
 800870a:	e000      	b.n	800870e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800870c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d06f      	beq.n	80087fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800871a:	4b50      	ldr	r3, [pc, #320]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 030c 	and.w	r3, r3, #12
 8008722:	2b00      	cmp	r3, #0
 8008724:	d017      	beq.n	8008756 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008726:	4b4d      	ldr	r3, [pc, #308]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800872e:	2b08      	cmp	r3, #8
 8008730:	d105      	bne.n	800873e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008732:	4b4a      	ldr	r3, [pc, #296]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800873e:	4b47      	ldr	r3, [pc, #284]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008746:	2b0c      	cmp	r3, #12
 8008748:	d11c      	bne.n	8008784 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800874a:	4b44      	ldr	r3, [pc, #272]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d116      	bne.n	8008784 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008756:	4b41      	ldr	r3, [pc, #260]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_RCC_OscConfig+0x186>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d001      	beq.n	800876e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e1d3      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800876e:	4b3b      	ldr	r3, [pc, #236]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4937      	ldr	r1, [pc, #220]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 800877e:	4313      	orrs	r3, r2
 8008780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008782:	e03a      	b.n	80087fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d020      	beq.n	80087ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800878c:	4b34      	ldr	r3, [pc, #208]	@ (8008860 <HAL_RCC_OscConfig+0x278>)
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008792:	f7fd fda5 	bl	80062e0 <HAL_GetTick>
 8008796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008798:	e008      	b.n	80087ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800879a:	f7fd fda1 	bl	80062e0 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e1b4      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ac:	4b2b      	ldr	r3, [pc, #172]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0f0      	beq.n	800879a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b8:	4b28      	ldr	r3, [pc, #160]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	4925      	ldr	r1, [pc, #148]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	600b      	str	r3, [r1, #0]
 80087cc:	e015      	b.n	80087fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ce:	4b24      	ldr	r3, [pc, #144]	@ (8008860 <HAL_RCC_OscConfig+0x278>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d4:	f7fd fd84 	bl	80062e0 <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087dc:	f7fd fd80 	bl	80062e0 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e193      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ee:	4b1b      	ldr	r3, [pc, #108]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f0      	bne.n	80087dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0308 	and.w	r3, r3, #8
 8008802:	2b00      	cmp	r3, #0
 8008804:	d036      	beq.n	8008874 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <HAL_RCC_OscConfig+0x27c>)
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008814:	f7fd fd64 	bl	80062e0 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800881c:	f7fd fd60 	bl	80062e0 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e173      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800882e:	4b0b      	ldr	r3, [pc, #44]	@ (800885c <HAL_RCC_OscConfig+0x274>)
 8008830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <HAL_RCC_OscConfig+0x234>
 800883a:	e01b      	b.n	8008874 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800883c:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <HAL_RCC_OscConfig+0x27c>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008842:	f7fd fd4d 	bl	80062e0 <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008848:	e00e      	b.n	8008868 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800884a:	f7fd fd49 	bl	80062e0 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d907      	bls.n	8008868 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e15c      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
 800885c:	40023800 	.word	0x40023800
 8008860:	42470000 	.word	0x42470000
 8008864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008868:	4b8a      	ldr	r3, [pc, #552]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 800886a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1ea      	bne.n	800884a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8097 	beq.w	80089b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008886:	4b83      	ldr	r3, [pc, #524]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10f      	bne.n	80088b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	4b7f      	ldr	r3, [pc, #508]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 800889c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80088a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088aa:	60bb      	str	r3, [r7, #8]
 80088ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b2:	4b79      	ldr	r3, [pc, #484]	@ (8008a98 <HAL_RCC_OscConfig+0x4b0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d118      	bne.n	80088f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088be:	4b76      	ldr	r3, [pc, #472]	@ (8008a98 <HAL_RCC_OscConfig+0x4b0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a75      	ldr	r2, [pc, #468]	@ (8008a98 <HAL_RCC_OscConfig+0x4b0>)
 80088c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ca:	f7fd fd09 	bl	80062e0 <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d0:	e008      	b.n	80088e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088d2:	f7fd fd05 	bl	80062e0 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e118      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e4:	4b6c      	ldr	r3, [pc, #432]	@ (8008a98 <HAL_RCC_OscConfig+0x4b0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d106      	bne.n	8008906 <HAL_RCC_OscConfig+0x31e>
 80088f8:	4b66      	ldr	r3, [pc, #408]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80088fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fc:	4a65      	ldr	r2, [pc, #404]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	6713      	str	r3, [r2, #112]	@ 0x70
 8008904:	e01c      	b.n	8008940 <HAL_RCC_OscConfig+0x358>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b05      	cmp	r3, #5
 800890c:	d10c      	bne.n	8008928 <HAL_RCC_OscConfig+0x340>
 800890e:	4b61      	ldr	r3, [pc, #388]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008912:	4a60      	ldr	r2, [pc, #384]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008914:	f043 0304 	orr.w	r3, r3, #4
 8008918:	6713      	str	r3, [r2, #112]	@ 0x70
 800891a:	4b5e      	ldr	r3, [pc, #376]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 800891c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891e:	4a5d      	ldr	r2, [pc, #372]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	6713      	str	r3, [r2, #112]	@ 0x70
 8008926:	e00b      	b.n	8008940 <HAL_RCC_OscConfig+0x358>
 8008928:	4b5a      	ldr	r3, [pc, #360]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 800892a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892c:	4a59      	ldr	r2, [pc, #356]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	6713      	str	r3, [r2, #112]	@ 0x70
 8008934:	4b57      	ldr	r3, [pc, #348]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008938:	4a56      	ldr	r2, [pc, #344]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 800893a:	f023 0304 	bic.w	r3, r3, #4
 800893e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d015      	beq.n	8008974 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008948:	f7fd fcca 	bl	80062e0 <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800894e:	e00a      	b.n	8008966 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008950:	f7fd fcc6 	bl	80062e0 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800895e:	4293      	cmp	r3, r2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e0d7      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008966:	4b4b      	ldr	r3, [pc, #300]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0ee      	beq.n	8008950 <HAL_RCC_OscConfig+0x368>
 8008972:	e014      	b.n	800899e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008974:	f7fd fcb4 	bl	80062e0 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800897a:	e00a      	b.n	8008992 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800897c:	f7fd fcb0 	bl	80062e0 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e0c1      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008992:	4b40      	ldr	r3, [pc, #256]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1ee      	bne.n	800897c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d105      	bne.n	80089b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80089a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a8:	4a3a      	ldr	r2, [pc, #232]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80089aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80ad 	beq.w	8008b14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089ba:	4b36      	ldr	r3, [pc, #216]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 030c 	and.w	r3, r3, #12
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d060      	beq.n	8008a88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d145      	bne.n	8008a5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ce:	4b33      	ldr	r3, [pc, #204]	@ (8008a9c <HAL_RCC_OscConfig+0x4b4>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d4:	f7fd fc84 	bl	80062e0 <HAL_GetTick>
 80089d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089da:	e008      	b.n	80089ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089dc:	f7fd fc80 	bl	80062e0 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e093      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ee:	4b29      	ldr	r3, [pc, #164]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f0      	bne.n	80089dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a08:	019b      	lsls	r3, r3, #6
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a10:	085b      	lsrs	r3, r3, #1
 8008a12:	3b01      	subs	r3, #1
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a24:	071b      	lsls	r3, r3, #28
 8008a26:	491b      	ldr	r1, [pc, #108]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a9c <HAL_RCC_OscConfig+0x4b4>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a32:	f7fd fc55 	bl	80062e0 <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a38:	e008      	b.n	8008a4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a3a:	f7fd fc51 	bl	80062e0 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e064      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4c:	4b11      	ldr	r3, [pc, #68]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0f0      	beq.n	8008a3a <HAL_RCC_OscConfig+0x452>
 8008a58:	e05c      	b.n	8008b14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5a:	4b10      	ldr	r3, [pc, #64]	@ (8008a9c <HAL_RCC_OscConfig+0x4b4>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fd fc3e 	bl	80062e0 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a68:	f7fd fc3a 	bl	80062e0 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e04d      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a7a:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <HAL_RCC_OscConfig+0x4ac>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x480>
 8008a86:	e045      	b.n	8008b14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e040      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40007000 	.word	0x40007000
 8008a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8008b20 <HAL_RCC_OscConfig+0x538>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d030      	beq.n	8008b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d129      	bne.n	8008b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d122      	bne.n	8008b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d119      	bne.n	8008b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d10f      	bne.n	8008b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d107      	bne.n	8008b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40023800 	.word	0x40023800

08008b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e07b      	b.n	8008c2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d108      	bne.n	8008b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b46:	d009      	beq.n	8008b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	61da      	str	r2, [r3, #28]
 8008b4e:	e005      	b.n	8008b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d106      	bne.n	8008b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fc fc48 	bl	800540c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be0:	ea42 0103 	orr.w	r1, r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	0c1b      	lsrs	r3, r3, #16
 8008bfa:	f003 0104 	and.w	r1, r3, #4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	f003 0210 	and.w	r2, r3, #16
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b08c      	sub	sp, #48	@ 0x30
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c44:	2301      	movs	r3, #1
 8008c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x26>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e18a      	b.n	8008f72 <HAL_SPI_TransmitReceive+0x33c>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c64:	f7fd fb3c 	bl	80062e0 <HAL_GetTick>
 8008c68:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c7a:	887b      	ldrh	r3, [r7, #2]
 8008c7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d00f      	beq.n	8008ca6 <HAL_SPI_TransmitReceive+0x70>
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c8c:	d107      	bne.n	8008c9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <HAL_SPI_TransmitReceive+0x68>
 8008c96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d003      	beq.n	8008ca6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008ca4:	e15b      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <HAL_SPI_TransmitReceive+0x82>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_SPI_TransmitReceive+0x82>
 8008cb2:	887b      	ldrh	r3, [r7, #2]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008cbe:	e14e      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d003      	beq.n	8008cd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2205      	movs	r2, #5
 8008cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	887a      	ldrh	r2, [r7, #2]
 8008ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	887a      	ldrh	r2, [r7, #2]
 8008cea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	887a      	ldrh	r2, [r7, #2]
 8008cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	887a      	ldrh	r2, [r7, #2]
 8008cfc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d14:	2b40      	cmp	r3, #64	@ 0x40
 8008d16:	d007      	beq.n	8008d28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d30:	d178      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_SPI_TransmitReceive+0x10a>
 8008d3a:	8b7b      	ldrh	r3, [r7, #26]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d166      	bne.n	8008e0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d44:	881a      	ldrh	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d50:	1c9a      	adds	r2, r3, #2
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d64:	e053      	b.n	8008e0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d11b      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x176>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d016      	beq.n	8008dac <HAL_SPI_TransmitReceive+0x176>
 8008d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d113      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d88:	881a      	ldrh	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d94:	1c9a      	adds	r2, r3, #2
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d119      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x1b8>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d014      	beq.n	8008dee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dce:	b292      	uxth	r2, r2
 8008dd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	1c9a      	adds	r2, r3, #2
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dea:	2301      	movs	r3, #1
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008dee:	f7fd fa77 	bl	80062e0 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d807      	bhi.n	8008e0e <HAL_SPI_TransmitReceive+0x1d8>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d003      	beq.n	8008e0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008e0c:	e0a7      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1a6      	bne.n	8008d66 <HAL_SPI_TransmitReceive+0x130>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1a1      	bne.n	8008d66 <HAL_SPI_TransmitReceive+0x130>
 8008e22:	e07c      	b.n	8008f1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x1fc>
 8008e2c:	8b7b      	ldrh	r3, [r7, #26]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d16b      	bne.n	8008f0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e58:	e057      	b.n	8008f0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d11c      	bne.n	8008ea2 <HAL_SPI_TransmitReceive+0x26c>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d017      	beq.n	8008ea2 <HAL_SPI_TransmitReceive+0x26c>
 8008e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d114      	bne.n	8008ea2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d119      	bne.n	8008ee4 <HAL_SPI_TransmitReceive+0x2ae>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d014      	beq.n	8008ee4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ee4:	f7fd f9fc 	bl	80062e0 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d803      	bhi.n	8008efc <HAL_SPI_TransmitReceive+0x2c6>
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d102      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x2cc>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008f08:	e029      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1a2      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x224>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d19d      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 f8b2 	bl	800908c <SPI_EndRxTxTransaction>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d006      	beq.n	8008f3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008f3a:	e010      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10b      	bne.n	8008f5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	e000      	b.n	8008f5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3730      	adds	r7, #48	@ 0x30
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f8c:	f7fd f9a8 	bl	80062e0 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	4413      	add	r3, r2
 8008f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f9c:	f7fd f9a0 	bl	80062e0 <HAL_GetTick>
 8008fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008fa2:	4b39      	ldr	r3, [pc, #228]	@ (8009088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	015b      	lsls	r3, r3, #5
 8008fa8:	0d1b      	lsrs	r3, r3, #20
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	fb02 f303 	mul.w	r3, r2, r3
 8008fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fb2:	e054      	b.n	800905e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d050      	beq.n	800905e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fbc:	f7fd f990 	bl	80062e0 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d902      	bls.n	8008fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d13d      	bne.n	800904e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fea:	d111      	bne.n	8009010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ff4:	d004      	beq.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ffe:	d107      	bne.n	8009010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800900e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009018:	d10f      	bne.n	800903a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e017      	b.n	800907e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	3b01      	subs	r3, #1
 800905c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4013      	ands	r3, r2
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	429a      	cmp	r2, r3
 800906c:	bf0c      	ite	eq
 800906e:	2301      	moveq	r3, #1
 8009070:	2300      	movne	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	461a      	mov	r2, r3
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	429a      	cmp	r2, r3
 800907a:	d19b      	bne.n	8008fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000040 	.word	0x20000040

0800908c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af02      	add	r7, sp, #8
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009098:	4b1b      	ldr	r3, [pc, #108]	@ (8009108 <SPI_EndRxTxTransaction+0x7c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a1b      	ldr	r2, [pc, #108]	@ (800910c <SPI_EndRxTxTransaction+0x80>)
 800909e:	fba2 2303 	umull	r2, r3, r2, r3
 80090a2:	0d5b      	lsrs	r3, r3, #21
 80090a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090a8:	fb02 f303 	mul.w	r3, r2, r3
 80090ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090b6:	d112      	bne.n	80090de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2200      	movs	r2, #0
 80090c0:	2180      	movs	r1, #128	@ 0x80
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff ff5a 	bl	8008f7c <SPI_WaitFlagStateUntilTimeout>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d016      	beq.n	80090fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d2:	f043 0220 	orr.w	r2, r3, #32
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e00f      	b.n	80090fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f4:	2b80      	cmp	r3, #128	@ 0x80
 80090f6:	d0f2      	beq.n	80090de <SPI_EndRxTxTransaction+0x52>
 80090f8:	e000      	b.n	80090fc <SPI_EndRxTxTransaction+0x70>
        break;
 80090fa:	bf00      	nop
  }

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000040 	.word	0x20000040
 800910c:	165e9f81 	.word	0x165e9f81

08009110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e041      	b.n	80091a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fc ff42 	bl	8005fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f000 fc7c 	bl	8009a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d001      	beq.n	80091c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e04e      	b.n	8009266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a23      	ldr	r2, [pc, #140]	@ (8009274 <HAL_TIM_Base_Start_IT+0xc4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d022      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f2:	d01d      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009278 <HAL_TIM_Base_Start_IT+0xc8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d018      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1e      	ldr	r2, [pc, #120]	@ (800927c <HAL_TIM_Base_Start_IT+0xcc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d013      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1c      	ldr	r2, [pc, #112]	@ (8009280 <HAL_TIM_Base_Start_IT+0xd0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00e      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1b      	ldr	r2, [pc, #108]	@ (8009284 <HAL_TIM_Base_Start_IT+0xd4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d009      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a19      	ldr	r2, [pc, #100]	@ (8009288 <HAL_TIM_Base_Start_IT+0xd8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d004      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a18      	ldr	r2, [pc, #96]	@ (800928c <HAL_TIM_Base_Start_IT+0xdc>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d111      	bne.n	8009254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b06      	cmp	r3, #6
 8009240:	d010      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0201 	orr.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009252:	e007      	b.n	8009264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0201 	orr.w	r2, r2, #1
 8009262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40010000 	.word	0x40010000
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800
 8009280:	40000c00 	.word	0x40000c00
 8009284:	40010400 	.word	0x40010400
 8009288:	40014000 	.word	0x40014000
 800928c:	40001800 	.word	0x40001800

08009290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e041      	b.n	8009326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f839 	bl	800932e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f000 fbbc 	bl	8009a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d109      	bne.n	8009368 <HAL_TIM_PWM_Start+0x24>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	bf14      	ite	ne
 8009360:	2301      	movne	r3, #1
 8009362:	2300      	moveq	r3, #0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	e022      	b.n	80093ae <HAL_TIM_PWM_Start+0x6a>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b04      	cmp	r3, #4
 800936c:	d109      	bne.n	8009382 <HAL_TIM_PWM_Start+0x3e>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b01      	cmp	r3, #1
 8009378:	bf14      	ite	ne
 800937a:	2301      	movne	r3, #1
 800937c:	2300      	moveq	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	e015      	b.n	80093ae <HAL_TIM_PWM_Start+0x6a>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d109      	bne.n	800939c <HAL_TIM_PWM_Start+0x58>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b01      	cmp	r3, #1
 8009392:	bf14      	ite	ne
 8009394:	2301      	movne	r3, #1
 8009396:	2300      	moveq	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	e008      	b.n	80093ae <HAL_TIM_PWM_Start+0x6a>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	bf14      	ite	ne
 80093a8:	2301      	movne	r3, #1
 80093aa:	2300      	moveq	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e07c      	b.n	80094b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <HAL_TIM_PWM_Start+0x82>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093c4:	e013      	b.n	80093ee <HAL_TIM_PWM_Start+0xaa>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d104      	bne.n	80093d6 <HAL_TIM_PWM_Start+0x92>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093d4:	e00b      	b.n	80093ee <HAL_TIM_PWM_Start+0xaa>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b08      	cmp	r3, #8
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_PWM_Start+0xa2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093e4:	e003      	b.n	80093ee <HAL_TIM_PWM_Start+0xaa>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2201      	movs	r2, #1
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fe12 	bl	800a020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a2d      	ldr	r2, [pc, #180]	@ (80094b8 <HAL_TIM_PWM_Start+0x174>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d004      	beq.n	8009410 <HAL_TIM_PWM_Start+0xcc>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a2c      	ldr	r2, [pc, #176]	@ (80094bc <HAL_TIM_PWM_Start+0x178>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d101      	bne.n	8009414 <HAL_TIM_PWM_Start+0xd0>
 8009410:	2301      	movs	r3, #1
 8009412:	e000      	b.n	8009416 <HAL_TIM_PWM_Start+0xd2>
 8009414:	2300      	movs	r3, #0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d007      	beq.n	800942a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009428:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a22      	ldr	r2, [pc, #136]	@ (80094b8 <HAL_TIM_PWM_Start+0x174>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d022      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943c:	d01d      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1f      	ldr	r2, [pc, #124]	@ (80094c0 <HAL_TIM_PWM_Start+0x17c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d018      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1d      	ldr	r2, [pc, #116]	@ (80094c4 <HAL_TIM_PWM_Start+0x180>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d013      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1c      	ldr	r2, [pc, #112]	@ (80094c8 <HAL_TIM_PWM_Start+0x184>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00e      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a16      	ldr	r2, [pc, #88]	@ (80094bc <HAL_TIM_PWM_Start+0x178>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d009      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <HAL_TIM_PWM_Start+0x188>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d004      	beq.n	800947a <HAL_TIM_PWM_Start+0x136>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a16      	ldr	r2, [pc, #88]	@ (80094d0 <HAL_TIM_PWM_Start+0x18c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d111      	bne.n	800949e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b06      	cmp	r3, #6
 800948a:	d010      	beq.n	80094ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0201 	orr.w	r2, r2, #1
 800949a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949c:	e007      	b.n	80094ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0201 	orr.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40010400 	.word	0x40010400
 80094c0:	40000400 	.word	0x40000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	40000c00 	.word	0x40000c00
 80094cc:	40014000 	.word	0x40014000
 80094d0:	40001800 	.word	0x40001800

080094d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0202 	mvn.w	r2, #2
 8009500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa7a 	bl	8009a10 <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa6c 	bl	80099fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa7d 	bl	8009a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0304 	and.w	r3, r3, #4
 800953a:	2b04      	cmp	r3, #4
 800953c:	d122      	bne.n	8009584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b04      	cmp	r3, #4
 800954a:	d11b      	bne.n	8009584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0204 	mvn.w	r2, #4
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2202      	movs	r2, #2
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fa50 	bl	8009a10 <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa42 	bl	80099fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa53 	bl	8009a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0308 	and.w	r3, r3, #8
 800958e:	2b08      	cmp	r3, #8
 8009590:	d122      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b08      	cmp	r3, #8
 800959e:	d11b      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0208 	mvn.w	r2, #8
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa26 	bl	8009a10 <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa18 	bl	80099fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa29 	bl	8009a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d122      	bne.n	800962c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0310 	and.w	r3, r3, #16
 80095f0:	2b10      	cmp	r3, #16
 80095f2:	d11b      	bne.n	800962c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0210 	mvn.w	r2, #16
 80095fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2208      	movs	r2, #8
 8009602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9fc 	bl	8009a10 <HAL_TIM_IC_CaptureCallback>
 8009618:	e005      	b.n	8009626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f9ee 	bl	80099fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f9ff 	bl	8009a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b01      	cmp	r3, #1
 8009638:	d10e      	bne.n	8009658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b01      	cmp	r3, #1
 8009646:	d107      	bne.n	8009658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f06f 0201 	mvn.w	r2, #1
 8009650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9c8 	bl	80099e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009662:	2b80      	cmp	r3, #128	@ 0x80
 8009664:	d10e      	bne.n	8009684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009670:	2b80      	cmp	r3, #128	@ 0x80
 8009672:	d107      	bne.n	8009684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800967c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fdcc 	bl	800a21c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968e:	2b40      	cmp	r3, #64	@ 0x40
 8009690:	d10e      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800969c:	2b40      	cmp	r3, #64	@ 0x40
 800969e:	d107      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80096a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f9c4 	bl	8009a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d10e      	bne.n	80096dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d107      	bne.n	80096dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0220 	mvn.w	r2, #32
 80096d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fd96 	bl	800a208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80096fa:	2302      	movs	r3, #2
 80096fc:	e0ac      	b.n	8009858 <HAL_TIM_PWM_ConfigChannel+0x174>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b0c      	cmp	r3, #12
 800970a:	f200 809f 	bhi.w	800984c <HAL_TIM_PWM_ConfigChannel+0x168>
 800970e:	a201      	add	r2, pc, #4	@ (adr r2, 8009714 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009749 	.word	0x08009749
 8009718:	0800984d 	.word	0x0800984d
 800971c:	0800984d 	.word	0x0800984d
 8009720:	0800984d 	.word	0x0800984d
 8009724:	08009789 	.word	0x08009789
 8009728:	0800984d 	.word	0x0800984d
 800972c:	0800984d 	.word	0x0800984d
 8009730:	0800984d 	.word	0x0800984d
 8009734:	080097cb 	.word	0x080097cb
 8009738:	0800984d 	.word	0x0800984d
 800973c:	0800984d 	.word	0x0800984d
 8009740:	0800984d 	.word	0x0800984d
 8009744:	0800980b 	.word	0x0800980b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fa1c 	bl	8009b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	699a      	ldr	r2, [r3, #24]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0208 	orr.w	r2, r2, #8
 8009762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	699a      	ldr	r2, [r3, #24]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0204 	bic.w	r2, r2, #4
 8009772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6999      	ldr	r1, [r3, #24]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	691a      	ldr	r2, [r3, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	619a      	str	r2, [r3, #24]
      break;
 8009786:	e062      	b.n	800984e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fa6c 	bl	8009c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699a      	ldr	r2, [r3, #24]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6999      	ldr	r1, [r3, #24]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	021a      	lsls	r2, r3, #8
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	619a      	str	r2, [r3, #24]
      break;
 80097c8:	e041      	b.n	800984e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68b9      	ldr	r1, [r7, #8]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fac1 	bl	8009d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69da      	ldr	r2, [r3, #28]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0208 	orr.w	r2, r2, #8
 80097e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69da      	ldr	r2, [r3, #28]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0204 	bic.w	r2, r2, #4
 80097f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69d9      	ldr	r1, [r3, #28]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	691a      	ldr	r2, [r3, #16]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	61da      	str	r2, [r3, #28]
      break;
 8009808:	e021      	b.n	800984e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fb15 	bl	8009e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69da      	ldr	r2, [r3, #28]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69d9      	ldr	r1, [r3, #28]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	021a      	lsls	r2, r3, #8
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	61da      	str	r2, [r3, #28]
      break;
 800984a:	e000      	b.n	800984e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800984c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <HAL_TIM_ConfigClockSource+0x18>
 8009874:	2302      	movs	r3, #2
 8009876:	e0b3      	b.n	80099e0 <HAL_TIM_ConfigClockSource+0x180>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800989e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b0:	d03e      	beq.n	8009930 <HAL_TIM_ConfigClockSource+0xd0>
 80098b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b6:	f200 8087 	bhi.w	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098be:	f000 8085 	beq.w	80099cc <HAL_TIM_ConfigClockSource+0x16c>
 80098c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c6:	d87f      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098c8:	2b70      	cmp	r3, #112	@ 0x70
 80098ca:	d01a      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0xa2>
 80098cc:	2b70      	cmp	r3, #112	@ 0x70
 80098ce:	d87b      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098d0:	2b60      	cmp	r3, #96	@ 0x60
 80098d2:	d050      	beq.n	8009976 <HAL_TIM_ConfigClockSource+0x116>
 80098d4:	2b60      	cmp	r3, #96	@ 0x60
 80098d6:	d877      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098d8:	2b50      	cmp	r3, #80	@ 0x50
 80098da:	d03c      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0xf6>
 80098dc:	2b50      	cmp	r3, #80	@ 0x50
 80098de:	d873      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098e0:	2b40      	cmp	r3, #64	@ 0x40
 80098e2:	d058      	beq.n	8009996 <HAL_TIM_ConfigClockSource+0x136>
 80098e4:	2b40      	cmp	r3, #64	@ 0x40
 80098e6:	d86f      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098e8:	2b30      	cmp	r3, #48	@ 0x30
 80098ea:	d064      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x156>
 80098ec:	2b30      	cmp	r3, #48	@ 0x30
 80098ee:	d86b      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	d060      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x156>
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d867      	bhi.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d05c      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x156>
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	d05a      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009900:	e062      	b.n	80099c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	6899      	ldr	r1, [r3, #8]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	f000 fb65 	bl	8009fe0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009924:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	609a      	str	r2, [r3, #8]
      break;
 800992e:	e04e      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	6899      	ldr	r1, [r3, #8]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f000 fb4e 	bl	8009fe0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009952:	609a      	str	r2, [r3, #8]
      break;
 8009954:	e03b      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6859      	ldr	r1, [r3, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	461a      	mov	r2, r3
 8009964:	f000 fac2 	bl	8009eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2150      	movs	r1, #80	@ 0x50
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fb1b 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 8009974:	e02b      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	6859      	ldr	r1, [r3, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	461a      	mov	r2, r3
 8009984:	f000 fae1 	bl	8009f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2160      	movs	r1, #96	@ 0x60
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fb0b 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 8009994:	e01b      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	6859      	ldr	r1, [r3, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	461a      	mov	r2, r3
 80099a4:	f000 faa2 	bl	8009eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2140      	movs	r1, #64	@ 0x40
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fafb 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 80099b4:	e00b      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4619      	mov	r1, r3
 80099c0:	4610      	mov	r0, r2
 80099c2:	f000 faf2 	bl	8009faa <TIM_ITRx_SetConfig>
        break;
 80099c6:	e002      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80099cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a40      	ldr	r2, [pc, #256]	@ (8009b60 <TIM_Base_SetConfig+0x114>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d013      	beq.n	8009a8c <TIM_Base_SetConfig+0x40>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6a:	d00f      	beq.n	8009a8c <TIM_Base_SetConfig+0x40>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8009b64 <TIM_Base_SetConfig+0x118>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00b      	beq.n	8009a8c <TIM_Base_SetConfig+0x40>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a3c      	ldr	r2, [pc, #240]	@ (8009b68 <TIM_Base_SetConfig+0x11c>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d007      	beq.n	8009a8c <TIM_Base_SetConfig+0x40>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8009b6c <TIM_Base_SetConfig+0x120>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d003      	beq.n	8009a8c <TIM_Base_SetConfig+0x40>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a3a      	ldr	r2, [pc, #232]	@ (8009b70 <TIM_Base_SetConfig+0x124>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d108      	bne.n	8009a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8009b60 <TIM_Base_SetConfig+0x114>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d02b      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aac:	d027      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8009b64 <TIM_Base_SetConfig+0x118>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d023      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8009b68 <TIM_Base_SetConfig+0x11c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d01f      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8009b6c <TIM_Base_SetConfig+0x120>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d01b      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a29      	ldr	r2, [pc, #164]	@ (8009b70 <TIM_Base_SetConfig+0x124>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d017      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a28      	ldr	r2, [pc, #160]	@ (8009b74 <TIM_Base_SetConfig+0x128>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d013      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a27      	ldr	r2, [pc, #156]	@ (8009b78 <TIM_Base_SetConfig+0x12c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00f      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a26      	ldr	r2, [pc, #152]	@ (8009b7c <TIM_Base_SetConfig+0x130>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00b      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a25      	ldr	r2, [pc, #148]	@ (8009b80 <TIM_Base_SetConfig+0x134>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d007      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a24      	ldr	r2, [pc, #144]	@ (8009b84 <TIM_Base_SetConfig+0x138>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d003      	beq.n	8009afe <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a23      	ldr	r2, [pc, #140]	@ (8009b88 <TIM_Base_SetConfig+0x13c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d108      	bne.n	8009b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a0a      	ldr	r2, [pc, #40]	@ (8009b60 <TIM_Base_SetConfig+0x114>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d003      	beq.n	8009b44 <TIM_Base_SetConfig+0xf8>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8009b70 <TIM_Base_SetConfig+0x124>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d103      	bne.n	8009b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691a      	ldr	r2, [r3, #16]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	615a      	str	r2, [r3, #20]
}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40000400 	.word	0x40000400
 8009b68:	40000800 	.word	0x40000800
 8009b6c:	40000c00 	.word	0x40000c00
 8009b70:	40010400 	.word	0x40010400
 8009b74:	40014000 	.word	0x40014000
 8009b78:	40014400 	.word	0x40014400
 8009b7c:	40014800 	.word	0x40014800
 8009b80:	40001800 	.word	0x40001800
 8009b84:	40001c00 	.word	0x40001c00
 8009b88:	40002000 	.word	0x40002000

08009b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f023 0201 	bic.w	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f023 0302 	bic.w	r3, r3, #2
 8009bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a20      	ldr	r2, [pc, #128]	@ (8009c64 <TIM_OC1_SetConfig+0xd8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d003      	beq.n	8009bf0 <TIM_OC1_SetConfig+0x64>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a1f      	ldr	r2, [pc, #124]	@ (8009c68 <TIM_OC1_SetConfig+0xdc>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d10c      	bne.n	8009c0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	f023 0308 	bic.w	r3, r3, #8
 8009bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f023 0304 	bic.w	r3, r3, #4
 8009c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <TIM_OC1_SetConfig+0xd8>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d003      	beq.n	8009c1a <TIM_OC1_SetConfig+0x8e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a14      	ldr	r2, [pc, #80]	@ (8009c68 <TIM_OC1_SetConfig+0xdc>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d111      	bne.n	8009c3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	621a      	str	r2, [r3, #32]
}
 8009c58:	bf00      	nop
 8009c5a:	371c      	adds	r7, #28
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40010400 	.word	0x40010400

08009c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	f023 0210 	bic.w	r2, r3, #16
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f023 0320 	bic.w	r3, r3, #32
 8009cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	011b      	lsls	r3, r3, #4
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a22      	ldr	r2, [pc, #136]	@ (8009d50 <TIM_OC2_SetConfig+0xe4>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d003      	beq.n	8009cd4 <TIM_OC2_SetConfig+0x68>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a21      	ldr	r2, [pc, #132]	@ (8009d54 <TIM_OC2_SetConfig+0xe8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d10d      	bne.n	8009cf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	011b      	lsls	r3, r3, #4
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a17      	ldr	r2, [pc, #92]	@ (8009d50 <TIM_OC2_SetConfig+0xe4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d003      	beq.n	8009d00 <TIM_OC2_SetConfig+0x94>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a16      	ldr	r2, [pc, #88]	@ (8009d54 <TIM_OC2_SetConfig+0xe8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d113      	bne.n	8009d28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400

08009d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0303 	bic.w	r3, r3, #3
 8009d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a21      	ldr	r2, [pc, #132]	@ (8009e38 <TIM_OC3_SetConfig+0xe0>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d003      	beq.n	8009dbe <TIM_OC3_SetConfig+0x66>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a20      	ldr	r2, [pc, #128]	@ (8009e3c <TIM_OC3_SetConfig+0xe4>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d10d      	bne.n	8009dda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a16      	ldr	r2, [pc, #88]	@ (8009e38 <TIM_OC3_SetConfig+0xe0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d003      	beq.n	8009dea <TIM_OC3_SetConfig+0x92>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a15      	ldr	r2, [pc, #84]	@ (8009e3c <TIM_OC3_SetConfig+0xe4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d113      	bne.n	8009e12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	621a      	str	r2, [r3, #32]
}
 8009e2c:	bf00      	nop
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40010400 	.word	0x40010400

08009e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	031b      	lsls	r3, r3, #12
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a12      	ldr	r2, [pc, #72]	@ (8009ee4 <TIM_OC4_SetConfig+0xa4>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_OC4_SetConfig+0x68>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a11      	ldr	r2, [pc, #68]	@ (8009ee8 <TIM_OC4_SetConfig+0xa8>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d109      	bne.n	8009ebc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	019b      	lsls	r3, r3, #6
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	621a      	str	r2, [r3, #32]
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	40010000 	.word	0x40010000
 8009ee8:	40010400 	.word	0x40010400

08009eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f023 0201 	bic.w	r2, r3, #1
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f023 030a 	bic.w	r3, r3, #10
 8009f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	621a      	str	r2, [r3, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b087      	sub	sp, #28
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	f023 0210 	bic.w	r2, r3, #16
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	031b      	lsls	r3, r3, #12
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	f043 0307 	orr.w	r3, r3, #7
 8009fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	609a      	str	r2, [r3, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	021a      	lsls	r2, r3, #8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	431a      	orrs	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	4313      	orrs	r3, r2
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	609a      	str	r2, [r3, #8]
}
 800a014:	bf00      	nop
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f003 031f 	and.w	r3, r3, #31
 800a032:	2201      	movs	r2, #1
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a1a      	ldr	r2, [r3, #32]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	43db      	mvns	r3, r3
 800a042:	401a      	ands	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6a1a      	ldr	r2, [r3, #32]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f003 031f 	and.w	r3, r3, #31
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	fa01 f303 	lsl.w	r3, r1, r3
 800a058:	431a      	orrs	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
}
 800a05e:	bf00      	nop
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d101      	bne.n	800a084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a080:	2302      	movs	r3, #2
 800a082:	e05a      	b.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a21      	ldr	r2, [pc, #132]	@ (800a148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d022      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0d0:	d01d      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a1d      	ldr	r2, [pc, #116]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d018      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d013      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a154 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00e      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a18      	ldr	r2, [pc, #96]	@ (800a158 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d009      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a17      	ldr	r2, [pc, #92]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d004      	beq.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a15      	ldr	r2, [pc, #84]	@ (800a160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d10c      	bne.n	800a128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	40010000 	.word	0x40010000
 800a14c:	40000400 	.word	0x40000400
 800a150:	40000800 	.word	0x40000800
 800a154:	40000c00 	.word	0x40000c00
 800a158:	40010400 	.word	0x40010400
 800a15c:	40014000 	.word	0x40014000
 800a160:	40001800 	.word	0x40001800

0800a164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e03d      	b.n	800a1fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e03f      	b.n	800a2c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7fb ff3e 	bl	80060d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2224      	movs	r2, #36	@ 0x24
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fc7b 	bl	800ab70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	695a      	ldr	r2, [r3, #20]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b08a      	sub	sp, #40	@ 0x28
 800a2ce:	af02      	add	r7, sp, #8
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	603b      	str	r3, [r7, #0]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d17c      	bne.n	800a3e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <HAL_UART_Transmit+0x2c>
 800a2f0:	88fb      	ldrh	r3, [r7, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e075      	b.n	800a3e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_UART_Transmit+0x3e>
 800a304:	2302      	movs	r3, #2
 800a306:	e06e      	b.n	800a3e6 <HAL_UART_Transmit+0x11c>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2221      	movs	r2, #33	@ 0x21
 800a31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a31e:	f7fb ffdf 	bl	80062e0 <HAL_GetTick>
 800a322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	88fa      	ldrh	r2, [r7, #6]
 800a328:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a338:	d108      	bne.n	800a34c <HAL_UART_Transmit+0x82>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d104      	bne.n	800a34c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a342:	2300      	movs	r3, #0
 800a344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	e003      	b.n	800a354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a350:	2300      	movs	r3, #0
 800a352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800a35c:	e02a      	b.n	800a3b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2200      	movs	r2, #0
 800a366:	2180      	movs	r1, #128	@ 0x80
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fa3d 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e036      	b.n	800a3e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10b      	bne.n	800a396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a38c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	3302      	adds	r3, #2
 800a392:	61bb      	str	r3, [r7, #24]
 800a394:	e007      	b.n	800a3a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1cf      	bne.n	800a35e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2140      	movs	r1, #64	@ 0x40
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 fa0d 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e006      	b.n	800a3e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e000      	b.n	800a3e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a3e4:	2302      	movs	r3, #2
  }
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b20      	cmp	r3, #32
 800a406:	d11d      	bne.n	800a444 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <HAL_UART_Receive_IT+0x26>
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e016      	b.n	800a446 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_UART_Receive_IT+0x38>
 800a422:	2302      	movs	r3, #2
 800a424:	e00f      	b.n	800a446 <HAL_UART_Receive_IT+0x58>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a434:	88fb      	ldrh	r3, [r7, #6]
 800a436:	461a      	mov	r2, r3
 800a438:	68b9      	ldr	r1, [r7, #8]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 fa1e 	bl	800a87c <UART_Start_Receive_IT>
 800a440:	4603      	mov	r3, r0
 800a442:	e000      	b.n	800a446 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a444:	2302      	movs	r3, #2
  }
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	@ 0x28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a470:	2300      	movs	r3, #0
 800a472:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a474:	2300      	movs	r3, #0
 800a476:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	f003 030f 	and.w	r3, r3, #15
 800a47e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10d      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	f003 0320 	and.w	r3, r3, #32
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d008      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x52>
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fad1 	bl	800aa42 <UART_Receive_IT>
      return;
 800a4a0:	e17c      	b.n	800a79c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80b1 	beq.w	800a60c <HAL_UART_IRQHandler+0x1bc>
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x70>
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 80a6 	beq.w	800a60c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <HAL_UART_IRQHandler+0x90>
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d8:	f043 0201 	orr.w	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	f003 0304 	and.w	r3, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <HAL_UART_IRQHandler+0xb0>
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f8:	f043 0202 	orr.w	r2, r3, #2
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00a      	beq.n	800a520 <HAL_UART_IRQHandler+0xd0>
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a518:	f043 0204 	orr.w	r2, r3, #4
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	f003 0308 	and.w	r3, r3, #8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00f      	beq.n	800a54a <HAL_UART_IRQHandler+0xfa>
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b00      	cmp	r3, #0
 800a532:	d104      	bne.n	800a53e <HAL_UART_IRQHandler+0xee>
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a542:	f043 0208 	orr.w	r2, r3, #8
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 811f 	beq.w	800a792 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d007      	beq.n	800a56e <HAL_UART_IRQHandler+0x11e>
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f003 0320 	and.w	r3, r3, #32
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa6a 	bl	800aa42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a578:	2b40      	cmp	r3, #64	@ 0x40
 800a57a:	bf0c      	ite	eq
 800a57c:	2301      	moveq	r3, #1
 800a57e:	2300      	movne	r3, #0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a588:	f003 0308 	and.w	r3, r3, #8
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <HAL_UART_IRQHandler+0x146>
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d031      	beq.n	800a5fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f9aa 	bl	800a8f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a6:	2b40      	cmp	r3, #64	@ 0x40
 800a5a8:	d123      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	695a      	ldr	r2, [r3, #20]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d013      	beq.n	800a5ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c6:	4a77      	ldr	r2, [pc, #476]	@ (800a7a4 <HAL_UART_IRQHandler+0x354>)
 800a5c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fd fa9f 	bl	8007b12 <HAL_DMA_Abort_IT>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d016      	beq.n	800a608 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e8:	e00e      	b.n	800a608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f8e6 	bl	800a7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f0:	e00a      	b.n	800a608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f8e2 	bl	800a7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f8:	e006      	b.n	800a608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f8de 	bl	800a7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a606:	e0c4      	b.n	800a792 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a608:	bf00      	nop
    return;
 800a60a:	e0c2      	b.n	800a792 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a610:	2b01      	cmp	r3, #1
 800a612:	f040 80a2 	bne.w	800a75a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	f003 0310 	and.w	r3, r3, #16
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 809c 	beq.w	800a75a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	f003 0310 	and.w	r3, r3, #16
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 8096 	beq.w	800a75a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64e:	2b40      	cmp	r3, #64	@ 0x40
 800a650:	d14f      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a65c:	8a3b      	ldrh	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8099 	beq.w	800a796 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a668:	8a3a      	ldrh	r2, [r7, #16]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	f080 8093 	bcs.w	800a796 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	8a3a      	ldrh	r2, [r7, #16]
 800a674:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a680:	d02b      	beq.n	800a6da <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a690:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	695a      	ldr	r2, [r3, #20]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f022 0201 	bic.w	r2, r2, #1
 800a6a0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	695a      	ldr	r2, [r3, #20]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6b0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 0210 	bic.w	r2, r2, #16
 800a6ce:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fd f9ac 	bl	8007a32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f870 	bl	800a7d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a6f0:	e051      	b.n	800a796 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a704:	b29b      	uxth	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d047      	beq.n	800a79a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a70a:	8a7b      	ldrh	r3, [r7, #18]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d044      	beq.n	800a79a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68da      	ldr	r2, [r3, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800a71e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695a      	ldr	r2, [r3, #20]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 0201 	bic.w	r2, r2, #1
 800a72e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2220      	movs	r2, #32
 800a734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 0210 	bic.w	r2, r2, #16
 800a74c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a74e:	8a7b      	ldrh	r3, [r7, #18]
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f83c 	bl	800a7d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a758:	e01f      	b.n	800a79a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a760:	2b00      	cmp	r3, #0
 800a762:	d008      	beq.n	800a776 <HAL_UART_IRQHandler+0x326>
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f8ff 	bl	800a972 <UART_Transmit_IT>
    return;
 800a774:	e012      	b.n	800a79c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00d      	beq.n	800a79c <HAL_UART_IRQHandler+0x34c>
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f941 	bl	800aa12 <UART_EndTransmit_IT>
    return;
 800a790:	e004      	b.n	800a79c <HAL_UART_IRQHandler+0x34c>
    return;
 800a792:	bf00      	nop
 800a794:	e002      	b.n	800a79c <HAL_UART_IRQHandler+0x34c>
      return;
 800a796:	bf00      	nop
 800a798:	e000      	b.n	800a79c <HAL_UART_IRQHandler+0x34c>
      return;
 800a79a:	bf00      	nop
  }
}
 800a79c:	3728      	adds	r7, #40	@ 0x28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	0800a94b 	.word	0x0800a94b

0800a7a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f8:	e02c      	b.n	800a854 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d028      	beq.n	800a854 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d007      	beq.n	800a818 <UART_WaitOnFlagUntilTimeout+0x30>
 800a808:	f7fb fd6a 	bl	80062e0 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	429a      	cmp	r2, r3
 800a816:	d21d      	bcs.n	800a854 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800a826:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	695a      	ldr	r2, [r3, #20]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 0201 	bic.w	r2, r2, #1
 800a836:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2220      	movs	r2, #32
 800a83c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2220      	movs	r2, #32
 800a844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e00f      	b.n	800a874 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	4013      	ands	r3, r2
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	429a      	cmp	r2, r3
 800a862:	bf0c      	ite	eq
 800a864:	2301      	moveq	r3, #1
 800a866:	2300      	movne	r3, #0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	461a      	mov	r2, r3
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d0c3      	beq.n	800a7fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	88fa      	ldrh	r2, [r7, #6]
 800a894:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	88fa      	ldrh	r2, [r7, #6]
 800a89a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2222      	movs	r2, #34	@ 0x22
 800a8a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	695a      	ldr	r2, [r3, #20]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f042 0220 	orr.w	r2, r2, #32
 800a8e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800a906:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	695a      	ldr	r2, [r3, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0201 	bic.w	r2, r2, #1
 800a916:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d107      	bne.n	800a930 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0210 	bic.w	r2, r2, #16
 800a92e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2220      	movs	r2, #32
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7ff ff29 	bl	800a7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a972:	b480      	push	{r7}
 800a974:	b085      	sub	sp, #20
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b21      	cmp	r3, #33	@ 0x21
 800a984:	d13e      	bne.n	800aa04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a98e:	d114      	bne.n	800a9ba <UART_Transmit_IT+0x48>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d110      	bne.n	800a9ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	1c9a      	adds	r2, r3, #2
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	621a      	str	r2, [r3, #32]
 800a9b8:	e008      	b.n	800a9cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	1c59      	adds	r1, r3, #1
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6211      	str	r1, [r2, #32]
 800a9c4:	781a      	ldrb	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10f      	bne.n	800aa00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a9ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e000      	b.n	800aa06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa04:	2302      	movs	r3, #2
  }
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff feb8 	bl	800a7a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b22      	cmp	r3, #34	@ 0x22
 800aa54:	f040 8087 	bne.w	800ab66 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa60:	d117      	bne.n	800aa92 <UART_Receive_IT+0x50>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d113      	bne.n	800aa92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa72:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8a:	1c9a      	adds	r2, r3, #2
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa90:	e026      	b.n	800aae0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa96:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaa4:	d007      	beq.n	800aab6 <UART_Receive_IT+0x74>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <UART_Receive_IT+0x82>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	701a      	strb	r2, [r3, #0]
 800aac2:	e008      	b.n	800aad6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	4619      	mov	r1, r3
 800aaee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d136      	bne.n	800ab62 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0220 	bic.w	r2, r2, #32
 800ab02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	695a      	ldr	r2, [r3, #20]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f022 0201 	bic.w	r2, r2, #1
 800ab22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d10e      	bne.n	800ab52 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f022 0210 	bic.w	r2, r2, #16
 800ab42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe40 	bl	800a7d0 <HAL_UARTEx_RxEventCallback>
 800ab50:	e002      	b.n	800ab58 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7fb fb22 	bl	800619c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e002      	b.n	800ab68 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e000      	b.n	800ab68 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ab66:	2302      	movs	r3, #2
  }
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab74:	b0c0      	sub	sp, #256	@ 0x100
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ab88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab8c:	68d9      	ldr	r1, [r3, #12]
 800ab8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	ea40 0301 	orr.w	r3, r0, r1
 800ab98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	431a      	orrs	r2, r3
 800aba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	431a      	orrs	r2, r3
 800abb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800abbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800abc8:	f021 010c 	bic.w	r1, r1, #12
 800abcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800abd6:	430b      	orrs	r3, r1
 800abd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800abe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abea:	6999      	ldr	r1, [r3, #24]
 800abec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	ea40 0301 	orr.w	r3, r0, r1
 800abf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800abf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b8f      	ldr	r3, [pc, #572]	@ (800ae3c <UART_SetConfig+0x2cc>)
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d005      	beq.n	800ac10 <UART_SetConfig+0xa0>
 800ac04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	4b8d      	ldr	r3, [pc, #564]	@ (800ae40 <UART_SetConfig+0x2d0>)
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d104      	bne.n	800ac1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac10:	f7fd faa6 	bl	8008160 <HAL_RCC_GetPCLK2Freq>
 800ac14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ac18:	e003      	b.n	800ac22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac1a:	f7fd fa8d 	bl	8008138 <HAL_RCC_GetPCLK1Freq>
 800ac1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac2c:	f040 810c 	bne.w	800ae48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ac3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ac42:	4622      	mov	r2, r4
 800ac44:	462b      	mov	r3, r5
 800ac46:	1891      	adds	r1, r2, r2
 800ac48:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ac4a:	415b      	adcs	r3, r3
 800ac4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ac52:	4621      	mov	r1, r4
 800ac54:	eb12 0801 	adds.w	r8, r2, r1
 800ac58:	4629      	mov	r1, r5
 800ac5a:	eb43 0901 	adc.w	r9, r3, r1
 800ac5e:	f04f 0200 	mov.w	r2, #0
 800ac62:	f04f 0300 	mov.w	r3, #0
 800ac66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac72:	4690      	mov	r8, r2
 800ac74:	4699      	mov	r9, r3
 800ac76:	4623      	mov	r3, r4
 800ac78:	eb18 0303 	adds.w	r3, r8, r3
 800ac7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ac80:	462b      	mov	r3, r5
 800ac82:	eb49 0303 	adc.w	r3, r9, r3
 800ac86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ac8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ac9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac9e:	460b      	mov	r3, r1
 800aca0:	18db      	adds	r3, r3, r3
 800aca2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aca4:	4613      	mov	r3, r2
 800aca6:	eb42 0303 	adc.w	r3, r2, r3
 800acaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800acac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800acb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800acb4:	f7f6 f808 	bl	8000cc8 <__aeabi_uldivmod>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4b61      	ldr	r3, [pc, #388]	@ (800ae44 <UART_SetConfig+0x2d4>)
 800acbe:	fba3 2302 	umull	r2, r3, r3, r2
 800acc2:	095b      	lsrs	r3, r3, #5
 800acc4:	011c      	lsls	r4, r3, #4
 800acc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acca:	2200      	movs	r2, #0
 800accc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800acd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800acd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	1891      	adds	r1, r2, r2
 800acde:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ace0:	415b      	adcs	r3, r3
 800ace2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ace4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ace8:	4641      	mov	r1, r8
 800acea:	eb12 0a01 	adds.w	sl, r2, r1
 800acee:	4649      	mov	r1, r9
 800acf0:	eb43 0b01 	adc.w	fp, r3, r1
 800acf4:	f04f 0200 	mov.w	r2, #0
 800acf8:	f04f 0300 	mov.w	r3, #0
 800acfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ad00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ad04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad08:	4692      	mov	sl, r2
 800ad0a:	469b      	mov	fp, r3
 800ad0c:	4643      	mov	r3, r8
 800ad0e:	eb1a 0303 	adds.w	r3, sl, r3
 800ad12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad16:	464b      	mov	r3, r9
 800ad18:	eb4b 0303 	adc.w	r3, fp, r3
 800ad1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ad30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad34:	460b      	mov	r3, r1
 800ad36:	18db      	adds	r3, r3, r3
 800ad38:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	eb42 0303 	adc.w	r3, r2, r3
 800ad40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ad46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ad4a:	f7f5 ffbd 	bl	8000cc8 <__aeabi_uldivmod>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4611      	mov	r1, r2
 800ad54:	4b3b      	ldr	r3, [pc, #236]	@ (800ae44 <UART_SetConfig+0x2d4>)
 800ad56:	fba3 2301 	umull	r2, r3, r3, r1
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	2264      	movs	r2, #100	@ 0x64
 800ad5e:	fb02 f303 	mul.w	r3, r2, r3
 800ad62:	1acb      	subs	r3, r1, r3
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ad6a:	4b36      	ldr	r3, [pc, #216]	@ (800ae44 <UART_SetConfig+0x2d4>)
 800ad6c:	fba3 2302 	umull	r2, r3, r3, r2
 800ad70:	095b      	lsrs	r3, r3, #5
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ad78:	441c      	add	r4, r3
 800ad7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ad88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ad8c:	4642      	mov	r2, r8
 800ad8e:	464b      	mov	r3, r9
 800ad90:	1891      	adds	r1, r2, r2
 800ad92:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ad94:	415b      	adcs	r3, r3
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ad9c:	4641      	mov	r1, r8
 800ad9e:	1851      	adds	r1, r2, r1
 800ada0:	6339      	str	r1, [r7, #48]	@ 0x30
 800ada2:	4649      	mov	r1, r9
 800ada4:	414b      	adcs	r3, r1
 800ada6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	f04f 0300 	mov.w	r3, #0
 800adb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800adb4:	4659      	mov	r1, fp
 800adb6:	00cb      	lsls	r3, r1, #3
 800adb8:	4651      	mov	r1, sl
 800adba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adbe:	4651      	mov	r1, sl
 800adc0:	00ca      	lsls	r2, r1, #3
 800adc2:	4610      	mov	r0, r2
 800adc4:	4619      	mov	r1, r3
 800adc6:	4603      	mov	r3, r0
 800adc8:	4642      	mov	r2, r8
 800adca:	189b      	adds	r3, r3, r2
 800adcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800add0:	464b      	mov	r3, r9
 800add2:	460a      	mov	r2, r1
 800add4:	eb42 0303 	adc.w	r3, r2, r3
 800add8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800addc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ade8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800adec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800adf0:	460b      	mov	r3, r1
 800adf2:	18db      	adds	r3, r3, r3
 800adf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adf6:	4613      	mov	r3, r2
 800adf8:	eb42 0303 	adc.w	r3, r2, r3
 800adfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ae02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ae06:	f7f5 ff5f 	bl	8000cc8 <__aeabi_uldivmod>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae44 <UART_SetConfig+0x2d4>)
 800ae10:	fba3 1302 	umull	r1, r3, r3, r2
 800ae14:	095b      	lsrs	r3, r3, #5
 800ae16:	2164      	movs	r1, #100	@ 0x64
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	3332      	adds	r3, #50	@ 0x32
 800ae22:	4a08      	ldr	r2, [pc, #32]	@ (800ae44 <UART_SetConfig+0x2d4>)
 800ae24:	fba2 2303 	umull	r2, r3, r2, r3
 800ae28:	095b      	lsrs	r3, r3, #5
 800ae2a:	f003 0207 	and.w	r2, r3, #7
 800ae2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4422      	add	r2, r4
 800ae36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ae38:	e106      	b.n	800b048 <UART_SetConfig+0x4d8>
 800ae3a:	bf00      	nop
 800ae3c:	40011000 	.word	0x40011000
 800ae40:	40011400 	.word	0x40011400
 800ae44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ae56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ae5a:	4642      	mov	r2, r8
 800ae5c:	464b      	mov	r3, r9
 800ae5e:	1891      	adds	r1, r2, r2
 800ae60:	6239      	str	r1, [r7, #32]
 800ae62:	415b      	adcs	r3, r3
 800ae64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae6a:	4641      	mov	r1, r8
 800ae6c:	1854      	adds	r4, r2, r1
 800ae6e:	4649      	mov	r1, r9
 800ae70:	eb43 0501 	adc.w	r5, r3, r1
 800ae74:	f04f 0200 	mov.w	r2, #0
 800ae78:	f04f 0300 	mov.w	r3, #0
 800ae7c:	00eb      	lsls	r3, r5, #3
 800ae7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae82:	00e2      	lsls	r2, r4, #3
 800ae84:	4614      	mov	r4, r2
 800ae86:	461d      	mov	r5, r3
 800ae88:	4643      	mov	r3, r8
 800ae8a:	18e3      	adds	r3, r4, r3
 800ae8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae90:	464b      	mov	r3, r9
 800ae92:	eb45 0303 	adc.w	r3, r5, r3
 800ae96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ae9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aeaa:	f04f 0200 	mov.w	r2, #0
 800aeae:	f04f 0300 	mov.w	r3, #0
 800aeb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	008b      	lsls	r3, r1, #2
 800aeba:	4621      	mov	r1, r4
 800aebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aec0:	4621      	mov	r1, r4
 800aec2:	008a      	lsls	r2, r1, #2
 800aec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800aec8:	f7f5 fefe 	bl	8000cc8 <__aeabi_uldivmod>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4b60      	ldr	r3, [pc, #384]	@ (800b054 <UART_SetConfig+0x4e4>)
 800aed2:	fba3 2302 	umull	r2, r3, r3, r2
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	011c      	lsls	r4, r3, #4
 800aeda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aeec:	4642      	mov	r2, r8
 800aeee:	464b      	mov	r3, r9
 800aef0:	1891      	adds	r1, r2, r2
 800aef2:	61b9      	str	r1, [r7, #24]
 800aef4:	415b      	adcs	r3, r3
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aefc:	4641      	mov	r1, r8
 800aefe:	1851      	adds	r1, r2, r1
 800af00:	6139      	str	r1, [r7, #16]
 800af02:	4649      	mov	r1, r9
 800af04:	414b      	adcs	r3, r1
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	f04f 0200 	mov.w	r2, #0
 800af0c:	f04f 0300 	mov.w	r3, #0
 800af10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af14:	4659      	mov	r1, fp
 800af16:	00cb      	lsls	r3, r1, #3
 800af18:	4651      	mov	r1, sl
 800af1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af1e:	4651      	mov	r1, sl
 800af20:	00ca      	lsls	r2, r1, #3
 800af22:	4610      	mov	r0, r2
 800af24:	4619      	mov	r1, r3
 800af26:	4603      	mov	r3, r0
 800af28:	4642      	mov	r2, r8
 800af2a:	189b      	adds	r3, r3, r2
 800af2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af30:	464b      	mov	r3, r9
 800af32:	460a      	mov	r2, r1
 800af34:	eb42 0303 	adc.w	r3, r2, r3
 800af38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800af48:	f04f 0200 	mov.w	r2, #0
 800af4c:	f04f 0300 	mov.w	r3, #0
 800af50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800af54:	4649      	mov	r1, r9
 800af56:	008b      	lsls	r3, r1, #2
 800af58:	4641      	mov	r1, r8
 800af5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af5e:	4641      	mov	r1, r8
 800af60:	008a      	lsls	r2, r1, #2
 800af62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800af66:	f7f5 feaf 	bl	8000cc8 <__aeabi_uldivmod>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4611      	mov	r1, r2
 800af70:	4b38      	ldr	r3, [pc, #224]	@ (800b054 <UART_SetConfig+0x4e4>)
 800af72:	fba3 2301 	umull	r2, r3, r3, r1
 800af76:	095b      	lsrs	r3, r3, #5
 800af78:	2264      	movs	r2, #100	@ 0x64
 800af7a:	fb02 f303 	mul.w	r3, r2, r3
 800af7e:	1acb      	subs	r3, r1, r3
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	3332      	adds	r3, #50	@ 0x32
 800af84:	4a33      	ldr	r2, [pc, #204]	@ (800b054 <UART_SetConfig+0x4e4>)
 800af86:	fba2 2303 	umull	r2, r3, r2, r3
 800af8a:	095b      	lsrs	r3, r3, #5
 800af8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af90:	441c      	add	r4, r3
 800af92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af96:	2200      	movs	r2, #0
 800af98:	673b      	str	r3, [r7, #112]	@ 0x70
 800af9a:	677a      	str	r2, [r7, #116]	@ 0x74
 800af9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800afa0:	4642      	mov	r2, r8
 800afa2:	464b      	mov	r3, r9
 800afa4:	1891      	adds	r1, r2, r2
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	415b      	adcs	r3, r3
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afb0:	4641      	mov	r1, r8
 800afb2:	1851      	adds	r1, r2, r1
 800afb4:	6039      	str	r1, [r7, #0]
 800afb6:	4649      	mov	r1, r9
 800afb8:	414b      	adcs	r3, r1
 800afba:	607b      	str	r3, [r7, #4]
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	f04f 0300 	mov.w	r3, #0
 800afc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800afc8:	4659      	mov	r1, fp
 800afca:	00cb      	lsls	r3, r1, #3
 800afcc:	4651      	mov	r1, sl
 800afce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afd2:	4651      	mov	r1, sl
 800afd4:	00ca      	lsls	r2, r1, #3
 800afd6:	4610      	mov	r0, r2
 800afd8:	4619      	mov	r1, r3
 800afda:	4603      	mov	r3, r0
 800afdc:	4642      	mov	r2, r8
 800afde:	189b      	adds	r3, r3, r2
 800afe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afe2:	464b      	mov	r3, r9
 800afe4:	460a      	mov	r2, r1
 800afe6:	eb42 0303 	adc.w	r3, r2, r3
 800afea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800afec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	663b      	str	r3, [r7, #96]	@ 0x60
 800aff6:	667a      	str	r2, [r7, #100]	@ 0x64
 800aff8:	f04f 0200 	mov.w	r2, #0
 800affc:	f04f 0300 	mov.w	r3, #0
 800b000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b004:	4649      	mov	r1, r9
 800b006:	008b      	lsls	r3, r1, #2
 800b008:	4641      	mov	r1, r8
 800b00a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b00e:	4641      	mov	r1, r8
 800b010:	008a      	lsls	r2, r1, #2
 800b012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b016:	f7f5 fe57 	bl	8000cc8 <__aeabi_uldivmod>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <UART_SetConfig+0x4e4>)
 800b020:	fba3 1302 	umull	r1, r3, r3, r2
 800b024:	095b      	lsrs	r3, r3, #5
 800b026:	2164      	movs	r1, #100	@ 0x64
 800b028:	fb01 f303 	mul.w	r3, r1, r3
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	011b      	lsls	r3, r3, #4
 800b030:	3332      	adds	r3, #50	@ 0x32
 800b032:	4a08      	ldr	r2, [pc, #32]	@ (800b054 <UART_SetConfig+0x4e4>)
 800b034:	fba2 2303 	umull	r2, r3, r2, r3
 800b038:	095b      	lsrs	r3, r3, #5
 800b03a:	f003 020f 	and.w	r2, r3, #15
 800b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4422      	add	r2, r4
 800b046:	609a      	str	r2, [r3, #8]
}
 800b048:	bf00      	nop
 800b04a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b04e:	46bd      	mov	sp, r7
 800b050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b054:	51eb851f 	.word	0x51eb851f

0800b058 <exp>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	ed2d 8b02 	vpush	{d8}
 800b05e:	ec55 4b10 	vmov	r4, r5, d0
 800b062:	f000 f92d 	bl	800b2c0 <__ieee754_exp>
 800b066:	eeb0 8a40 	vmov.f32	s16, s0
 800b06a:	eef0 8a60 	vmov.f32	s17, s1
 800b06e:	ec45 4b10 	vmov	d0, r4, r5
 800b072:	f000 f877 	bl	800b164 <finite>
 800b076:	b168      	cbz	r0, 800b094 <exp+0x3c>
 800b078:	a317      	add	r3, pc, #92	@ (adr r3, 800b0d8 <exp+0x80>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	4620      	mov	r0, r4
 800b080:	4629      	mov	r1, r5
 800b082:	f7f5 fd69 	bl	8000b58 <__aeabi_dcmpgt>
 800b086:	b160      	cbz	r0, 800b0a2 <exp+0x4a>
 800b088:	f002 f8b2 	bl	800d1f0 <__errno>
 800b08c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800b0c8 <exp+0x70>
 800b090:	2322      	movs	r3, #34	@ 0x22
 800b092:	6003      	str	r3, [r0, #0]
 800b094:	eeb0 0a48 	vmov.f32	s0, s16
 800b098:	eef0 0a68 	vmov.f32	s1, s17
 800b09c:	ecbd 8b02 	vpop	{d8}
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
 800b0a2:	a30f      	add	r3, pc, #60	@ (adr r3, 800b0e0 <exp+0x88>)
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	f7f5 fd36 	bl	8000b1c <__aeabi_dcmplt>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d0ef      	beq.n	800b094 <exp+0x3c>
 800b0b4:	f002 f89c 	bl	800d1f0 <__errno>
 800b0b8:	2322      	movs	r3, #34	@ 0x22
 800b0ba:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800b0d0 <exp+0x78>
 800b0be:	6003      	str	r3, [r0, #0]
 800b0c0:	e7e8      	b.n	800b094 <exp+0x3c>
 800b0c2:	bf00      	nop
 800b0c4:	f3af 8000 	nop.w
 800b0c8:	00000000 	.word	0x00000000
 800b0cc:	7ff00000 	.word	0x7ff00000
	...
 800b0d8:	fefa39ef 	.word	0xfefa39ef
 800b0dc:	40862e42 	.word	0x40862e42
 800b0e0:	d52d3051 	.word	0xd52d3051
 800b0e4:	c0874910 	.word	0xc0874910

0800b0e8 <fmodf>:
 800b0e8:	b508      	push	{r3, lr}
 800b0ea:	ed2d 8b02 	vpush	{d8}
 800b0ee:	eef0 8a40 	vmov.f32	s17, s0
 800b0f2:	eeb0 8a60 	vmov.f32	s16, s1
 800b0f6:	f000 fa5d 	bl	800b5b4 <__ieee754_fmodf>
 800b0fa:	eef4 8a48 	vcmp.f32	s17, s16
 800b0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b102:	d60c      	bvs.n	800b11e <fmodf+0x36>
 800b104:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b124 <fmodf+0x3c>
 800b108:	eeb4 8a68 	vcmp.f32	s16, s17
 800b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b110:	d105      	bne.n	800b11e <fmodf+0x36>
 800b112:	f002 f86d 	bl	800d1f0 <__errno>
 800b116:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b11a:	2321      	movs	r3, #33	@ 0x21
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	ecbd 8b02 	vpop	{d8}
 800b122:	bd08      	pop	{r3, pc}
 800b124:	00000000 	.word	0x00000000

0800b128 <sqrtf>:
 800b128:	b508      	push	{r3, lr}
 800b12a:	ed2d 8b02 	vpush	{d8}
 800b12e:	eeb0 8a40 	vmov.f32	s16, s0
 800b132:	f000 f879 	bl	800b228 <__ieee754_sqrtf>
 800b136:	eeb4 8a48 	vcmp.f32	s16, s16
 800b13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13e:	d60c      	bvs.n	800b15a <sqrtf+0x32>
 800b140:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b160 <sqrtf+0x38>
 800b144:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14c:	d505      	bpl.n	800b15a <sqrtf+0x32>
 800b14e:	f002 f84f 	bl	800d1f0 <__errno>
 800b152:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b156:	2321      	movs	r3, #33	@ 0x21
 800b158:	6003      	str	r3, [r0, #0]
 800b15a:	ecbd 8b02 	vpop	{d8}
 800b15e:	bd08      	pop	{r3, pc}
 800b160:	00000000 	.word	0x00000000

0800b164 <finite>:
 800b164:	b082      	sub	sp, #8
 800b166:	ed8d 0b00 	vstr	d0, [sp]
 800b16a:	9801      	ldr	r0, [sp, #4]
 800b16c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b170:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b174:	0fc0      	lsrs	r0, r0, #31
 800b176:	b002      	add	sp, #8
 800b178:	4770      	bx	lr

0800b17a <fmaxf>:
 800b17a:	b508      	push	{r3, lr}
 800b17c:	ed2d 8b02 	vpush	{d8}
 800b180:	eeb0 8a40 	vmov.f32	s16, s0
 800b184:	eef0 8a60 	vmov.f32	s17, s1
 800b188:	f000 f832 	bl	800b1f0 <__fpclassifyf>
 800b18c:	b930      	cbnz	r0, 800b19c <fmaxf+0x22>
 800b18e:	eeb0 8a68 	vmov.f32	s16, s17
 800b192:	eeb0 0a48 	vmov.f32	s0, s16
 800b196:	ecbd 8b02 	vpop	{d8}
 800b19a:	bd08      	pop	{r3, pc}
 800b19c:	eeb0 0a68 	vmov.f32	s0, s17
 800b1a0:	f000 f826 	bl	800b1f0 <__fpclassifyf>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d0f4      	beq.n	800b192 <fmaxf+0x18>
 800b1a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b0:	dded      	ble.n	800b18e <fmaxf+0x14>
 800b1b2:	e7ee      	b.n	800b192 <fmaxf+0x18>

0800b1b4 <fminf>:
 800b1b4:	b508      	push	{r3, lr}
 800b1b6:	ed2d 8b02 	vpush	{d8}
 800b1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800b1be:	eef0 8a60 	vmov.f32	s17, s1
 800b1c2:	f000 f815 	bl	800b1f0 <__fpclassifyf>
 800b1c6:	b930      	cbnz	r0, 800b1d6 <fminf+0x22>
 800b1c8:	eeb0 8a68 	vmov.f32	s16, s17
 800b1cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b1d0:	ecbd 8b02 	vpop	{d8}
 800b1d4:	bd08      	pop	{r3, pc}
 800b1d6:	eeb0 0a68 	vmov.f32	s0, s17
 800b1da:	f000 f809 	bl	800b1f0 <__fpclassifyf>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0f4      	beq.n	800b1cc <fminf+0x18>
 800b1e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	d5ed      	bpl.n	800b1c8 <fminf+0x14>
 800b1ec:	e7ee      	b.n	800b1cc <fminf+0x18>
	...

0800b1f0 <__fpclassifyf>:
 800b1f0:	ee10 3a10 	vmov	r3, s0
 800b1f4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800b1f8:	d00d      	beq.n	800b216 <__fpclassifyf+0x26>
 800b1fa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b1fe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b202:	d30a      	bcc.n	800b21a <__fpclassifyf+0x2a>
 800b204:	4b07      	ldr	r3, [pc, #28]	@ (800b224 <__fpclassifyf+0x34>)
 800b206:	1e42      	subs	r2, r0, #1
 800b208:	429a      	cmp	r2, r3
 800b20a:	d908      	bls.n	800b21e <__fpclassifyf+0x2e>
 800b20c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800b210:	4258      	negs	r0, r3
 800b212:	4158      	adcs	r0, r3
 800b214:	4770      	bx	lr
 800b216:	2002      	movs	r0, #2
 800b218:	4770      	bx	lr
 800b21a:	2004      	movs	r0, #4
 800b21c:	4770      	bx	lr
 800b21e:	2003      	movs	r0, #3
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	007ffffe 	.word	0x007ffffe

0800b228 <__ieee754_sqrtf>:
 800b228:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b22c:	4770      	bx	lr
	...

0800b230 <round>:
 800b230:	ec51 0b10 	vmov	r0, r1, d0
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b23a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800b23e:	2a13      	cmp	r2, #19
 800b240:	460b      	mov	r3, r1
 800b242:	4605      	mov	r5, r0
 800b244:	dc1b      	bgt.n	800b27e <round+0x4e>
 800b246:	2a00      	cmp	r2, #0
 800b248:	da0b      	bge.n	800b262 <round+0x32>
 800b24a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b24e:	3201      	adds	r2, #1
 800b250:	bf04      	itt	eq
 800b252:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b256:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b25a:	2200      	movs	r2, #0
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	e015      	b.n	800b28e <round+0x5e>
 800b262:	4c15      	ldr	r4, [pc, #84]	@ (800b2b8 <round+0x88>)
 800b264:	4114      	asrs	r4, r2
 800b266:	ea04 0601 	and.w	r6, r4, r1
 800b26a:	4306      	orrs	r6, r0
 800b26c:	d00f      	beq.n	800b28e <round+0x5e>
 800b26e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b272:	fa41 f202 	asr.w	r2, r1, r2
 800b276:	4413      	add	r3, r2
 800b278:	ea23 0304 	bic.w	r3, r3, r4
 800b27c:	e7ed      	b.n	800b25a <round+0x2a>
 800b27e:	2a33      	cmp	r2, #51	@ 0x33
 800b280:	dd08      	ble.n	800b294 <round+0x64>
 800b282:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b286:	d102      	bne.n	800b28e <round+0x5e>
 800b288:	4602      	mov	r2, r0
 800b28a:	f7f5 f81f 	bl	80002cc <__adddf3>
 800b28e:	ec41 0b10 	vmov	d0, r0, r1
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800b298:	f04f 34ff 	mov.w	r4, #4294967295
 800b29c:	40f4      	lsrs	r4, r6
 800b29e:	4204      	tst	r4, r0
 800b2a0:	d0f5      	beq.n	800b28e <round+0x5e>
 800b2a2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	408a      	lsls	r2, r1
 800b2aa:	1952      	adds	r2, r2, r5
 800b2ac:	bf28      	it	cs
 800b2ae:	3301      	addcs	r3, #1
 800b2b0:	ea22 0204 	bic.w	r2, r2, r4
 800b2b4:	e7d2      	b.n	800b25c <round+0x2c>
 800b2b6:	bf00      	nop
 800b2b8:	000fffff 	.word	0x000fffff
 800b2bc:	00000000 	.word	0x00000000

0800b2c0 <__ieee754_exp>:
 800b2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c4:	ec55 4b10 	vmov	r4, r5, d0
 800b2c8:	49b1      	ldr	r1, [pc, #708]	@ (800b590 <__ieee754_exp+0x2d0>)
 800b2ca:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b2ce:	428a      	cmp	r2, r1
 800b2d0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b2d4:	d936      	bls.n	800b344 <__ieee754_exp+0x84>
 800b2d6:	49af      	ldr	r1, [pc, #700]	@ (800b594 <__ieee754_exp+0x2d4>)
 800b2d8:	428a      	cmp	r2, r1
 800b2da:	d914      	bls.n	800b306 <__ieee754_exp+0x46>
 800b2dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b2e0:	4323      	orrs	r3, r4
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	d007      	beq.n	800b2f6 <__ieee754_exp+0x36>
 800b2e6:	462b      	mov	r3, r5
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f7f4 ffee 	bl	80002cc <__adddf3>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	e002      	b.n	800b2fc <__ieee754_exp+0x3c>
 800b2f6:	2e00      	cmp	r6, #0
 800b2f8:	f040 8118 	bne.w	800b52c <__ieee754_exp+0x26c>
 800b2fc:	ec45 4b10 	vmov	d0, r4, r5
 800b300:	b004      	add	sp, #16
 800b302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b306:	a38c      	add	r3, pc, #560	@ (adr r3, 800b538 <__ieee754_exp+0x278>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	4620      	mov	r0, r4
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f5 fc22 	bl	8000b58 <__aeabi_dcmpgt>
 800b314:	4607      	mov	r7, r0
 800b316:	b128      	cbz	r0, 800b324 <__ieee754_exp+0x64>
 800b318:	2000      	movs	r0, #0
 800b31a:	b004      	add	sp, #16
 800b31c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	f000 b9fe 	b.w	800b720 <__math_oflow>
 800b324:	a386      	add	r3, pc, #536	@ (adr r3, 800b540 <__ieee754_exp+0x280>)
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	4620      	mov	r0, r4
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7f5 fbf5 	bl	8000b1c <__aeabi_dcmplt>
 800b332:	2800      	cmp	r0, #0
 800b334:	f000 8087 	beq.w	800b446 <__ieee754_exp+0x186>
 800b338:	4638      	mov	r0, r7
 800b33a:	b004      	add	sp, #16
 800b33c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	f000 b9e6 	b.w	800b710 <__math_uflow>
 800b344:	4b94      	ldr	r3, [pc, #592]	@ (800b598 <__ieee754_exp+0x2d8>)
 800b346:	429a      	cmp	r2, r3
 800b348:	f240 80a9 	bls.w	800b49e <__ieee754_exp+0x1de>
 800b34c:	4b93      	ldr	r3, [pc, #588]	@ (800b59c <__ieee754_exp+0x2dc>)
 800b34e:	429a      	cmp	r2, r3
 800b350:	d879      	bhi.n	800b446 <__ieee754_exp+0x186>
 800b352:	4b93      	ldr	r3, [pc, #588]	@ (800b5a0 <__ieee754_exp+0x2e0>)
 800b354:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f4 ffb2 	bl	80002c8 <__aeabi_dsub>
 800b364:	4b8f      	ldr	r3, [pc, #572]	@ (800b5a4 <__ieee754_exp+0x2e4>)
 800b366:	00f7      	lsls	r7, r6, #3
 800b368:	443b      	add	r3, r7
 800b36a:	ed93 7b00 	vldr	d7, [r3]
 800b36e:	ed8d 7b00 	vstr	d7, [sp]
 800b372:	f086 0a01 	eor.w	sl, r6, #1
 800b376:	4680      	mov	r8, r0
 800b378:	4689      	mov	r9, r1
 800b37a:	ebaa 0a06 	sub.w	sl, sl, r6
 800b37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f4 ff9f 	bl	80002c8 <__aeabi_dsub>
 800b38a:	4604      	mov	r4, r0
 800b38c:	460d      	mov	r5, r1
 800b38e:	4622      	mov	r2, r4
 800b390:	462b      	mov	r3, r5
 800b392:	4620      	mov	r0, r4
 800b394:	4629      	mov	r1, r5
 800b396:	f7f5 f94f 	bl	8000638 <__aeabi_dmul>
 800b39a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b548 <__ieee754_exp+0x288>)
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	f7f5 f948 	bl	8000638 <__aeabi_dmul>
 800b3a8:	a369      	add	r3, pc, #420	@ (adr r3, 800b550 <__ieee754_exp+0x290>)
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	f7f4 ff8b 	bl	80002c8 <__aeabi_dsub>
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	f7f5 f93f 	bl	8000638 <__aeabi_dmul>
 800b3ba:	a367      	add	r3, pc, #412	@ (adr r3, 800b558 <__ieee754_exp+0x298>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f4 ff84 	bl	80002cc <__adddf3>
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	f7f5 f936 	bl	8000638 <__aeabi_dmul>
 800b3cc:	a364      	add	r3, pc, #400	@ (adr r3, 800b560 <__ieee754_exp+0x2a0>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f4 ff79 	bl	80002c8 <__aeabi_dsub>
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	463b      	mov	r3, r7
 800b3da:	f7f5 f92d 	bl	8000638 <__aeabi_dmul>
 800b3de:	a362      	add	r3, pc, #392	@ (adr r3, 800b568 <__ieee754_exp+0x2a8>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	f7f4 ff72 	bl	80002cc <__adddf3>
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	463b      	mov	r3, r7
 800b3ec:	f7f5 f924 	bl	8000638 <__aeabi_dmul>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f4 ff66 	bl	80002c8 <__aeabi_dsub>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4606      	mov	r6, r0
 800b402:	460f      	mov	r7, r1
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f5 f916 	bl	8000638 <__aeabi_dmul>
 800b40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b410:	f1ba 0f00 	cmp.w	sl, #0
 800b414:	d15c      	bne.n	800b4d0 <__ieee754_exp+0x210>
 800b416:	2200      	movs	r2, #0
 800b418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	f7f4 ff52 	bl	80002c8 <__aeabi_dsub>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b42c:	f7f5 fa2e 	bl	800088c <__aeabi_ddiv>
 800b430:	4622      	mov	r2, r4
 800b432:	462b      	mov	r3, r5
 800b434:	f7f4 ff48 	bl	80002c8 <__aeabi_dsub>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	2000      	movs	r0, #0
 800b43e:	495a      	ldr	r1, [pc, #360]	@ (800b5a8 <__ieee754_exp+0x2e8>)
 800b440:	f7f4 ff42 	bl	80002c8 <__aeabi_dsub>
 800b444:	e754      	b.n	800b2f0 <__ieee754_exp+0x30>
 800b446:	4b59      	ldr	r3, [pc, #356]	@ (800b5ac <__ieee754_exp+0x2ec>)
 800b448:	4620      	mov	r0, r4
 800b44a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b44e:	4629      	mov	r1, r5
 800b450:	a347      	add	r3, pc, #284	@ (adr r3, 800b570 <__ieee754_exp+0x2b0>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f5 f8ef 	bl	8000638 <__aeabi_dmul>
 800b45a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b45e:	f7f4 ff35 	bl	80002cc <__adddf3>
 800b462:	f7f5 fb99 	bl	8000b98 <__aeabi_d2iz>
 800b466:	4682      	mov	sl, r0
 800b468:	f7f5 f87c 	bl	8000564 <__aeabi_i2d>
 800b46c:	a342      	add	r3, pc, #264	@ (adr r3, 800b578 <__ieee754_exp+0x2b8>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	4606      	mov	r6, r0
 800b474:	460f      	mov	r7, r1
 800b476:	f7f5 f8df 	bl	8000638 <__aeabi_dmul>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f4 ff21 	bl	80002c8 <__aeabi_dsub>
 800b486:	a33e      	add	r3, pc, #248	@ (adr r3, 800b580 <__ieee754_exp+0x2c0>)
 800b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48c:	4680      	mov	r8, r0
 800b48e:	4689      	mov	r9, r1
 800b490:	4630      	mov	r0, r6
 800b492:	4639      	mov	r1, r7
 800b494:	f7f5 f8d0 	bl	8000638 <__aeabi_dmul>
 800b498:	e9cd 0100 	strd	r0, r1, [sp]
 800b49c:	e76f      	b.n	800b37e <__ieee754_exp+0xbe>
 800b49e:	4b44      	ldr	r3, [pc, #272]	@ (800b5b0 <__ieee754_exp+0x2f0>)
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d810      	bhi.n	800b4c6 <__ieee754_exp+0x206>
 800b4a4:	a338      	add	r3, pc, #224	@ (adr r3, 800b588 <__ieee754_exp+0x2c8>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f7f4 ff0d 	bl	80002cc <__adddf3>
 800b4b2:	4b3d      	ldr	r3, [pc, #244]	@ (800b5a8 <__ieee754_exp+0x2e8>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f7f5 fb4f 	bl	8000b58 <__aeabi_dcmpgt>
 800b4ba:	b138      	cbz	r0, 800b4cc <__ieee754_exp+0x20c>
 800b4bc:	4b3a      	ldr	r3, [pc, #232]	@ (800b5a8 <__ieee754_exp+0x2e8>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	e712      	b.n	800b2ec <__ieee754_exp+0x2c>
 800b4c6:	f04f 0a00 	mov.w	sl, #0
 800b4ca:	e760      	b.n	800b38e <__ieee754_exp+0xce>
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	e75e      	b.n	800b38e <__ieee754_exp+0xce>
 800b4d0:	4632      	mov	r2, r6
 800b4d2:	463b      	mov	r3, r7
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b4da:	f7f4 fef5 	bl	80002c8 <__aeabi_dsub>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e6:	f7f5 f9d1 	bl	800088c <__aeabi_ddiv>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4f2:	f7f4 fee9 	bl	80002c8 <__aeabi_dsub>
 800b4f6:	4642      	mov	r2, r8
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	f7f4 fee5 	bl	80002c8 <__aeabi_dsub>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	2000      	movs	r0, #0
 800b504:	4928      	ldr	r1, [pc, #160]	@ (800b5a8 <__ieee754_exp+0x2e8>)
 800b506:	f7f4 fedf 	bl	80002c8 <__aeabi_dsub>
 800b50a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800b50e:	4592      	cmp	sl, r2
 800b510:	db02      	blt.n	800b518 <__ieee754_exp+0x258>
 800b512:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b516:	e6eb      	b.n	800b2f0 <__ieee754_exp+0x30>
 800b518:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800b51c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b520:	2200      	movs	r2, #0
 800b522:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800b526:	f7f5 f887 	bl	8000638 <__aeabi_dmul>
 800b52a:	e6e1      	b.n	800b2f0 <__ieee754_exp+0x30>
 800b52c:	2400      	movs	r4, #0
 800b52e:	2500      	movs	r5, #0
 800b530:	e6e4      	b.n	800b2fc <__ieee754_exp+0x3c>
 800b532:	bf00      	nop
 800b534:	f3af 8000 	nop.w
 800b538:	fefa39ef 	.word	0xfefa39ef
 800b53c:	40862e42 	.word	0x40862e42
 800b540:	d52d3051 	.word	0xd52d3051
 800b544:	c0874910 	.word	0xc0874910
 800b548:	72bea4d0 	.word	0x72bea4d0
 800b54c:	3e663769 	.word	0x3e663769
 800b550:	c5d26bf1 	.word	0xc5d26bf1
 800b554:	3ebbbd41 	.word	0x3ebbbd41
 800b558:	af25de2c 	.word	0xaf25de2c
 800b55c:	3f11566a 	.word	0x3f11566a
 800b560:	16bebd93 	.word	0x16bebd93
 800b564:	3f66c16c 	.word	0x3f66c16c
 800b568:	5555553e 	.word	0x5555553e
 800b56c:	3fc55555 	.word	0x3fc55555
 800b570:	652b82fe 	.word	0x652b82fe
 800b574:	3ff71547 	.word	0x3ff71547
 800b578:	fee00000 	.word	0xfee00000
 800b57c:	3fe62e42 	.word	0x3fe62e42
 800b580:	35793c76 	.word	0x35793c76
 800b584:	3dea39ef 	.word	0x3dea39ef
 800b588:	8800759c 	.word	0x8800759c
 800b58c:	7e37e43c 	.word	0x7e37e43c
 800b590:	40862e41 	.word	0x40862e41
 800b594:	7fefffff 	.word	0x7fefffff
 800b598:	3fd62e42 	.word	0x3fd62e42
 800b59c:	3ff0a2b1 	.word	0x3ff0a2b1
 800b5a0:	08010788 	.word	0x08010788
 800b5a4:	08010778 	.word	0x08010778
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	08010798 	.word	0x08010798
 800b5b0:	3defffff 	.word	0x3defffff

0800b5b4 <__ieee754_fmodf>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	ee10 6a90 	vmov	r6, s1
 800b5ba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b5be:	1e5a      	subs	r2, r3, #1
 800b5c0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b5c4:	d206      	bcs.n	800b5d4 <__ieee754_fmodf+0x20>
 800b5c6:	ee10 4a10 	vmov	r4, s0
 800b5ca:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800b5ce:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b5d2:	d304      	bcc.n	800b5de <__ieee754_fmodf+0x2a>
 800b5d4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b5d8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b5dc:	bd70      	pop	{r4, r5, r6, pc}
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	dbfc      	blt.n	800b5dc <__ieee754_fmodf+0x28>
 800b5e2:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800b5e6:	d105      	bne.n	800b5f4 <__ieee754_fmodf+0x40>
 800b5e8:	4b32      	ldr	r3, [pc, #200]	@ (800b6b4 <__ieee754_fmodf+0x100>)
 800b5ea:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800b5ee:	ed93 0a00 	vldr	s0, [r3]
 800b5f2:	e7f3      	b.n	800b5dc <__ieee754_fmodf+0x28>
 800b5f4:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b5f8:	d146      	bne.n	800b688 <__ieee754_fmodf+0xd4>
 800b5fa:	020a      	lsls	r2, r1, #8
 800b5fc:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800b600:	2a00      	cmp	r2, #0
 800b602:	dc3e      	bgt.n	800b682 <__ieee754_fmodf+0xce>
 800b604:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b608:	bf01      	itttt	eq
 800b60a:	021a      	lsleq	r2, r3, #8
 800b60c:	fab2 f282 	clzeq	r2, r2
 800b610:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800b614:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800b618:	bf16      	itet	ne
 800b61a:	15da      	asrne	r2, r3, #23
 800b61c:	3282      	addeq	r2, #130	@ 0x82
 800b61e:	3a7f      	subne	r2, #127	@ 0x7f
 800b620:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800b624:	bfbb      	ittet	lt
 800b626:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b62a:	1a24      	sublt	r4, r4, r0
 800b62c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800b630:	40a1      	lsllt	r1, r4
 800b632:	bfa8      	it	ge
 800b634:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800b638:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b63c:	bfb5      	itete	lt
 800b63e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b642:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800b646:	1aa4      	sublt	r4, r4, r2
 800b648:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800b64c:	bfb8      	it	lt
 800b64e:	fa03 f404 	lsllt.w	r4, r3, r4
 800b652:	1a80      	subs	r0, r0, r2
 800b654:	1b0b      	subs	r3, r1, r4
 800b656:	b9d0      	cbnz	r0, 800b68e <__ieee754_fmodf+0xda>
 800b658:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800b65c:	bf28      	it	cs
 800b65e:	460b      	movcs	r3, r1
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0c1      	beq.n	800b5e8 <__ieee754_fmodf+0x34>
 800b664:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b668:	db19      	blt.n	800b69e <__ieee754_fmodf+0xea>
 800b66a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b66e:	db19      	blt.n	800b6a4 <__ieee754_fmodf+0xf0>
 800b670:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800b674:	327f      	adds	r2, #127	@ 0x7f
 800b676:	432b      	orrs	r3, r5
 800b678:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b67c:	ee00 3a10 	vmov	s0, r3
 800b680:	e7ac      	b.n	800b5dc <__ieee754_fmodf+0x28>
 800b682:	3801      	subs	r0, #1
 800b684:	0052      	lsls	r2, r2, #1
 800b686:	e7bb      	b.n	800b600 <__ieee754_fmodf+0x4c>
 800b688:	15c8      	asrs	r0, r1, #23
 800b68a:	387f      	subs	r0, #127	@ 0x7f
 800b68c:	e7ba      	b.n	800b604 <__ieee754_fmodf+0x50>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	da02      	bge.n	800b698 <__ieee754_fmodf+0xe4>
 800b692:	0049      	lsls	r1, r1, #1
 800b694:	3801      	subs	r0, #1
 800b696:	e7dd      	b.n	800b654 <__ieee754_fmodf+0xa0>
 800b698:	d0a6      	beq.n	800b5e8 <__ieee754_fmodf+0x34>
 800b69a:	0059      	lsls	r1, r3, #1
 800b69c:	e7fa      	b.n	800b694 <__ieee754_fmodf+0xe0>
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	3a01      	subs	r2, #1
 800b6a2:	e7df      	b.n	800b664 <__ieee754_fmodf+0xb0>
 800b6a4:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800b6a8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b6ac:	3282      	adds	r2, #130	@ 0x82
 800b6ae:	4113      	asrs	r3, r2
 800b6b0:	432b      	orrs	r3, r5
 800b6b2:	e7e3      	b.n	800b67c <__ieee754_fmodf+0xc8>
 800b6b4:	080107a8 	.word	0x080107a8

0800b6b8 <with_errno>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	ed2d 8b02 	vpush	{d8}
 800b6be:	eeb0 8a40 	vmov.f32	s16, s0
 800b6c2:	eef0 8a60 	vmov.f32	s17, s1
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	f001 fd92 	bl	800d1f0 <__errno>
 800b6cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b6d0:	eef0 0a68 	vmov.f32	s1, s17
 800b6d4:	ecbd 8b02 	vpop	{d8}
 800b6d8:	6004      	str	r4, [r0, #0]
 800b6da:	bd10      	pop	{r4, pc}

0800b6dc <xflow>:
 800b6dc:	4603      	mov	r3, r0
 800b6de:	b507      	push	{r0, r1, r2, lr}
 800b6e0:	ec51 0b10 	vmov	r0, r1, d0
 800b6e4:	b183      	cbz	r3, 800b708 <xflow+0x2c>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6ec:	e9cd 2300 	strd	r2, r3, [sp]
 800b6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6f4:	f7f4 ffa0 	bl	8000638 <__aeabi_dmul>
 800b6f8:	ec41 0b10 	vmov	d0, r0, r1
 800b6fc:	2022      	movs	r0, #34	@ 0x22
 800b6fe:	b003      	add	sp, #12
 800b700:	f85d eb04 	ldr.w	lr, [sp], #4
 800b704:	f7ff bfd8 	b.w	800b6b8 <with_errno>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	e7ee      	b.n	800b6ec <xflow+0x10>
	...

0800b710 <__math_uflow>:
 800b710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b718 <__math_uflow+0x8>
 800b714:	f7ff bfe2 	b.w	800b6dc <xflow>
 800b718:	00000000 	.word	0x00000000
 800b71c:	10000000 	.word	0x10000000

0800b720 <__math_oflow>:
 800b720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b728 <__math_oflow+0x8>
 800b724:	f7ff bfda 	b.w	800b6dc <xflow>
 800b728:	00000000 	.word	0x00000000
 800b72c:	70000000 	.word	0x70000000

0800b730 <atof>:
 800b730:	2100      	movs	r1, #0
 800b732:	f000 be09 	b.w	800c348 <strtod>

0800b736 <atoi>:
 800b736:	220a      	movs	r2, #10
 800b738:	2100      	movs	r1, #0
 800b73a:	f000 be8b 	b.w	800c454 <strtol>

0800b73e <sulp>:
 800b73e:	b570      	push	{r4, r5, r6, lr}
 800b740:	4604      	mov	r4, r0
 800b742:	460d      	mov	r5, r1
 800b744:	ec45 4b10 	vmov	d0, r4, r5
 800b748:	4616      	mov	r6, r2
 800b74a:	f003 fba5 	bl	800ee98 <__ulp>
 800b74e:	ec51 0b10 	vmov	r0, r1, d0
 800b752:	b17e      	cbz	r6, 800b774 <sulp+0x36>
 800b754:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b758:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dd09      	ble.n	800b774 <sulp+0x36>
 800b760:	051b      	lsls	r3, r3, #20
 800b762:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b766:	2400      	movs	r4, #0
 800b768:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b76c:	4622      	mov	r2, r4
 800b76e:	462b      	mov	r3, r5
 800b770:	f7f4 ff62 	bl	8000638 <__aeabi_dmul>
 800b774:	ec41 0b10 	vmov	d0, r0, r1
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	0000      	movs	r0, r0
 800b77c:	0000      	movs	r0, r0
	...

0800b780 <_strtod_l>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	b09f      	sub	sp, #124	@ 0x7c
 800b786:	460c      	mov	r4, r1
 800b788:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b78a:	2200      	movs	r2, #0
 800b78c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b78e:	9005      	str	r0, [sp, #20]
 800b790:	f04f 0a00 	mov.w	sl, #0
 800b794:	f04f 0b00 	mov.w	fp, #0
 800b798:	460a      	mov	r2, r1
 800b79a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b79c:	7811      	ldrb	r1, [r2, #0]
 800b79e:	292b      	cmp	r1, #43	@ 0x2b
 800b7a0:	d04a      	beq.n	800b838 <_strtod_l+0xb8>
 800b7a2:	d838      	bhi.n	800b816 <_strtod_l+0x96>
 800b7a4:	290d      	cmp	r1, #13
 800b7a6:	d832      	bhi.n	800b80e <_strtod_l+0x8e>
 800b7a8:	2908      	cmp	r1, #8
 800b7aa:	d832      	bhi.n	800b812 <_strtod_l+0x92>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d03b      	beq.n	800b828 <_strtod_l+0xa8>
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b7b6:	782a      	ldrb	r2, [r5, #0]
 800b7b8:	2a30      	cmp	r2, #48	@ 0x30
 800b7ba:	f040 80b2 	bne.w	800b922 <_strtod_l+0x1a2>
 800b7be:	786a      	ldrb	r2, [r5, #1]
 800b7c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7c4:	2a58      	cmp	r2, #88	@ 0x58
 800b7c6:	d16e      	bne.n	800b8a6 <_strtod_l+0x126>
 800b7c8:	9302      	str	r3, [sp, #8]
 800b7ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	4a8f      	ldr	r2, [pc, #572]	@ (800ba10 <_strtod_l+0x290>)
 800b7d4:	9805      	ldr	r0, [sp, #20]
 800b7d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b7d8:	a919      	add	r1, sp, #100	@ 0x64
 800b7da:	f002 fc57 	bl	800e08c <__gethex>
 800b7de:	f010 060f 	ands.w	r6, r0, #15
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	d005      	beq.n	800b7f2 <_strtod_l+0x72>
 800b7e6:	2e06      	cmp	r6, #6
 800b7e8:	d128      	bne.n	800b83c <_strtod_l+0xbc>
 800b7ea:	3501      	adds	r5, #1
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800b7f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b7f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f040 858e 	bne.w	800c316 <_strtod_l+0xb96>
 800b7fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7fc:	b1cb      	cbz	r3, 800b832 <_strtod_l+0xb2>
 800b7fe:	4652      	mov	r2, sl
 800b800:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b804:	ec43 2b10 	vmov	d0, r2, r3
 800b808:	b01f      	add	sp, #124	@ 0x7c
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	2920      	cmp	r1, #32
 800b810:	d1ce      	bne.n	800b7b0 <_strtod_l+0x30>
 800b812:	3201      	adds	r2, #1
 800b814:	e7c1      	b.n	800b79a <_strtod_l+0x1a>
 800b816:	292d      	cmp	r1, #45	@ 0x2d
 800b818:	d1ca      	bne.n	800b7b0 <_strtod_l+0x30>
 800b81a:	2101      	movs	r1, #1
 800b81c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b81e:	1c51      	adds	r1, r2, #1
 800b820:	9119      	str	r1, [sp, #100]	@ 0x64
 800b822:	7852      	ldrb	r2, [r2, #1]
 800b824:	2a00      	cmp	r2, #0
 800b826:	d1c5      	bne.n	800b7b4 <_strtod_l+0x34>
 800b828:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b82a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f040 8570 	bne.w	800c312 <_strtod_l+0xb92>
 800b832:	4652      	mov	r2, sl
 800b834:	465b      	mov	r3, fp
 800b836:	e7e5      	b.n	800b804 <_strtod_l+0x84>
 800b838:	2100      	movs	r1, #0
 800b83a:	e7ef      	b.n	800b81c <_strtod_l+0x9c>
 800b83c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b83e:	b13a      	cbz	r2, 800b850 <_strtod_l+0xd0>
 800b840:	2135      	movs	r1, #53	@ 0x35
 800b842:	a81c      	add	r0, sp, #112	@ 0x70
 800b844:	f003 fc22 	bl	800f08c <__copybits>
 800b848:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b84a:	9805      	ldr	r0, [sp, #20]
 800b84c:	f002 fff8 	bl	800e840 <_Bfree>
 800b850:	3e01      	subs	r6, #1
 800b852:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b854:	2e04      	cmp	r6, #4
 800b856:	d806      	bhi.n	800b866 <_strtod_l+0xe6>
 800b858:	e8df f006 	tbb	[pc, r6]
 800b85c:	201d0314 	.word	0x201d0314
 800b860:	14          	.byte	0x14
 800b861:	00          	.byte	0x00
 800b862:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b866:	05e1      	lsls	r1, r4, #23
 800b868:	bf48      	it	mi
 800b86a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b86e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b872:	0d1b      	lsrs	r3, r3, #20
 800b874:	051b      	lsls	r3, r3, #20
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1bb      	bne.n	800b7f2 <_strtod_l+0x72>
 800b87a:	f001 fcb9 	bl	800d1f0 <__errno>
 800b87e:	2322      	movs	r3, #34	@ 0x22
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	e7b6      	b.n	800b7f2 <_strtod_l+0x72>
 800b884:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b888:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b88c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b890:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b894:	e7e7      	b.n	800b866 <_strtod_l+0xe6>
 800b896:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ba18 <_strtod_l+0x298>
 800b89a:	e7e4      	b.n	800b866 <_strtod_l+0xe6>
 800b89c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b8a0:	f04f 3aff 	mov.w	sl, #4294967295
 800b8a4:	e7df      	b.n	800b866 <_strtod_l+0xe6>
 800b8a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8ac:	785b      	ldrb	r3, [r3, #1]
 800b8ae:	2b30      	cmp	r3, #48	@ 0x30
 800b8b0:	d0f9      	beq.n	800b8a6 <_strtod_l+0x126>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d09d      	beq.n	800b7f2 <_strtod_l+0x72>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	2700      	movs	r7, #0
 800b8ba:	9308      	str	r3, [sp, #32]
 800b8bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8be:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b8c2:	46b9      	mov	r9, r7
 800b8c4:	220a      	movs	r2, #10
 800b8c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b8c8:	7805      	ldrb	r5, [r0, #0]
 800b8ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b8ce:	b2d9      	uxtb	r1, r3
 800b8d0:	2909      	cmp	r1, #9
 800b8d2:	d928      	bls.n	800b926 <_strtod_l+0x1a6>
 800b8d4:	494f      	ldr	r1, [pc, #316]	@ (800ba14 <_strtod_l+0x294>)
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f001 fc2e 	bl	800d138 <strncmp>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d032      	beq.n	800b946 <_strtod_l+0x1c6>
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8e6:	464d      	mov	r5, r9
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2a65      	cmp	r2, #101	@ 0x65
 800b8ec:	d001      	beq.n	800b8f2 <_strtod_l+0x172>
 800b8ee:	2a45      	cmp	r2, #69	@ 0x45
 800b8f0:	d114      	bne.n	800b91c <_strtod_l+0x19c>
 800b8f2:	b91d      	cbnz	r5, 800b8fc <_strtod_l+0x17c>
 800b8f4:	9a08      	ldr	r2, [sp, #32]
 800b8f6:	4302      	orrs	r2, r0
 800b8f8:	d096      	beq.n	800b828 <_strtod_l+0xa8>
 800b8fa:	2500      	movs	r5, #0
 800b8fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b8fe:	1c62      	adds	r2, r4, #1
 800b900:	9219      	str	r2, [sp, #100]	@ 0x64
 800b902:	7862      	ldrb	r2, [r4, #1]
 800b904:	2a2b      	cmp	r2, #43	@ 0x2b
 800b906:	d07a      	beq.n	800b9fe <_strtod_l+0x27e>
 800b908:	2a2d      	cmp	r2, #45	@ 0x2d
 800b90a:	d07e      	beq.n	800ba0a <_strtod_l+0x28a>
 800b90c:	f04f 0c00 	mov.w	ip, #0
 800b910:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b914:	2909      	cmp	r1, #9
 800b916:	f240 8085 	bls.w	800ba24 <_strtod_l+0x2a4>
 800b91a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b91c:	f04f 0800 	mov.w	r8, #0
 800b920:	e0a5      	b.n	800ba6e <_strtod_l+0x2ee>
 800b922:	2300      	movs	r3, #0
 800b924:	e7c8      	b.n	800b8b8 <_strtod_l+0x138>
 800b926:	f1b9 0f08 	cmp.w	r9, #8
 800b92a:	bfd8      	it	le
 800b92c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b92e:	f100 0001 	add.w	r0, r0, #1
 800b932:	bfda      	itte	le
 800b934:	fb02 3301 	mlale	r3, r2, r1, r3
 800b938:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b93a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b93e:	f109 0901 	add.w	r9, r9, #1
 800b942:	9019      	str	r0, [sp, #100]	@ 0x64
 800b944:	e7bf      	b.n	800b8c6 <_strtod_l+0x146>
 800b946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b94c:	785a      	ldrb	r2, [r3, #1]
 800b94e:	f1b9 0f00 	cmp.w	r9, #0
 800b952:	d03b      	beq.n	800b9cc <_strtod_l+0x24c>
 800b954:	900a      	str	r0, [sp, #40]	@ 0x28
 800b956:	464d      	mov	r5, r9
 800b958:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	d912      	bls.n	800b986 <_strtod_l+0x206>
 800b960:	2301      	movs	r3, #1
 800b962:	e7c2      	b.n	800b8ea <_strtod_l+0x16a>
 800b964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	9219      	str	r2, [sp, #100]	@ 0x64
 800b96a:	785a      	ldrb	r2, [r3, #1]
 800b96c:	3001      	adds	r0, #1
 800b96e:	2a30      	cmp	r2, #48	@ 0x30
 800b970:	d0f8      	beq.n	800b964 <_strtod_l+0x1e4>
 800b972:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b976:	2b08      	cmp	r3, #8
 800b978:	f200 84d2 	bhi.w	800c320 <_strtod_l+0xba0>
 800b97c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b97e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b980:	2000      	movs	r0, #0
 800b982:	930c      	str	r3, [sp, #48]	@ 0x30
 800b984:	4605      	mov	r5, r0
 800b986:	3a30      	subs	r2, #48	@ 0x30
 800b988:	f100 0301 	add.w	r3, r0, #1
 800b98c:	d018      	beq.n	800b9c0 <_strtod_l+0x240>
 800b98e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b990:	4419      	add	r1, r3
 800b992:	910a      	str	r1, [sp, #40]	@ 0x28
 800b994:	462e      	mov	r6, r5
 800b996:	f04f 0e0a 	mov.w	lr, #10
 800b99a:	1c71      	adds	r1, r6, #1
 800b99c:	eba1 0c05 	sub.w	ip, r1, r5
 800b9a0:	4563      	cmp	r3, ip
 800b9a2:	dc15      	bgt.n	800b9d0 <_strtod_l+0x250>
 800b9a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b9a8:	182b      	adds	r3, r5, r0
 800b9aa:	2b08      	cmp	r3, #8
 800b9ac:	f105 0501 	add.w	r5, r5, #1
 800b9b0:	4405      	add	r5, r0
 800b9b2:	dc1a      	bgt.n	800b9ea <_strtod_l+0x26a>
 800b9b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9b6:	230a      	movs	r3, #10
 800b9b8:	fb03 2301 	mla	r3, r3, r1, r2
 800b9bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9c2:	1c51      	adds	r1, r2, #1
 800b9c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9c6:	7852      	ldrb	r2, [r2, #1]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	e7c5      	b.n	800b958 <_strtod_l+0x1d8>
 800b9cc:	4648      	mov	r0, r9
 800b9ce:	e7ce      	b.n	800b96e <_strtod_l+0x1ee>
 800b9d0:	2e08      	cmp	r6, #8
 800b9d2:	dc05      	bgt.n	800b9e0 <_strtod_l+0x260>
 800b9d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b9d6:	fb0e f606 	mul.w	r6, lr, r6
 800b9da:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b9dc:	460e      	mov	r6, r1
 800b9de:	e7dc      	b.n	800b99a <_strtod_l+0x21a>
 800b9e0:	2910      	cmp	r1, #16
 800b9e2:	bfd8      	it	le
 800b9e4:	fb0e f707 	mulle.w	r7, lr, r7
 800b9e8:	e7f8      	b.n	800b9dc <_strtod_l+0x25c>
 800b9ea:	2b0f      	cmp	r3, #15
 800b9ec:	bfdc      	itt	le
 800b9ee:	230a      	movle	r3, #10
 800b9f0:	fb03 2707 	mlale	r7, r3, r7, r2
 800b9f4:	e7e3      	b.n	800b9be <_strtod_l+0x23e>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e77a      	b.n	800b8f4 <_strtod_l+0x174>
 800b9fe:	f04f 0c00 	mov.w	ip, #0
 800ba02:	1ca2      	adds	r2, r4, #2
 800ba04:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba06:	78a2      	ldrb	r2, [r4, #2]
 800ba08:	e782      	b.n	800b910 <_strtod_l+0x190>
 800ba0a:	f04f 0c01 	mov.w	ip, #1
 800ba0e:	e7f8      	b.n	800ba02 <_strtod_l+0x282>
 800ba10:	08010998 	.word	0x08010998
 800ba14:	080107b0 	.word	0x080107b0
 800ba18:	7ff00000 	.word	0x7ff00000
 800ba1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba1e:	1c51      	adds	r1, r2, #1
 800ba20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ba22:	7852      	ldrb	r2, [r2, #1]
 800ba24:	2a30      	cmp	r2, #48	@ 0x30
 800ba26:	d0f9      	beq.n	800ba1c <_strtod_l+0x29c>
 800ba28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ba2c:	2908      	cmp	r1, #8
 800ba2e:	f63f af75 	bhi.w	800b91c <_strtod_l+0x19c>
 800ba32:	3a30      	subs	r2, #48	@ 0x30
 800ba34:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba38:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ba3a:	f04f 080a 	mov.w	r8, #10
 800ba3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba40:	1c56      	adds	r6, r2, #1
 800ba42:	9619      	str	r6, [sp, #100]	@ 0x64
 800ba44:	7852      	ldrb	r2, [r2, #1]
 800ba46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ba4a:	f1be 0f09 	cmp.w	lr, #9
 800ba4e:	d939      	bls.n	800bac4 <_strtod_l+0x344>
 800ba50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba52:	1a76      	subs	r6, r6, r1
 800ba54:	2e08      	cmp	r6, #8
 800ba56:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ba5a:	dc03      	bgt.n	800ba64 <_strtod_l+0x2e4>
 800ba5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba5e:	4588      	cmp	r8, r1
 800ba60:	bfa8      	it	ge
 800ba62:	4688      	movge	r8, r1
 800ba64:	f1bc 0f00 	cmp.w	ip, #0
 800ba68:	d001      	beq.n	800ba6e <_strtod_l+0x2ee>
 800ba6a:	f1c8 0800 	rsb	r8, r8, #0
 800ba6e:	2d00      	cmp	r5, #0
 800ba70:	d14e      	bne.n	800bb10 <_strtod_l+0x390>
 800ba72:	9908      	ldr	r1, [sp, #32]
 800ba74:	4308      	orrs	r0, r1
 800ba76:	f47f aebc 	bne.w	800b7f2 <_strtod_l+0x72>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f47f aed4 	bne.w	800b828 <_strtod_l+0xa8>
 800ba80:	2a69      	cmp	r2, #105	@ 0x69
 800ba82:	d028      	beq.n	800bad6 <_strtod_l+0x356>
 800ba84:	dc25      	bgt.n	800bad2 <_strtod_l+0x352>
 800ba86:	2a49      	cmp	r2, #73	@ 0x49
 800ba88:	d025      	beq.n	800bad6 <_strtod_l+0x356>
 800ba8a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba8c:	f47f aecc 	bne.w	800b828 <_strtod_l+0xa8>
 800ba90:	499a      	ldr	r1, [pc, #616]	@ (800bcfc <_strtod_l+0x57c>)
 800ba92:	a819      	add	r0, sp, #100	@ 0x64
 800ba94:	f002 fd1c 	bl	800e4d0 <__match>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	f43f aec5 	beq.w	800b828 <_strtod_l+0xa8>
 800ba9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	2b28      	cmp	r3, #40	@ 0x28
 800baa4:	d12e      	bne.n	800bb04 <_strtod_l+0x384>
 800baa6:	4996      	ldr	r1, [pc, #600]	@ (800bd00 <_strtod_l+0x580>)
 800baa8:	aa1c      	add	r2, sp, #112	@ 0x70
 800baaa:	a819      	add	r0, sp, #100	@ 0x64
 800baac:	f002 fd24 	bl	800e4f8 <__hexnan>
 800bab0:	2805      	cmp	r0, #5
 800bab2:	d127      	bne.n	800bb04 <_strtod_l+0x384>
 800bab4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bab6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800baba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800babe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bac2:	e696      	b.n	800b7f2 <_strtod_l+0x72>
 800bac4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bac6:	fb08 2101 	mla	r1, r8, r1, r2
 800baca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bace:	9209      	str	r2, [sp, #36]	@ 0x24
 800bad0:	e7b5      	b.n	800ba3e <_strtod_l+0x2be>
 800bad2:	2a6e      	cmp	r2, #110	@ 0x6e
 800bad4:	e7da      	b.n	800ba8c <_strtod_l+0x30c>
 800bad6:	498b      	ldr	r1, [pc, #556]	@ (800bd04 <_strtod_l+0x584>)
 800bad8:	a819      	add	r0, sp, #100	@ 0x64
 800bada:	f002 fcf9 	bl	800e4d0 <__match>
 800bade:	2800      	cmp	r0, #0
 800bae0:	f43f aea2 	beq.w	800b828 <_strtod_l+0xa8>
 800bae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bae6:	4988      	ldr	r1, [pc, #544]	@ (800bd08 <_strtod_l+0x588>)
 800bae8:	3b01      	subs	r3, #1
 800baea:	a819      	add	r0, sp, #100	@ 0x64
 800baec:	9319      	str	r3, [sp, #100]	@ 0x64
 800baee:	f002 fcef 	bl	800e4d0 <__match>
 800baf2:	b910      	cbnz	r0, 800bafa <_strtod_l+0x37a>
 800baf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baf6:	3301      	adds	r3, #1
 800baf8:	9319      	str	r3, [sp, #100]	@ 0x64
 800bafa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bd18 <_strtod_l+0x598>
 800bafe:	f04f 0a00 	mov.w	sl, #0
 800bb02:	e676      	b.n	800b7f2 <_strtod_l+0x72>
 800bb04:	4881      	ldr	r0, [pc, #516]	@ (800bd0c <_strtod_l+0x58c>)
 800bb06:	f001 fbaf 	bl	800d268 <nan>
 800bb0a:	ec5b ab10 	vmov	sl, fp, d0
 800bb0e:	e670      	b.n	800b7f2 <_strtod_l+0x72>
 800bb10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb12:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bb14:	eba8 0303 	sub.w	r3, r8, r3
 800bb18:	f1b9 0f00 	cmp.w	r9, #0
 800bb1c:	bf08      	it	eq
 800bb1e:	46a9      	moveq	r9, r5
 800bb20:	2d10      	cmp	r5, #16
 800bb22:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb24:	462c      	mov	r4, r5
 800bb26:	bfa8      	it	ge
 800bb28:	2410      	movge	r4, #16
 800bb2a:	f7f4 fd0b 	bl	8000544 <__aeabi_ui2d>
 800bb2e:	2d09      	cmp	r5, #9
 800bb30:	4682      	mov	sl, r0
 800bb32:	468b      	mov	fp, r1
 800bb34:	dc13      	bgt.n	800bb5e <_strtod_l+0x3de>
 800bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f43f ae5a 	beq.w	800b7f2 <_strtod_l+0x72>
 800bb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb40:	dd78      	ble.n	800bc34 <_strtod_l+0x4b4>
 800bb42:	2b16      	cmp	r3, #22
 800bb44:	dc5f      	bgt.n	800bc06 <_strtod_l+0x486>
 800bb46:	4972      	ldr	r1, [pc, #456]	@ (800bd10 <_strtod_l+0x590>)
 800bb48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb50:	4652      	mov	r2, sl
 800bb52:	465b      	mov	r3, fp
 800bb54:	f7f4 fd70 	bl	8000638 <__aeabi_dmul>
 800bb58:	4682      	mov	sl, r0
 800bb5a:	468b      	mov	fp, r1
 800bb5c:	e649      	b.n	800b7f2 <_strtod_l+0x72>
 800bb5e:	4b6c      	ldr	r3, [pc, #432]	@ (800bd10 <_strtod_l+0x590>)
 800bb60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bb68:	f7f4 fd66 	bl	8000638 <__aeabi_dmul>
 800bb6c:	4682      	mov	sl, r0
 800bb6e:	4638      	mov	r0, r7
 800bb70:	468b      	mov	fp, r1
 800bb72:	f7f4 fce7 	bl	8000544 <__aeabi_ui2d>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	f7f4 fba5 	bl	80002cc <__adddf3>
 800bb82:	2d0f      	cmp	r5, #15
 800bb84:	4682      	mov	sl, r0
 800bb86:	468b      	mov	fp, r1
 800bb88:	ddd5      	ble.n	800bb36 <_strtod_l+0x3b6>
 800bb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb8c:	1b2c      	subs	r4, r5, r4
 800bb8e:	441c      	add	r4, r3
 800bb90:	2c00      	cmp	r4, #0
 800bb92:	f340 8093 	ble.w	800bcbc <_strtod_l+0x53c>
 800bb96:	f014 030f 	ands.w	r3, r4, #15
 800bb9a:	d00a      	beq.n	800bbb2 <_strtod_l+0x432>
 800bb9c:	495c      	ldr	r1, [pc, #368]	@ (800bd10 <_strtod_l+0x590>)
 800bb9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bba2:	4652      	mov	r2, sl
 800bba4:	465b      	mov	r3, fp
 800bba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbaa:	f7f4 fd45 	bl	8000638 <__aeabi_dmul>
 800bbae:	4682      	mov	sl, r0
 800bbb0:	468b      	mov	fp, r1
 800bbb2:	f034 040f 	bics.w	r4, r4, #15
 800bbb6:	d073      	beq.n	800bca0 <_strtod_l+0x520>
 800bbb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bbbc:	dd49      	ble.n	800bc52 <_strtod_l+0x4d2>
 800bbbe:	2400      	movs	r4, #0
 800bbc0:	46a0      	mov	r8, r4
 800bbc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bbc4:	46a1      	mov	r9, r4
 800bbc6:	9a05      	ldr	r2, [sp, #20]
 800bbc8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bd18 <_strtod_l+0x598>
 800bbcc:	2322      	movs	r3, #34	@ 0x22
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	f04f 0a00 	mov.w	sl, #0
 800bbd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f43f ae0b 	beq.w	800b7f2 <_strtod_l+0x72>
 800bbdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbde:	9805      	ldr	r0, [sp, #20]
 800bbe0:	f002 fe2e 	bl	800e840 <_Bfree>
 800bbe4:	9805      	ldr	r0, [sp, #20]
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f002 fe2a 	bl	800e840 <_Bfree>
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	4641      	mov	r1, r8
 800bbf0:	f002 fe26 	bl	800e840 <_Bfree>
 800bbf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbf6:	9805      	ldr	r0, [sp, #20]
 800bbf8:	f002 fe22 	bl	800e840 <_Bfree>
 800bbfc:	9805      	ldr	r0, [sp, #20]
 800bbfe:	4621      	mov	r1, r4
 800bc00:	f002 fe1e 	bl	800e840 <_Bfree>
 800bc04:	e5f5      	b.n	800b7f2 <_strtod_l+0x72>
 800bc06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	dbbc      	blt.n	800bb8a <_strtod_l+0x40a>
 800bc10:	4c3f      	ldr	r4, [pc, #252]	@ (800bd10 <_strtod_l+0x590>)
 800bc12:	f1c5 050f 	rsb	r5, r5, #15
 800bc16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc1a:	4652      	mov	r2, sl
 800bc1c:	465b      	mov	r3, fp
 800bc1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc22:	f7f4 fd09 	bl	8000638 <__aeabi_dmul>
 800bc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc28:	1b5d      	subs	r5, r3, r5
 800bc2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc32:	e78f      	b.n	800bb54 <_strtod_l+0x3d4>
 800bc34:	3316      	adds	r3, #22
 800bc36:	dba8      	blt.n	800bb8a <_strtod_l+0x40a>
 800bc38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc3a:	eba3 0808 	sub.w	r8, r3, r8
 800bc3e:	4b34      	ldr	r3, [pc, #208]	@ (800bd10 <_strtod_l+0x590>)
 800bc40:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bc44:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bc48:	4650      	mov	r0, sl
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	f7f4 fe1e 	bl	800088c <__aeabi_ddiv>
 800bc50:	e782      	b.n	800bb58 <_strtod_l+0x3d8>
 800bc52:	2300      	movs	r3, #0
 800bc54:	4f2f      	ldr	r7, [pc, #188]	@ (800bd14 <_strtod_l+0x594>)
 800bc56:	1124      	asrs	r4, r4, #4
 800bc58:	4650      	mov	r0, sl
 800bc5a:	4659      	mov	r1, fp
 800bc5c:	461e      	mov	r6, r3
 800bc5e:	2c01      	cmp	r4, #1
 800bc60:	dc21      	bgt.n	800bca6 <_strtod_l+0x526>
 800bc62:	b10b      	cbz	r3, 800bc68 <_strtod_l+0x4e8>
 800bc64:	4682      	mov	sl, r0
 800bc66:	468b      	mov	fp, r1
 800bc68:	492a      	ldr	r1, [pc, #168]	@ (800bd14 <_strtod_l+0x594>)
 800bc6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bc6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bc72:	4652      	mov	r2, sl
 800bc74:	465b      	mov	r3, fp
 800bc76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc7a:	f7f4 fcdd 	bl	8000638 <__aeabi_dmul>
 800bc7e:	4b26      	ldr	r3, [pc, #152]	@ (800bd18 <_strtod_l+0x598>)
 800bc80:	460a      	mov	r2, r1
 800bc82:	400b      	ands	r3, r1
 800bc84:	4925      	ldr	r1, [pc, #148]	@ (800bd1c <_strtod_l+0x59c>)
 800bc86:	428b      	cmp	r3, r1
 800bc88:	4682      	mov	sl, r0
 800bc8a:	d898      	bhi.n	800bbbe <_strtod_l+0x43e>
 800bc8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bc90:	428b      	cmp	r3, r1
 800bc92:	bf86      	itte	hi
 800bc94:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bd20 <_strtod_l+0x5a0>
 800bc98:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bca0:	2300      	movs	r3, #0
 800bca2:	9308      	str	r3, [sp, #32]
 800bca4:	e076      	b.n	800bd94 <_strtod_l+0x614>
 800bca6:	07e2      	lsls	r2, r4, #31
 800bca8:	d504      	bpl.n	800bcb4 <_strtod_l+0x534>
 800bcaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcae:	f7f4 fcc3 	bl	8000638 <__aeabi_dmul>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	3601      	adds	r6, #1
 800bcb6:	1064      	asrs	r4, r4, #1
 800bcb8:	3708      	adds	r7, #8
 800bcba:	e7d0      	b.n	800bc5e <_strtod_l+0x4de>
 800bcbc:	d0f0      	beq.n	800bca0 <_strtod_l+0x520>
 800bcbe:	4264      	negs	r4, r4
 800bcc0:	f014 020f 	ands.w	r2, r4, #15
 800bcc4:	d00a      	beq.n	800bcdc <_strtod_l+0x55c>
 800bcc6:	4b12      	ldr	r3, [pc, #72]	@ (800bd10 <_strtod_l+0x590>)
 800bcc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bccc:	4650      	mov	r0, sl
 800bcce:	4659      	mov	r1, fp
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fdda 	bl	800088c <__aeabi_ddiv>
 800bcd8:	4682      	mov	sl, r0
 800bcda:	468b      	mov	fp, r1
 800bcdc:	1124      	asrs	r4, r4, #4
 800bcde:	d0df      	beq.n	800bca0 <_strtod_l+0x520>
 800bce0:	2c1f      	cmp	r4, #31
 800bce2:	dd1f      	ble.n	800bd24 <_strtod_l+0x5a4>
 800bce4:	2400      	movs	r4, #0
 800bce6:	46a0      	mov	r8, r4
 800bce8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bcea:	46a1      	mov	r9, r4
 800bcec:	9a05      	ldr	r2, [sp, #20]
 800bcee:	2322      	movs	r3, #34	@ 0x22
 800bcf0:	f04f 0a00 	mov.w	sl, #0
 800bcf4:	f04f 0b00 	mov.w	fp, #0
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	e76b      	b.n	800bbd4 <_strtod_l+0x454>
 800bcfc:	080107bf 	.word	0x080107bf
 800bd00:	08010984 	.word	0x08010984
 800bd04:	080107b7 	.word	0x080107b7
 800bd08:	080107f1 	.word	0x080107f1
 800bd0c:	08010980 	.word	0x08010980
 800bd10:	08010b10 	.word	0x08010b10
 800bd14:	08010ae8 	.word	0x08010ae8
 800bd18:	7ff00000 	.word	0x7ff00000
 800bd1c:	7ca00000 	.word	0x7ca00000
 800bd20:	7fefffff 	.word	0x7fefffff
 800bd24:	f014 0310 	ands.w	r3, r4, #16
 800bd28:	bf18      	it	ne
 800bd2a:	236a      	movne	r3, #106	@ 0x6a
 800bd2c:	4ea9      	ldr	r6, [pc, #676]	@ (800bfd4 <_strtod_l+0x854>)
 800bd2e:	9308      	str	r3, [sp, #32]
 800bd30:	4650      	mov	r0, sl
 800bd32:	4659      	mov	r1, fp
 800bd34:	2300      	movs	r3, #0
 800bd36:	07e7      	lsls	r7, r4, #31
 800bd38:	d504      	bpl.n	800bd44 <_strtod_l+0x5c4>
 800bd3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd3e:	f7f4 fc7b 	bl	8000638 <__aeabi_dmul>
 800bd42:	2301      	movs	r3, #1
 800bd44:	1064      	asrs	r4, r4, #1
 800bd46:	f106 0608 	add.w	r6, r6, #8
 800bd4a:	d1f4      	bne.n	800bd36 <_strtod_l+0x5b6>
 800bd4c:	b10b      	cbz	r3, 800bd52 <_strtod_l+0x5d2>
 800bd4e:	4682      	mov	sl, r0
 800bd50:	468b      	mov	fp, r1
 800bd52:	9b08      	ldr	r3, [sp, #32]
 800bd54:	b1b3      	cbz	r3, 800bd84 <_strtod_l+0x604>
 800bd56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bd5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	4659      	mov	r1, fp
 800bd62:	dd0f      	ble.n	800bd84 <_strtod_l+0x604>
 800bd64:	2b1f      	cmp	r3, #31
 800bd66:	dd56      	ble.n	800be16 <_strtod_l+0x696>
 800bd68:	2b34      	cmp	r3, #52	@ 0x34
 800bd6a:	bfde      	ittt	le
 800bd6c:	f04f 33ff 	movle.w	r3, #4294967295
 800bd70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bd74:	4093      	lslle	r3, r2
 800bd76:	f04f 0a00 	mov.w	sl, #0
 800bd7a:	bfcc      	ite	gt
 800bd7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bd80:	ea03 0b01 	andle.w	fp, r3, r1
 800bd84:	2200      	movs	r2, #0
 800bd86:	2300      	movs	r3, #0
 800bd88:	4650      	mov	r0, sl
 800bd8a:	4659      	mov	r1, fp
 800bd8c:	f7f4 febc 	bl	8000b08 <__aeabi_dcmpeq>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d1a7      	bne.n	800bce4 <_strtod_l+0x564>
 800bd94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd9a:	9805      	ldr	r0, [sp, #20]
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	464a      	mov	r2, r9
 800bda0:	f002 fdb6 	bl	800e910 <__s2b>
 800bda4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f43f af09 	beq.w	800bbbe <_strtod_l+0x43e>
 800bdac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb0:	2a00      	cmp	r2, #0
 800bdb2:	eba3 0308 	sub.w	r3, r3, r8
 800bdb6:	bfa8      	it	ge
 800bdb8:	2300      	movge	r3, #0
 800bdba:	9312      	str	r3, [sp, #72]	@ 0x48
 800bdbc:	2400      	movs	r4, #0
 800bdbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bdc2:	9316      	str	r3, [sp, #88]	@ 0x58
 800bdc4:	46a0      	mov	r8, r4
 800bdc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdc8:	9805      	ldr	r0, [sp, #20]
 800bdca:	6859      	ldr	r1, [r3, #4]
 800bdcc:	f002 fcf8 	bl	800e7c0 <_Balloc>
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	f43f aef7 	beq.w	800bbc6 <_strtod_l+0x446>
 800bdd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdda:	691a      	ldr	r2, [r3, #16]
 800bddc:	3202      	adds	r2, #2
 800bdde:	f103 010c 	add.w	r1, r3, #12
 800bde2:	0092      	lsls	r2, r2, #2
 800bde4:	300c      	adds	r0, #12
 800bde6:	f001 fa30 	bl	800d24a <memcpy>
 800bdea:	ec4b ab10 	vmov	d0, sl, fp
 800bdee:	9805      	ldr	r0, [sp, #20]
 800bdf0:	aa1c      	add	r2, sp, #112	@ 0x70
 800bdf2:	a91b      	add	r1, sp, #108	@ 0x6c
 800bdf4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bdf8:	f003 f8be 	bl	800ef78 <__d2b>
 800bdfc:	901a      	str	r0, [sp, #104]	@ 0x68
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f43f aee1 	beq.w	800bbc6 <_strtod_l+0x446>
 800be04:	9805      	ldr	r0, [sp, #20]
 800be06:	2101      	movs	r1, #1
 800be08:	f002 fe18 	bl	800ea3c <__i2b>
 800be0c:	4680      	mov	r8, r0
 800be0e:	b948      	cbnz	r0, 800be24 <_strtod_l+0x6a4>
 800be10:	f04f 0800 	mov.w	r8, #0
 800be14:	e6d7      	b.n	800bbc6 <_strtod_l+0x446>
 800be16:	f04f 32ff 	mov.w	r2, #4294967295
 800be1a:	fa02 f303 	lsl.w	r3, r2, r3
 800be1e:	ea03 0a0a 	and.w	sl, r3, sl
 800be22:	e7af      	b.n	800bd84 <_strtod_l+0x604>
 800be24:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800be26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800be28:	2d00      	cmp	r5, #0
 800be2a:	bfab      	itete	ge
 800be2c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800be2e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800be30:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800be32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800be34:	bfac      	ite	ge
 800be36:	18ef      	addge	r7, r5, r3
 800be38:	1b5e      	sublt	r6, r3, r5
 800be3a:	9b08      	ldr	r3, [sp, #32]
 800be3c:	1aed      	subs	r5, r5, r3
 800be3e:	4415      	add	r5, r2
 800be40:	4b65      	ldr	r3, [pc, #404]	@ (800bfd8 <_strtod_l+0x858>)
 800be42:	3d01      	subs	r5, #1
 800be44:	429d      	cmp	r5, r3
 800be46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800be4a:	da50      	bge.n	800beee <_strtod_l+0x76e>
 800be4c:	1b5b      	subs	r3, r3, r5
 800be4e:	2b1f      	cmp	r3, #31
 800be50:	eba2 0203 	sub.w	r2, r2, r3
 800be54:	f04f 0101 	mov.w	r1, #1
 800be58:	dc3d      	bgt.n	800bed6 <_strtod_l+0x756>
 800be5a:	fa01 f303 	lsl.w	r3, r1, r3
 800be5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be60:	2300      	movs	r3, #0
 800be62:	9310      	str	r3, [sp, #64]	@ 0x40
 800be64:	18bd      	adds	r5, r7, r2
 800be66:	9b08      	ldr	r3, [sp, #32]
 800be68:	42af      	cmp	r7, r5
 800be6a:	4416      	add	r6, r2
 800be6c:	441e      	add	r6, r3
 800be6e:	463b      	mov	r3, r7
 800be70:	bfa8      	it	ge
 800be72:	462b      	movge	r3, r5
 800be74:	42b3      	cmp	r3, r6
 800be76:	bfa8      	it	ge
 800be78:	4633      	movge	r3, r6
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bfc2      	ittt	gt
 800be7e:	1aed      	subgt	r5, r5, r3
 800be80:	1af6      	subgt	r6, r6, r3
 800be82:	1aff      	subgt	r7, r7, r3
 800be84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be86:	2b00      	cmp	r3, #0
 800be88:	dd16      	ble.n	800beb8 <_strtod_l+0x738>
 800be8a:	4641      	mov	r1, r8
 800be8c:	9805      	ldr	r0, [sp, #20]
 800be8e:	461a      	mov	r2, r3
 800be90:	f002 fe8c 	bl	800ebac <__pow5mult>
 800be94:	4680      	mov	r8, r0
 800be96:	2800      	cmp	r0, #0
 800be98:	d0ba      	beq.n	800be10 <_strtod_l+0x690>
 800be9a:	4601      	mov	r1, r0
 800be9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be9e:	9805      	ldr	r0, [sp, #20]
 800bea0:	f002 fde2 	bl	800ea68 <__multiply>
 800bea4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f43f ae8d 	beq.w	800bbc6 <_strtod_l+0x446>
 800beac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beae:	9805      	ldr	r0, [sp, #20]
 800beb0:	f002 fcc6 	bl	800e840 <_Bfree>
 800beb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800beb8:	2d00      	cmp	r5, #0
 800beba:	dc1d      	bgt.n	800bef8 <_strtod_l+0x778>
 800bebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	dd23      	ble.n	800bf0a <_strtod_l+0x78a>
 800bec2:	4649      	mov	r1, r9
 800bec4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bec6:	9805      	ldr	r0, [sp, #20]
 800bec8:	f002 fe70 	bl	800ebac <__pow5mult>
 800becc:	4681      	mov	r9, r0
 800bece:	b9e0      	cbnz	r0, 800bf0a <_strtod_l+0x78a>
 800bed0:	f04f 0900 	mov.w	r9, #0
 800bed4:	e677      	b.n	800bbc6 <_strtod_l+0x446>
 800bed6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800beda:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bede:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bee2:	35e2      	adds	r5, #226	@ 0xe2
 800bee4:	fa01 f305 	lsl.w	r3, r1, r5
 800bee8:	9310      	str	r3, [sp, #64]	@ 0x40
 800beea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800beec:	e7ba      	b.n	800be64 <_strtod_l+0x6e4>
 800beee:	2300      	movs	r3, #0
 800bef0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bef2:	2301      	movs	r3, #1
 800bef4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bef6:	e7b5      	b.n	800be64 <_strtod_l+0x6e4>
 800bef8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800befa:	9805      	ldr	r0, [sp, #20]
 800befc:	462a      	mov	r2, r5
 800befe:	f002 feaf 	bl	800ec60 <__lshift>
 800bf02:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d1d9      	bne.n	800bebc <_strtod_l+0x73c>
 800bf08:	e65d      	b.n	800bbc6 <_strtod_l+0x446>
 800bf0a:	2e00      	cmp	r6, #0
 800bf0c:	dd07      	ble.n	800bf1e <_strtod_l+0x79e>
 800bf0e:	4649      	mov	r1, r9
 800bf10:	9805      	ldr	r0, [sp, #20]
 800bf12:	4632      	mov	r2, r6
 800bf14:	f002 fea4 	bl	800ec60 <__lshift>
 800bf18:	4681      	mov	r9, r0
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d0d8      	beq.n	800bed0 <_strtod_l+0x750>
 800bf1e:	2f00      	cmp	r7, #0
 800bf20:	dd08      	ble.n	800bf34 <_strtod_l+0x7b4>
 800bf22:	4641      	mov	r1, r8
 800bf24:	9805      	ldr	r0, [sp, #20]
 800bf26:	463a      	mov	r2, r7
 800bf28:	f002 fe9a 	bl	800ec60 <__lshift>
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	f43f ae49 	beq.w	800bbc6 <_strtod_l+0x446>
 800bf34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf36:	9805      	ldr	r0, [sp, #20]
 800bf38:	464a      	mov	r2, r9
 800bf3a:	f002 ff19 	bl	800ed70 <__mdiff>
 800bf3e:	4604      	mov	r4, r0
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f43f ae40 	beq.w	800bbc6 <_strtod_l+0x446>
 800bf46:	68c3      	ldr	r3, [r0, #12]
 800bf48:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60c3      	str	r3, [r0, #12]
 800bf4e:	4641      	mov	r1, r8
 800bf50:	f002 fef2 	bl	800ed38 <__mcmp>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	da45      	bge.n	800bfe4 <_strtod_l+0x864>
 800bf58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5a:	ea53 030a 	orrs.w	r3, r3, sl
 800bf5e:	d16b      	bne.n	800c038 <_strtod_l+0x8b8>
 800bf60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d167      	bne.n	800c038 <_strtod_l+0x8b8>
 800bf68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf6c:	0d1b      	lsrs	r3, r3, #20
 800bf6e:	051b      	lsls	r3, r3, #20
 800bf70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf74:	d960      	bls.n	800c038 <_strtod_l+0x8b8>
 800bf76:	6963      	ldr	r3, [r4, #20]
 800bf78:	b913      	cbnz	r3, 800bf80 <_strtod_l+0x800>
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	dd5b      	ble.n	800c038 <_strtod_l+0x8b8>
 800bf80:	4621      	mov	r1, r4
 800bf82:	2201      	movs	r2, #1
 800bf84:	9805      	ldr	r0, [sp, #20]
 800bf86:	f002 fe6b 	bl	800ec60 <__lshift>
 800bf8a:	4641      	mov	r1, r8
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	f002 fed3 	bl	800ed38 <__mcmp>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	dd50      	ble.n	800c038 <_strtod_l+0x8b8>
 800bf96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf9a:	9a08      	ldr	r2, [sp, #32]
 800bf9c:	0d1b      	lsrs	r3, r3, #20
 800bf9e:	051b      	lsls	r3, r3, #20
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	d06a      	beq.n	800c07a <_strtod_l+0x8fa>
 800bfa4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bfa8:	d867      	bhi.n	800c07a <_strtod_l+0x8fa>
 800bfaa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bfae:	f67f ae9d 	bls.w	800bcec <_strtod_l+0x56c>
 800bfb2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfdc <_strtod_l+0x85c>)
 800bfb4:	4650      	mov	r0, sl
 800bfb6:	4659      	mov	r1, fp
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f7f4 fb3d 	bl	8000638 <__aeabi_dmul>
 800bfbe:	4b08      	ldr	r3, [pc, #32]	@ (800bfe0 <_strtod_l+0x860>)
 800bfc0:	400b      	ands	r3, r1
 800bfc2:	4682      	mov	sl, r0
 800bfc4:	468b      	mov	fp, r1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f47f ae08 	bne.w	800bbdc <_strtod_l+0x45c>
 800bfcc:	9a05      	ldr	r2, [sp, #20]
 800bfce:	2322      	movs	r3, #34	@ 0x22
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	e603      	b.n	800bbdc <_strtod_l+0x45c>
 800bfd4:	080109b0 	.word	0x080109b0
 800bfd8:	fffffc02 	.word	0xfffffc02
 800bfdc:	39500000 	.word	0x39500000
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bfe8:	d165      	bne.n	800c0b6 <_strtod_l+0x936>
 800bfea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bfec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bff0:	b35a      	cbz	r2, 800c04a <_strtod_l+0x8ca>
 800bff2:	4a9f      	ldr	r2, [pc, #636]	@ (800c270 <_strtod_l+0xaf0>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d12b      	bne.n	800c050 <_strtod_l+0x8d0>
 800bff8:	9b08      	ldr	r3, [sp, #32]
 800bffa:	4651      	mov	r1, sl
 800bffc:	b303      	cbz	r3, 800c040 <_strtod_l+0x8c0>
 800bffe:	4b9d      	ldr	r3, [pc, #628]	@ (800c274 <_strtod_l+0xaf4>)
 800c000:	465a      	mov	r2, fp
 800c002:	4013      	ands	r3, r2
 800c004:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c008:	f04f 32ff 	mov.w	r2, #4294967295
 800c00c:	d81b      	bhi.n	800c046 <_strtod_l+0x8c6>
 800c00e:	0d1b      	lsrs	r3, r3, #20
 800c010:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	4299      	cmp	r1, r3
 800c01a:	d119      	bne.n	800c050 <_strtod_l+0x8d0>
 800c01c:	4b96      	ldr	r3, [pc, #600]	@ (800c278 <_strtod_l+0xaf8>)
 800c01e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c020:	429a      	cmp	r2, r3
 800c022:	d102      	bne.n	800c02a <_strtod_l+0x8aa>
 800c024:	3101      	adds	r1, #1
 800c026:	f43f adce 	beq.w	800bbc6 <_strtod_l+0x446>
 800c02a:	4b92      	ldr	r3, [pc, #584]	@ (800c274 <_strtod_l+0xaf4>)
 800c02c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c02e:	401a      	ands	r2, r3
 800c030:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c034:	f04f 0a00 	mov.w	sl, #0
 800c038:	9b08      	ldr	r3, [sp, #32]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1b9      	bne.n	800bfb2 <_strtod_l+0x832>
 800c03e:	e5cd      	b.n	800bbdc <_strtod_l+0x45c>
 800c040:	f04f 33ff 	mov.w	r3, #4294967295
 800c044:	e7e8      	b.n	800c018 <_strtod_l+0x898>
 800c046:	4613      	mov	r3, r2
 800c048:	e7e6      	b.n	800c018 <_strtod_l+0x898>
 800c04a:	ea53 030a 	orrs.w	r3, r3, sl
 800c04e:	d0a2      	beq.n	800bf96 <_strtod_l+0x816>
 800c050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c052:	b1db      	cbz	r3, 800c08c <_strtod_l+0x90c>
 800c054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c056:	4213      	tst	r3, r2
 800c058:	d0ee      	beq.n	800c038 <_strtod_l+0x8b8>
 800c05a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c05c:	9a08      	ldr	r2, [sp, #32]
 800c05e:	4650      	mov	r0, sl
 800c060:	4659      	mov	r1, fp
 800c062:	b1bb      	cbz	r3, 800c094 <_strtod_l+0x914>
 800c064:	f7ff fb6b 	bl	800b73e <sulp>
 800c068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c06c:	ec53 2b10 	vmov	r2, r3, d0
 800c070:	f7f4 f92c 	bl	80002cc <__adddf3>
 800c074:	4682      	mov	sl, r0
 800c076:	468b      	mov	fp, r1
 800c078:	e7de      	b.n	800c038 <_strtod_l+0x8b8>
 800c07a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c07e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c082:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c086:	f04f 3aff 	mov.w	sl, #4294967295
 800c08a:	e7d5      	b.n	800c038 <_strtod_l+0x8b8>
 800c08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c08e:	ea13 0f0a 	tst.w	r3, sl
 800c092:	e7e1      	b.n	800c058 <_strtod_l+0x8d8>
 800c094:	f7ff fb53 	bl	800b73e <sulp>
 800c098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c09c:	ec53 2b10 	vmov	r2, r3, d0
 800c0a0:	f7f4 f912 	bl	80002c8 <__aeabi_dsub>
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	468b      	mov	fp, r1
 800c0ac:	f7f4 fd2c 	bl	8000b08 <__aeabi_dcmpeq>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0c1      	beq.n	800c038 <_strtod_l+0x8b8>
 800c0b4:	e61a      	b.n	800bcec <_strtod_l+0x56c>
 800c0b6:	4641      	mov	r1, r8
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f002 ffb5 	bl	800f028 <__ratio>
 800c0be:	ec57 6b10 	vmov	r6, r7, d0
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fd30 	bl	8000b30 <__aeabi_dcmple>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d06f      	beq.n	800c1b4 <_strtod_l+0xa34>
 800c0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d17a      	bne.n	800c1d0 <_strtod_l+0xa50>
 800c0da:	f1ba 0f00 	cmp.w	sl, #0
 800c0de:	d158      	bne.n	800c192 <_strtod_l+0xa12>
 800c0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d15a      	bne.n	800c1a0 <_strtod_l+0xa20>
 800c0ea:	4b64      	ldr	r3, [pc, #400]	@ (800c27c <_strtod_l+0xafc>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 fd13 	bl	8000b1c <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d159      	bne.n	800c1ae <_strtod_l+0xa2e>
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4b60      	ldr	r3, [pc, #384]	@ (800c280 <_strtod_l+0xb00>)
 800c100:	2200      	movs	r2, #0
 800c102:	f7f4 fa99 	bl	8000638 <__aeabi_dmul>
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c10e:	9606      	str	r6, [sp, #24]
 800c110:	9307      	str	r3, [sp, #28]
 800c112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c116:	4d57      	ldr	r5, [pc, #348]	@ (800c274 <_strtod_l+0xaf4>)
 800c118:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11e:	401d      	ands	r5, r3
 800c120:	4b58      	ldr	r3, [pc, #352]	@ (800c284 <_strtod_l+0xb04>)
 800c122:	429d      	cmp	r5, r3
 800c124:	f040 80b2 	bne.w	800c28c <_strtod_l+0xb0c>
 800c128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c12a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c12e:	ec4b ab10 	vmov	d0, sl, fp
 800c132:	f002 feb1 	bl	800ee98 <__ulp>
 800c136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c13a:	ec51 0b10 	vmov	r0, r1, d0
 800c13e:	f7f4 fa7b 	bl	8000638 <__aeabi_dmul>
 800c142:	4652      	mov	r2, sl
 800c144:	465b      	mov	r3, fp
 800c146:	f7f4 f8c1 	bl	80002cc <__adddf3>
 800c14a:	460b      	mov	r3, r1
 800c14c:	4949      	ldr	r1, [pc, #292]	@ (800c274 <_strtod_l+0xaf4>)
 800c14e:	4a4e      	ldr	r2, [pc, #312]	@ (800c288 <_strtod_l+0xb08>)
 800c150:	4019      	ands	r1, r3
 800c152:	4291      	cmp	r1, r2
 800c154:	4682      	mov	sl, r0
 800c156:	d942      	bls.n	800c1de <_strtod_l+0xa5e>
 800c158:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c15a:	4b47      	ldr	r3, [pc, #284]	@ (800c278 <_strtod_l+0xaf8>)
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d103      	bne.n	800c168 <_strtod_l+0x9e8>
 800c160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c162:	3301      	adds	r3, #1
 800c164:	f43f ad2f 	beq.w	800bbc6 <_strtod_l+0x446>
 800c168:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c278 <_strtod_l+0xaf8>
 800c16c:	f04f 3aff 	mov.w	sl, #4294967295
 800c170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c172:	9805      	ldr	r0, [sp, #20]
 800c174:	f002 fb64 	bl	800e840 <_Bfree>
 800c178:	9805      	ldr	r0, [sp, #20]
 800c17a:	4649      	mov	r1, r9
 800c17c:	f002 fb60 	bl	800e840 <_Bfree>
 800c180:	9805      	ldr	r0, [sp, #20]
 800c182:	4641      	mov	r1, r8
 800c184:	f002 fb5c 	bl	800e840 <_Bfree>
 800c188:	9805      	ldr	r0, [sp, #20]
 800c18a:	4621      	mov	r1, r4
 800c18c:	f002 fb58 	bl	800e840 <_Bfree>
 800c190:	e619      	b.n	800bdc6 <_strtod_l+0x646>
 800c192:	f1ba 0f01 	cmp.w	sl, #1
 800c196:	d103      	bne.n	800c1a0 <_strtod_l+0xa20>
 800c198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f43f ada6 	beq.w	800bcec <_strtod_l+0x56c>
 800c1a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c250 <_strtod_l+0xad0>
 800c1a4:	4f35      	ldr	r7, [pc, #212]	@ (800c27c <_strtod_l+0xafc>)
 800c1a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	e7b1      	b.n	800c112 <_strtod_l+0x992>
 800c1ae:	4f34      	ldr	r7, [pc, #208]	@ (800c280 <_strtod_l+0xb00>)
 800c1b0:	2600      	movs	r6, #0
 800c1b2:	e7aa      	b.n	800c10a <_strtod_l+0x98a>
 800c1b4:	4b32      	ldr	r3, [pc, #200]	@ (800c280 <_strtod_l+0xb00>)
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f7f4 fa3c 	bl	8000638 <__aeabi_dmul>
 800c1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d09f      	beq.n	800c10a <_strtod_l+0x98a>
 800c1ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1ce:	e7a0      	b.n	800c112 <_strtod_l+0x992>
 800c1d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c258 <_strtod_l+0xad8>
 800c1d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1d8:	ec57 6b17 	vmov	r6, r7, d7
 800c1dc:	e799      	b.n	800c112 <_strtod_l+0x992>
 800c1de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1c1      	bne.n	800c170 <_strtod_l+0x9f0>
 800c1ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1f0:	0d1b      	lsrs	r3, r3, #20
 800c1f2:	051b      	lsls	r3, r3, #20
 800c1f4:	429d      	cmp	r5, r3
 800c1f6:	d1bb      	bne.n	800c170 <_strtod_l+0x9f0>
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 fd7c 	bl	8000cf8 <__aeabi_d2lz>
 800c200:	f7f4 f9ec 	bl	80005dc <__aeabi_l2d>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 f85c 	bl	80002c8 <__aeabi_dsub>
 800c210:	460b      	mov	r3, r1
 800c212:	4602      	mov	r2, r0
 800c214:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c218:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c21e:	ea46 060a 	orr.w	r6, r6, sl
 800c222:	431e      	orrs	r6, r3
 800c224:	d06f      	beq.n	800c306 <_strtod_l+0xb86>
 800c226:	a30e      	add	r3, pc, #56	@ (adr r3, 800c260 <_strtod_l+0xae0>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f7f4 fc76 	bl	8000b1c <__aeabi_dcmplt>
 800c230:	2800      	cmp	r0, #0
 800c232:	f47f acd3 	bne.w	800bbdc <_strtod_l+0x45c>
 800c236:	a30c      	add	r3, pc, #48	@ (adr r3, 800c268 <_strtod_l+0xae8>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c240:	f7f4 fc8a 	bl	8000b58 <__aeabi_dcmpgt>
 800c244:	2800      	cmp	r0, #0
 800c246:	d093      	beq.n	800c170 <_strtod_l+0x9f0>
 800c248:	e4c8      	b.n	800bbdc <_strtod_l+0x45c>
 800c24a:	bf00      	nop
 800c24c:	f3af 8000 	nop.w
 800c250:	00000000 	.word	0x00000000
 800c254:	bff00000 	.word	0xbff00000
 800c258:	00000000 	.word	0x00000000
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	94a03595 	.word	0x94a03595
 800c264:	3fdfffff 	.word	0x3fdfffff
 800c268:	35afe535 	.word	0x35afe535
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	000fffff 	.word	0x000fffff
 800c274:	7ff00000 	.word	0x7ff00000
 800c278:	7fefffff 	.word	0x7fefffff
 800c27c:	3ff00000 	.word	0x3ff00000
 800c280:	3fe00000 	.word	0x3fe00000
 800c284:	7fe00000 	.word	0x7fe00000
 800c288:	7c9fffff 	.word	0x7c9fffff
 800c28c:	9b08      	ldr	r3, [sp, #32]
 800c28e:	b323      	cbz	r3, 800c2da <_strtod_l+0xb5a>
 800c290:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c294:	d821      	bhi.n	800c2da <_strtod_l+0xb5a>
 800c296:	a328      	add	r3, pc, #160	@ (adr r3, 800c338 <_strtod_l+0xbb8>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4630      	mov	r0, r6
 800c29e:	4639      	mov	r1, r7
 800c2a0:	f7f4 fc46 	bl	8000b30 <__aeabi_dcmple>
 800c2a4:	b1a0      	cbz	r0, 800c2d0 <_strtod_l+0xb50>
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7f4 fc9d 	bl	8000be8 <__aeabi_d2uiz>
 800c2ae:	2801      	cmp	r0, #1
 800c2b0:	bf38      	it	cc
 800c2b2:	2001      	movcc	r0, #1
 800c2b4:	f7f4 f946 	bl	8000544 <__aeabi_ui2d>
 800c2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	b9fb      	cbnz	r3, 800c300 <_strtod_l+0xb80>
 800c2c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c2c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c2cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c2d6:	1b5b      	subs	r3, r3, r5
 800c2d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c2da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c2de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c2e2:	f002 fdd9 	bl	800ee98 <__ulp>
 800c2e6:	4650      	mov	r0, sl
 800c2e8:	ec53 2b10 	vmov	r2, r3, d0
 800c2ec:	4659      	mov	r1, fp
 800c2ee:	f7f4 f9a3 	bl	8000638 <__aeabi_dmul>
 800c2f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c2f6:	f7f3 ffe9 	bl	80002cc <__adddf3>
 800c2fa:	4682      	mov	sl, r0
 800c2fc:	468b      	mov	fp, r1
 800c2fe:	e770      	b.n	800c1e2 <_strtod_l+0xa62>
 800c300:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c304:	e7e0      	b.n	800c2c8 <_strtod_l+0xb48>
 800c306:	a30e      	add	r3, pc, #56	@ (adr r3, 800c340 <_strtod_l+0xbc0>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	f7f4 fc06 	bl	8000b1c <__aeabi_dcmplt>
 800c310:	e798      	b.n	800c244 <_strtod_l+0xac4>
 800c312:	2300      	movs	r3, #0
 800c314:	930e      	str	r3, [sp, #56]	@ 0x38
 800c316:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	f7ff ba6d 	b.w	800b7fa <_strtod_l+0x7a>
 800c320:	2a65      	cmp	r2, #101	@ 0x65
 800c322:	f43f ab68 	beq.w	800b9f6 <_strtod_l+0x276>
 800c326:	2a45      	cmp	r2, #69	@ 0x45
 800c328:	f43f ab65 	beq.w	800b9f6 <_strtod_l+0x276>
 800c32c:	2301      	movs	r3, #1
 800c32e:	f7ff bba0 	b.w	800ba72 <_strtod_l+0x2f2>
 800c332:	bf00      	nop
 800c334:	f3af 8000 	nop.w
 800c338:	ffc00000 	.word	0xffc00000
 800c33c:	41dfffff 	.word	0x41dfffff
 800c340:	94a03595 	.word	0x94a03595
 800c344:	3fcfffff 	.word	0x3fcfffff

0800c348 <strtod>:
 800c348:	460a      	mov	r2, r1
 800c34a:	4601      	mov	r1, r0
 800c34c:	4802      	ldr	r0, [pc, #8]	@ (800c358 <strtod+0x10>)
 800c34e:	4b03      	ldr	r3, [pc, #12]	@ (800c35c <strtod+0x14>)
 800c350:	6800      	ldr	r0, [r0, #0]
 800c352:	f7ff ba15 	b.w	800b780 <_strtod_l>
 800c356:	bf00      	nop
 800c358:	200001c4 	.word	0x200001c4
 800c35c:	20000058 	.word	0x20000058

0800c360 <_strtol_l.isra.0>:
 800c360:	2b24      	cmp	r3, #36	@ 0x24
 800c362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c366:	4686      	mov	lr, r0
 800c368:	4690      	mov	r8, r2
 800c36a:	d801      	bhi.n	800c370 <_strtol_l.isra.0+0x10>
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d106      	bne.n	800c37e <_strtol_l.isra.0+0x1e>
 800c370:	f000 ff3e 	bl	800d1f0 <__errno>
 800c374:	2316      	movs	r3, #22
 800c376:	6003      	str	r3, [r0, #0]
 800c378:	2000      	movs	r0, #0
 800c37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c37e:	4834      	ldr	r0, [pc, #208]	@ (800c450 <_strtol_l.isra.0+0xf0>)
 800c380:	460d      	mov	r5, r1
 800c382:	462a      	mov	r2, r5
 800c384:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c388:	5d06      	ldrb	r6, [r0, r4]
 800c38a:	f016 0608 	ands.w	r6, r6, #8
 800c38e:	d1f8      	bne.n	800c382 <_strtol_l.isra.0+0x22>
 800c390:	2c2d      	cmp	r4, #45	@ 0x2d
 800c392:	d110      	bne.n	800c3b6 <_strtol_l.isra.0+0x56>
 800c394:	782c      	ldrb	r4, [r5, #0]
 800c396:	2601      	movs	r6, #1
 800c398:	1c95      	adds	r5, r2, #2
 800c39a:	f033 0210 	bics.w	r2, r3, #16
 800c39e:	d115      	bne.n	800c3cc <_strtol_l.isra.0+0x6c>
 800c3a0:	2c30      	cmp	r4, #48	@ 0x30
 800c3a2:	d10d      	bne.n	800c3c0 <_strtol_l.isra.0+0x60>
 800c3a4:	782a      	ldrb	r2, [r5, #0]
 800c3a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c3aa:	2a58      	cmp	r2, #88	@ 0x58
 800c3ac:	d108      	bne.n	800c3c0 <_strtol_l.isra.0+0x60>
 800c3ae:	786c      	ldrb	r4, [r5, #1]
 800c3b0:	3502      	adds	r5, #2
 800c3b2:	2310      	movs	r3, #16
 800c3b4:	e00a      	b.n	800c3cc <_strtol_l.isra.0+0x6c>
 800c3b6:	2c2b      	cmp	r4, #43	@ 0x2b
 800c3b8:	bf04      	itt	eq
 800c3ba:	782c      	ldrbeq	r4, [r5, #0]
 800c3bc:	1c95      	addeq	r5, r2, #2
 800c3be:	e7ec      	b.n	800c39a <_strtol_l.isra.0+0x3a>
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1f6      	bne.n	800c3b2 <_strtol_l.isra.0+0x52>
 800c3c4:	2c30      	cmp	r4, #48	@ 0x30
 800c3c6:	bf14      	ite	ne
 800c3c8:	230a      	movne	r3, #10
 800c3ca:	2308      	moveq	r3, #8
 800c3cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c3d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	fbbc f9f3 	udiv	r9, ip, r3
 800c3da:	4610      	mov	r0, r2
 800c3dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800c3e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c3e4:	2f09      	cmp	r7, #9
 800c3e6:	d80f      	bhi.n	800c408 <_strtol_l.isra.0+0xa8>
 800c3e8:	463c      	mov	r4, r7
 800c3ea:	42a3      	cmp	r3, r4
 800c3ec:	dd1b      	ble.n	800c426 <_strtol_l.isra.0+0xc6>
 800c3ee:	1c57      	adds	r7, r2, #1
 800c3f0:	d007      	beq.n	800c402 <_strtol_l.isra.0+0xa2>
 800c3f2:	4581      	cmp	r9, r0
 800c3f4:	d314      	bcc.n	800c420 <_strtol_l.isra.0+0xc0>
 800c3f6:	d101      	bne.n	800c3fc <_strtol_l.isra.0+0x9c>
 800c3f8:	45a2      	cmp	sl, r4
 800c3fa:	db11      	blt.n	800c420 <_strtol_l.isra.0+0xc0>
 800c3fc:	fb00 4003 	mla	r0, r0, r3, r4
 800c400:	2201      	movs	r2, #1
 800c402:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c406:	e7eb      	b.n	800c3e0 <_strtol_l.isra.0+0x80>
 800c408:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c40c:	2f19      	cmp	r7, #25
 800c40e:	d801      	bhi.n	800c414 <_strtol_l.isra.0+0xb4>
 800c410:	3c37      	subs	r4, #55	@ 0x37
 800c412:	e7ea      	b.n	800c3ea <_strtol_l.isra.0+0x8a>
 800c414:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c418:	2f19      	cmp	r7, #25
 800c41a:	d804      	bhi.n	800c426 <_strtol_l.isra.0+0xc6>
 800c41c:	3c57      	subs	r4, #87	@ 0x57
 800c41e:	e7e4      	b.n	800c3ea <_strtol_l.isra.0+0x8a>
 800c420:	f04f 32ff 	mov.w	r2, #4294967295
 800c424:	e7ed      	b.n	800c402 <_strtol_l.isra.0+0xa2>
 800c426:	1c53      	adds	r3, r2, #1
 800c428:	d108      	bne.n	800c43c <_strtol_l.isra.0+0xdc>
 800c42a:	2322      	movs	r3, #34	@ 0x22
 800c42c:	f8ce 3000 	str.w	r3, [lr]
 800c430:	4660      	mov	r0, ip
 800c432:	f1b8 0f00 	cmp.w	r8, #0
 800c436:	d0a0      	beq.n	800c37a <_strtol_l.isra.0+0x1a>
 800c438:	1e69      	subs	r1, r5, #1
 800c43a:	e006      	b.n	800c44a <_strtol_l.isra.0+0xea>
 800c43c:	b106      	cbz	r6, 800c440 <_strtol_l.isra.0+0xe0>
 800c43e:	4240      	negs	r0, r0
 800c440:	f1b8 0f00 	cmp.w	r8, #0
 800c444:	d099      	beq.n	800c37a <_strtol_l.isra.0+0x1a>
 800c446:	2a00      	cmp	r2, #0
 800c448:	d1f6      	bne.n	800c438 <_strtol_l.isra.0+0xd8>
 800c44a:	f8c8 1000 	str.w	r1, [r8]
 800c44e:	e794      	b.n	800c37a <_strtol_l.isra.0+0x1a>
 800c450:	080109d9 	.word	0x080109d9

0800c454 <strtol>:
 800c454:	4613      	mov	r3, r2
 800c456:	460a      	mov	r2, r1
 800c458:	4601      	mov	r1, r0
 800c45a:	4802      	ldr	r0, [pc, #8]	@ (800c464 <strtol+0x10>)
 800c45c:	6800      	ldr	r0, [r0, #0]
 800c45e:	f7ff bf7f 	b.w	800c360 <_strtol_l.isra.0>
 800c462:	bf00      	nop
 800c464:	200001c4 	.word	0x200001c4

0800c468 <__cvt>:
 800c468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c46c:	ec57 6b10 	vmov	r6, r7, d0
 800c470:	2f00      	cmp	r7, #0
 800c472:	460c      	mov	r4, r1
 800c474:	4619      	mov	r1, r3
 800c476:	463b      	mov	r3, r7
 800c478:	bfbb      	ittet	lt
 800c47a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c47e:	461f      	movlt	r7, r3
 800c480:	2300      	movge	r3, #0
 800c482:	232d      	movlt	r3, #45	@ 0x2d
 800c484:	700b      	strb	r3, [r1, #0]
 800c486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c488:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c48c:	4691      	mov	r9, r2
 800c48e:	f023 0820 	bic.w	r8, r3, #32
 800c492:	bfbc      	itt	lt
 800c494:	4632      	movlt	r2, r6
 800c496:	4616      	movlt	r6, r2
 800c498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c49c:	d005      	beq.n	800c4aa <__cvt+0x42>
 800c49e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c4a2:	d100      	bne.n	800c4a6 <__cvt+0x3e>
 800c4a4:	3401      	adds	r4, #1
 800c4a6:	2102      	movs	r1, #2
 800c4a8:	e000      	b.n	800c4ac <__cvt+0x44>
 800c4aa:	2103      	movs	r1, #3
 800c4ac:	ab03      	add	r3, sp, #12
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	ab02      	add	r3, sp, #8
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	ec47 6b10 	vmov	d0, r6, r7
 800c4b8:	4653      	mov	r3, sl
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	f000 ff64 	bl	800d388 <_dtoa_r>
 800c4c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	d119      	bne.n	800c4fc <__cvt+0x94>
 800c4c8:	f019 0f01 	tst.w	r9, #1
 800c4cc:	d00e      	beq.n	800c4ec <__cvt+0x84>
 800c4ce:	eb00 0904 	add.w	r9, r0, r4
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	4639      	mov	r1, r7
 800c4da:	f7f4 fb15 	bl	8000b08 <__aeabi_dcmpeq>
 800c4de:	b108      	cbz	r0, 800c4e4 <__cvt+0x7c>
 800c4e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4e4:	2230      	movs	r2, #48	@ 0x30
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	454b      	cmp	r3, r9
 800c4ea:	d31e      	bcc.n	800c52a <__cvt+0xc2>
 800c4ec:	9b03      	ldr	r3, [sp, #12]
 800c4ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4f0:	1b5b      	subs	r3, r3, r5
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	b004      	add	sp, #16
 800c4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c500:	eb00 0904 	add.w	r9, r0, r4
 800c504:	d1e5      	bne.n	800c4d2 <__cvt+0x6a>
 800c506:	7803      	ldrb	r3, [r0, #0]
 800c508:	2b30      	cmp	r3, #48	@ 0x30
 800c50a:	d10a      	bne.n	800c522 <__cvt+0xba>
 800c50c:	2200      	movs	r2, #0
 800c50e:	2300      	movs	r3, #0
 800c510:	4630      	mov	r0, r6
 800c512:	4639      	mov	r1, r7
 800c514:	f7f4 faf8 	bl	8000b08 <__aeabi_dcmpeq>
 800c518:	b918      	cbnz	r0, 800c522 <__cvt+0xba>
 800c51a:	f1c4 0401 	rsb	r4, r4, #1
 800c51e:	f8ca 4000 	str.w	r4, [sl]
 800c522:	f8da 3000 	ldr.w	r3, [sl]
 800c526:	4499      	add	r9, r3
 800c528:	e7d3      	b.n	800c4d2 <__cvt+0x6a>
 800c52a:	1c59      	adds	r1, r3, #1
 800c52c:	9103      	str	r1, [sp, #12]
 800c52e:	701a      	strb	r2, [r3, #0]
 800c530:	e7d9      	b.n	800c4e6 <__cvt+0x7e>

0800c532 <__exponent>:
 800c532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c534:	2900      	cmp	r1, #0
 800c536:	bfba      	itte	lt
 800c538:	4249      	neglt	r1, r1
 800c53a:	232d      	movlt	r3, #45	@ 0x2d
 800c53c:	232b      	movge	r3, #43	@ 0x2b
 800c53e:	2909      	cmp	r1, #9
 800c540:	7002      	strb	r2, [r0, #0]
 800c542:	7043      	strb	r3, [r0, #1]
 800c544:	dd29      	ble.n	800c59a <__exponent+0x68>
 800c546:	f10d 0307 	add.w	r3, sp, #7
 800c54a:	461d      	mov	r5, r3
 800c54c:	270a      	movs	r7, #10
 800c54e:	461a      	mov	r2, r3
 800c550:	fbb1 f6f7 	udiv	r6, r1, r7
 800c554:	fb07 1416 	mls	r4, r7, r6, r1
 800c558:	3430      	adds	r4, #48	@ 0x30
 800c55a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c55e:	460c      	mov	r4, r1
 800c560:	2c63      	cmp	r4, #99	@ 0x63
 800c562:	f103 33ff 	add.w	r3, r3, #4294967295
 800c566:	4631      	mov	r1, r6
 800c568:	dcf1      	bgt.n	800c54e <__exponent+0x1c>
 800c56a:	3130      	adds	r1, #48	@ 0x30
 800c56c:	1e94      	subs	r4, r2, #2
 800c56e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c572:	1c41      	adds	r1, r0, #1
 800c574:	4623      	mov	r3, r4
 800c576:	42ab      	cmp	r3, r5
 800c578:	d30a      	bcc.n	800c590 <__exponent+0x5e>
 800c57a:	f10d 0309 	add.w	r3, sp, #9
 800c57e:	1a9b      	subs	r3, r3, r2
 800c580:	42ac      	cmp	r4, r5
 800c582:	bf88      	it	hi
 800c584:	2300      	movhi	r3, #0
 800c586:	3302      	adds	r3, #2
 800c588:	4403      	add	r3, r0
 800c58a:	1a18      	subs	r0, r3, r0
 800c58c:	b003      	add	sp, #12
 800c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c590:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c594:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c598:	e7ed      	b.n	800c576 <__exponent+0x44>
 800c59a:	2330      	movs	r3, #48	@ 0x30
 800c59c:	3130      	adds	r1, #48	@ 0x30
 800c59e:	7083      	strb	r3, [r0, #2]
 800c5a0:	70c1      	strb	r1, [r0, #3]
 800c5a2:	1d03      	adds	r3, r0, #4
 800c5a4:	e7f1      	b.n	800c58a <__exponent+0x58>
	...

0800c5a8 <_printf_float>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	b08d      	sub	sp, #52	@ 0x34
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c5b4:	4616      	mov	r6, r2
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	f000 fdcf 	bl	800d15c <_localeconv_r>
 800c5be:	6803      	ldr	r3, [r0, #0]
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f3 fe74 	bl	80002b0 <strlen>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d0:	9005      	str	r0, [sp, #20]
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	f023 0307 	bic.w	r3, r3, #7
 800c5d8:	f103 0208 	add.w	r2, r3, #8
 800c5dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5e0:	f8d4 b000 	ldr.w	fp, [r4]
 800c5e4:	f8c8 2000 	str.w	r2, [r8]
 800c5e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c5f0:	9307      	str	r3, [sp, #28]
 800c5f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c5fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5fe:	4b9c      	ldr	r3, [pc, #624]	@ (800c870 <_printf_float+0x2c8>)
 800c600:	f04f 32ff 	mov.w	r2, #4294967295
 800c604:	f7f4 fab2 	bl	8000b6c <__aeabi_dcmpun>
 800c608:	bb70      	cbnz	r0, 800c668 <_printf_float+0xc0>
 800c60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c60e:	4b98      	ldr	r3, [pc, #608]	@ (800c870 <_printf_float+0x2c8>)
 800c610:	f04f 32ff 	mov.w	r2, #4294967295
 800c614:	f7f4 fa8c 	bl	8000b30 <__aeabi_dcmple>
 800c618:	bb30      	cbnz	r0, 800c668 <_printf_float+0xc0>
 800c61a:	2200      	movs	r2, #0
 800c61c:	2300      	movs	r3, #0
 800c61e:	4640      	mov	r0, r8
 800c620:	4649      	mov	r1, r9
 800c622:	f7f4 fa7b 	bl	8000b1c <__aeabi_dcmplt>
 800c626:	b110      	cbz	r0, 800c62e <_printf_float+0x86>
 800c628:	232d      	movs	r3, #45	@ 0x2d
 800c62a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c62e:	4a91      	ldr	r2, [pc, #580]	@ (800c874 <_printf_float+0x2cc>)
 800c630:	4b91      	ldr	r3, [pc, #580]	@ (800c878 <_printf_float+0x2d0>)
 800c632:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c636:	bf8c      	ite	hi
 800c638:	4690      	movhi	r8, r2
 800c63a:	4698      	movls	r8, r3
 800c63c:	2303      	movs	r3, #3
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	f02b 0304 	bic.w	r3, fp, #4
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	f04f 0900 	mov.w	r9, #0
 800c64a:	9700      	str	r7, [sp, #0]
 800c64c:	4633      	mov	r3, r6
 800c64e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c650:	4621      	mov	r1, r4
 800c652:	4628      	mov	r0, r5
 800c654:	f000 f9d2 	bl	800c9fc <_printf_common>
 800c658:	3001      	adds	r0, #1
 800c65a:	f040 808d 	bne.w	800c778 <_printf_float+0x1d0>
 800c65e:	f04f 30ff 	mov.w	r0, #4294967295
 800c662:	b00d      	add	sp, #52	@ 0x34
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	4642      	mov	r2, r8
 800c66a:	464b      	mov	r3, r9
 800c66c:	4640      	mov	r0, r8
 800c66e:	4649      	mov	r1, r9
 800c670:	f7f4 fa7c 	bl	8000b6c <__aeabi_dcmpun>
 800c674:	b140      	cbz	r0, 800c688 <_printf_float+0xe0>
 800c676:	464b      	mov	r3, r9
 800c678:	2b00      	cmp	r3, #0
 800c67a:	bfbc      	itt	lt
 800c67c:	232d      	movlt	r3, #45	@ 0x2d
 800c67e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c682:	4a7e      	ldr	r2, [pc, #504]	@ (800c87c <_printf_float+0x2d4>)
 800c684:	4b7e      	ldr	r3, [pc, #504]	@ (800c880 <_printf_float+0x2d8>)
 800c686:	e7d4      	b.n	800c632 <_printf_float+0x8a>
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c68e:	9206      	str	r2, [sp, #24]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	d13b      	bne.n	800c70c <_printf_float+0x164>
 800c694:	2306      	movs	r3, #6
 800c696:	6063      	str	r3, [r4, #4]
 800c698:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c69c:	2300      	movs	r3, #0
 800c69e:	6022      	str	r2, [r4, #0]
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c6a8:	ab09      	add	r3, sp, #36	@ 0x24
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	6861      	ldr	r1, [r4, #4]
 800c6ae:	ec49 8b10 	vmov	d0, r8, r9
 800c6b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f7ff fed6 	bl	800c468 <__cvt>
 800c6bc:	9b06      	ldr	r3, [sp, #24]
 800c6be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6c0:	2b47      	cmp	r3, #71	@ 0x47
 800c6c2:	4680      	mov	r8, r0
 800c6c4:	d129      	bne.n	800c71a <_printf_float+0x172>
 800c6c6:	1cc8      	adds	r0, r1, #3
 800c6c8:	db02      	blt.n	800c6d0 <_printf_float+0x128>
 800c6ca:	6863      	ldr	r3, [r4, #4]
 800c6cc:	4299      	cmp	r1, r3
 800c6ce:	dd41      	ble.n	800c754 <_printf_float+0x1ac>
 800c6d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6d4:	fa5f fa8a 	uxtb.w	sl, sl
 800c6d8:	3901      	subs	r1, #1
 800c6da:	4652      	mov	r2, sl
 800c6dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6e2:	f7ff ff26 	bl	800c532 <__exponent>
 800c6e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6e8:	1813      	adds	r3, r2, r0
 800c6ea:	2a01      	cmp	r2, #1
 800c6ec:	4681      	mov	r9, r0
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	dc02      	bgt.n	800c6f8 <_printf_float+0x150>
 800c6f2:	6822      	ldr	r2, [r4, #0]
 800c6f4:	07d2      	lsls	r2, r2, #31
 800c6f6:	d501      	bpl.n	800c6fc <_printf_float+0x154>
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	6123      	str	r3, [r4, #16]
 800c6fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c700:	2b00      	cmp	r3, #0
 800c702:	d0a2      	beq.n	800c64a <_printf_float+0xa2>
 800c704:	232d      	movs	r3, #45	@ 0x2d
 800c706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c70a:	e79e      	b.n	800c64a <_printf_float+0xa2>
 800c70c:	9a06      	ldr	r2, [sp, #24]
 800c70e:	2a47      	cmp	r2, #71	@ 0x47
 800c710:	d1c2      	bne.n	800c698 <_printf_float+0xf0>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1c0      	bne.n	800c698 <_printf_float+0xf0>
 800c716:	2301      	movs	r3, #1
 800c718:	e7bd      	b.n	800c696 <_printf_float+0xee>
 800c71a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c71e:	d9db      	bls.n	800c6d8 <_printf_float+0x130>
 800c720:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c724:	d118      	bne.n	800c758 <_printf_float+0x1b0>
 800c726:	2900      	cmp	r1, #0
 800c728:	6863      	ldr	r3, [r4, #4]
 800c72a:	dd0b      	ble.n	800c744 <_printf_float+0x19c>
 800c72c:	6121      	str	r1, [r4, #16]
 800c72e:	b913      	cbnz	r3, 800c736 <_printf_float+0x18e>
 800c730:	6822      	ldr	r2, [r4, #0]
 800c732:	07d0      	lsls	r0, r2, #31
 800c734:	d502      	bpl.n	800c73c <_printf_float+0x194>
 800c736:	3301      	adds	r3, #1
 800c738:	440b      	add	r3, r1
 800c73a:	6123      	str	r3, [r4, #16]
 800c73c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c73e:	f04f 0900 	mov.w	r9, #0
 800c742:	e7db      	b.n	800c6fc <_printf_float+0x154>
 800c744:	b913      	cbnz	r3, 800c74c <_printf_float+0x1a4>
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	07d2      	lsls	r2, r2, #31
 800c74a:	d501      	bpl.n	800c750 <_printf_float+0x1a8>
 800c74c:	3302      	adds	r3, #2
 800c74e:	e7f4      	b.n	800c73a <_printf_float+0x192>
 800c750:	2301      	movs	r3, #1
 800c752:	e7f2      	b.n	800c73a <_printf_float+0x192>
 800c754:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c75a:	4299      	cmp	r1, r3
 800c75c:	db05      	blt.n	800c76a <_printf_float+0x1c2>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	6121      	str	r1, [r4, #16]
 800c762:	07d8      	lsls	r0, r3, #31
 800c764:	d5ea      	bpl.n	800c73c <_printf_float+0x194>
 800c766:	1c4b      	adds	r3, r1, #1
 800c768:	e7e7      	b.n	800c73a <_printf_float+0x192>
 800c76a:	2900      	cmp	r1, #0
 800c76c:	bfd4      	ite	le
 800c76e:	f1c1 0202 	rsble	r2, r1, #2
 800c772:	2201      	movgt	r2, #1
 800c774:	4413      	add	r3, r2
 800c776:	e7e0      	b.n	800c73a <_printf_float+0x192>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	055a      	lsls	r2, r3, #21
 800c77c:	d407      	bmi.n	800c78e <_printf_float+0x1e6>
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	4642      	mov	r2, r8
 800c782:	4631      	mov	r1, r6
 800c784:	4628      	mov	r0, r5
 800c786:	47b8      	blx	r7
 800c788:	3001      	adds	r0, #1
 800c78a:	d12b      	bne.n	800c7e4 <_printf_float+0x23c>
 800c78c:	e767      	b.n	800c65e <_printf_float+0xb6>
 800c78e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c792:	f240 80dd 	bls.w	800c950 <_printf_float+0x3a8>
 800c796:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c79a:	2200      	movs	r2, #0
 800c79c:	2300      	movs	r3, #0
 800c79e:	f7f4 f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d033      	beq.n	800c80e <_printf_float+0x266>
 800c7a6:	4a37      	ldr	r2, [pc, #220]	@ (800c884 <_printf_float+0x2dc>)
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	47b8      	blx	r7
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	f43f af54 	beq.w	800c65e <_printf_float+0xb6>
 800c7b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c7ba:	4543      	cmp	r3, r8
 800c7bc:	db02      	blt.n	800c7c4 <_printf_float+0x21c>
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	07d8      	lsls	r0, r3, #31
 800c7c2:	d50f      	bpl.n	800c7e4 <_printf_float+0x23c>
 800c7c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	47b8      	blx	r7
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	f43f af45 	beq.w	800c65e <_printf_float+0xb6>
 800c7d4:	f04f 0900 	mov.w	r9, #0
 800c7d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7dc:	f104 0a1a 	add.w	sl, r4, #26
 800c7e0:	45c8      	cmp	r8, r9
 800c7e2:	dc09      	bgt.n	800c7f8 <_printf_float+0x250>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	079b      	lsls	r3, r3, #30
 800c7e8:	f100 8103 	bmi.w	800c9f2 <_printf_float+0x44a>
 800c7ec:	68e0      	ldr	r0, [r4, #12]
 800c7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f0:	4298      	cmp	r0, r3
 800c7f2:	bfb8      	it	lt
 800c7f4:	4618      	movlt	r0, r3
 800c7f6:	e734      	b.n	800c662 <_printf_float+0xba>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	4652      	mov	r2, sl
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b8      	blx	r7
 800c802:	3001      	adds	r0, #1
 800c804:	f43f af2b 	beq.w	800c65e <_printf_float+0xb6>
 800c808:	f109 0901 	add.w	r9, r9, #1
 800c80c:	e7e8      	b.n	800c7e0 <_printf_float+0x238>
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	dc39      	bgt.n	800c888 <_printf_float+0x2e0>
 800c814:	4a1b      	ldr	r2, [pc, #108]	@ (800c884 <_printf_float+0x2dc>)
 800c816:	2301      	movs	r3, #1
 800c818:	4631      	mov	r1, r6
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	f43f af1d 	beq.w	800c65e <_printf_float+0xb6>
 800c824:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c828:	ea59 0303 	orrs.w	r3, r9, r3
 800c82c:	d102      	bne.n	800c834 <_printf_float+0x28c>
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	07d9      	lsls	r1, r3, #31
 800c832:	d5d7      	bpl.n	800c7e4 <_printf_float+0x23c>
 800c834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c838:	4631      	mov	r1, r6
 800c83a:	4628      	mov	r0, r5
 800c83c:	47b8      	blx	r7
 800c83e:	3001      	adds	r0, #1
 800c840:	f43f af0d 	beq.w	800c65e <_printf_float+0xb6>
 800c844:	f04f 0a00 	mov.w	sl, #0
 800c848:	f104 0b1a 	add.w	fp, r4, #26
 800c84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84e:	425b      	negs	r3, r3
 800c850:	4553      	cmp	r3, sl
 800c852:	dc01      	bgt.n	800c858 <_printf_float+0x2b0>
 800c854:	464b      	mov	r3, r9
 800c856:	e793      	b.n	800c780 <_printf_float+0x1d8>
 800c858:	2301      	movs	r3, #1
 800c85a:	465a      	mov	r2, fp
 800c85c:	4631      	mov	r1, r6
 800c85e:	4628      	mov	r0, r5
 800c860:	47b8      	blx	r7
 800c862:	3001      	adds	r0, #1
 800c864:	f43f aefb 	beq.w	800c65e <_printf_float+0xb6>
 800c868:	f10a 0a01 	add.w	sl, sl, #1
 800c86c:	e7ee      	b.n	800c84c <_printf_float+0x2a4>
 800c86e:	bf00      	nop
 800c870:	7fefffff 	.word	0x7fefffff
 800c874:	080107b6 	.word	0x080107b6
 800c878:	080107b2 	.word	0x080107b2
 800c87c:	080107be 	.word	0x080107be
 800c880:	080107ba 	.word	0x080107ba
 800c884:	080107c2 	.word	0x080107c2
 800c888:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c88a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c88e:	4553      	cmp	r3, sl
 800c890:	bfa8      	it	ge
 800c892:	4653      	movge	r3, sl
 800c894:	2b00      	cmp	r3, #0
 800c896:	4699      	mov	r9, r3
 800c898:	dc36      	bgt.n	800c908 <_printf_float+0x360>
 800c89a:	f04f 0b00 	mov.w	fp, #0
 800c89e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8a2:	f104 021a 	add.w	r2, r4, #26
 800c8a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8a8:	9306      	str	r3, [sp, #24]
 800c8aa:	eba3 0309 	sub.w	r3, r3, r9
 800c8ae:	455b      	cmp	r3, fp
 800c8b0:	dc31      	bgt.n	800c916 <_printf_float+0x36e>
 800c8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b4:	459a      	cmp	sl, r3
 800c8b6:	dc3a      	bgt.n	800c92e <_printf_float+0x386>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	07da      	lsls	r2, r3, #31
 800c8bc:	d437      	bmi.n	800c92e <_printf_float+0x386>
 800c8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c0:	ebaa 0903 	sub.w	r9, sl, r3
 800c8c4:	9b06      	ldr	r3, [sp, #24]
 800c8c6:	ebaa 0303 	sub.w	r3, sl, r3
 800c8ca:	4599      	cmp	r9, r3
 800c8cc:	bfa8      	it	ge
 800c8ce:	4699      	movge	r9, r3
 800c8d0:	f1b9 0f00 	cmp.w	r9, #0
 800c8d4:	dc33      	bgt.n	800c93e <_printf_float+0x396>
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8de:	f104 0b1a 	add.w	fp, r4, #26
 800c8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c8e8:	eba3 0309 	sub.w	r3, r3, r9
 800c8ec:	4543      	cmp	r3, r8
 800c8ee:	f77f af79 	ble.w	800c7e4 <_printf_float+0x23c>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	465a      	mov	r2, fp
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b8      	blx	r7
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	f43f aeae 	beq.w	800c65e <_printf_float+0xb6>
 800c902:	f108 0801 	add.w	r8, r8, #1
 800c906:	e7ec      	b.n	800c8e2 <_printf_float+0x33a>
 800c908:	4642      	mov	r2, r8
 800c90a:	4631      	mov	r1, r6
 800c90c:	4628      	mov	r0, r5
 800c90e:	47b8      	blx	r7
 800c910:	3001      	adds	r0, #1
 800c912:	d1c2      	bne.n	800c89a <_printf_float+0x2f2>
 800c914:	e6a3      	b.n	800c65e <_printf_float+0xb6>
 800c916:	2301      	movs	r3, #1
 800c918:	4631      	mov	r1, r6
 800c91a:	4628      	mov	r0, r5
 800c91c:	9206      	str	r2, [sp, #24]
 800c91e:	47b8      	blx	r7
 800c920:	3001      	adds	r0, #1
 800c922:	f43f ae9c 	beq.w	800c65e <_printf_float+0xb6>
 800c926:	9a06      	ldr	r2, [sp, #24]
 800c928:	f10b 0b01 	add.w	fp, fp, #1
 800c92c:	e7bb      	b.n	800c8a6 <_printf_float+0x2fe>
 800c92e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c932:	4631      	mov	r1, r6
 800c934:	4628      	mov	r0, r5
 800c936:	47b8      	blx	r7
 800c938:	3001      	adds	r0, #1
 800c93a:	d1c0      	bne.n	800c8be <_printf_float+0x316>
 800c93c:	e68f      	b.n	800c65e <_printf_float+0xb6>
 800c93e:	9a06      	ldr	r2, [sp, #24]
 800c940:	464b      	mov	r3, r9
 800c942:	4442      	add	r2, r8
 800c944:	4631      	mov	r1, r6
 800c946:	4628      	mov	r0, r5
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	d1c3      	bne.n	800c8d6 <_printf_float+0x32e>
 800c94e:	e686      	b.n	800c65e <_printf_float+0xb6>
 800c950:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c954:	f1ba 0f01 	cmp.w	sl, #1
 800c958:	dc01      	bgt.n	800c95e <_printf_float+0x3b6>
 800c95a:	07db      	lsls	r3, r3, #31
 800c95c:	d536      	bpl.n	800c9cc <_printf_float+0x424>
 800c95e:	2301      	movs	r3, #1
 800c960:	4642      	mov	r2, r8
 800c962:	4631      	mov	r1, r6
 800c964:	4628      	mov	r0, r5
 800c966:	47b8      	blx	r7
 800c968:	3001      	adds	r0, #1
 800c96a:	f43f ae78 	beq.w	800c65e <_printf_float+0xb6>
 800c96e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c972:	4631      	mov	r1, r6
 800c974:	4628      	mov	r0, r5
 800c976:	47b8      	blx	r7
 800c978:	3001      	adds	r0, #1
 800c97a:	f43f ae70 	beq.w	800c65e <_printf_float+0xb6>
 800c97e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c982:	2200      	movs	r2, #0
 800c984:	2300      	movs	r3, #0
 800c986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c98a:	f7f4 f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800c98e:	b9c0      	cbnz	r0, 800c9c2 <_printf_float+0x41a>
 800c990:	4653      	mov	r3, sl
 800c992:	f108 0201 	add.w	r2, r8, #1
 800c996:	4631      	mov	r1, r6
 800c998:	4628      	mov	r0, r5
 800c99a:	47b8      	blx	r7
 800c99c:	3001      	adds	r0, #1
 800c99e:	d10c      	bne.n	800c9ba <_printf_float+0x412>
 800c9a0:	e65d      	b.n	800c65e <_printf_float+0xb6>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	465a      	mov	r2, fp
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	f43f ae56 	beq.w	800c65e <_printf_float+0xb6>
 800c9b2:	f108 0801 	add.w	r8, r8, #1
 800c9b6:	45d0      	cmp	r8, sl
 800c9b8:	dbf3      	blt.n	800c9a2 <_printf_float+0x3fa>
 800c9ba:	464b      	mov	r3, r9
 800c9bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c9c0:	e6df      	b.n	800c782 <_printf_float+0x1da>
 800c9c2:	f04f 0800 	mov.w	r8, #0
 800c9c6:	f104 0b1a 	add.w	fp, r4, #26
 800c9ca:	e7f4      	b.n	800c9b6 <_printf_float+0x40e>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	e7e1      	b.n	800c996 <_printf_float+0x3ee>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	464a      	mov	r2, r9
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	4628      	mov	r0, r5
 800c9da:	47b8      	blx	r7
 800c9dc:	3001      	adds	r0, #1
 800c9de:	f43f ae3e 	beq.w	800c65e <_printf_float+0xb6>
 800c9e2:	f108 0801 	add.w	r8, r8, #1
 800c9e6:	68e3      	ldr	r3, [r4, #12]
 800c9e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9ea:	1a5b      	subs	r3, r3, r1
 800c9ec:	4543      	cmp	r3, r8
 800c9ee:	dcf0      	bgt.n	800c9d2 <_printf_float+0x42a>
 800c9f0:	e6fc      	b.n	800c7ec <_printf_float+0x244>
 800c9f2:	f04f 0800 	mov.w	r8, #0
 800c9f6:	f104 0919 	add.w	r9, r4, #25
 800c9fa:	e7f4      	b.n	800c9e6 <_printf_float+0x43e>

0800c9fc <_printf_common>:
 800c9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca00:	4616      	mov	r6, r2
 800ca02:	4698      	mov	r8, r3
 800ca04:	688a      	ldr	r2, [r1, #8]
 800ca06:	690b      	ldr	r3, [r1, #16]
 800ca08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	bfb8      	it	lt
 800ca10:	4613      	movlt	r3, r2
 800ca12:	6033      	str	r3, [r6, #0]
 800ca14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca18:	4607      	mov	r7, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	b10a      	cbz	r2, 800ca22 <_printf_common+0x26>
 800ca1e:	3301      	adds	r3, #1
 800ca20:	6033      	str	r3, [r6, #0]
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	0699      	lsls	r1, r3, #26
 800ca26:	bf42      	ittt	mi
 800ca28:	6833      	ldrmi	r3, [r6, #0]
 800ca2a:	3302      	addmi	r3, #2
 800ca2c:	6033      	strmi	r3, [r6, #0]
 800ca2e:	6825      	ldr	r5, [r4, #0]
 800ca30:	f015 0506 	ands.w	r5, r5, #6
 800ca34:	d106      	bne.n	800ca44 <_printf_common+0x48>
 800ca36:	f104 0a19 	add.w	sl, r4, #25
 800ca3a:	68e3      	ldr	r3, [r4, #12]
 800ca3c:	6832      	ldr	r2, [r6, #0]
 800ca3e:	1a9b      	subs	r3, r3, r2
 800ca40:	42ab      	cmp	r3, r5
 800ca42:	dc26      	bgt.n	800ca92 <_printf_common+0x96>
 800ca44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca48:	6822      	ldr	r2, [r4, #0]
 800ca4a:	3b00      	subs	r3, #0
 800ca4c:	bf18      	it	ne
 800ca4e:	2301      	movne	r3, #1
 800ca50:	0692      	lsls	r2, r2, #26
 800ca52:	d42b      	bmi.n	800caac <_printf_common+0xb0>
 800ca54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca58:	4641      	mov	r1, r8
 800ca5a:	4638      	mov	r0, r7
 800ca5c:	47c8      	blx	r9
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d01e      	beq.n	800caa0 <_printf_common+0xa4>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	6922      	ldr	r2, [r4, #16]
 800ca66:	f003 0306 	and.w	r3, r3, #6
 800ca6a:	2b04      	cmp	r3, #4
 800ca6c:	bf02      	ittt	eq
 800ca6e:	68e5      	ldreq	r5, [r4, #12]
 800ca70:	6833      	ldreq	r3, [r6, #0]
 800ca72:	1aed      	subeq	r5, r5, r3
 800ca74:	68a3      	ldr	r3, [r4, #8]
 800ca76:	bf0c      	ite	eq
 800ca78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca7c:	2500      	movne	r5, #0
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	bfc4      	itt	gt
 800ca82:	1a9b      	subgt	r3, r3, r2
 800ca84:	18ed      	addgt	r5, r5, r3
 800ca86:	2600      	movs	r6, #0
 800ca88:	341a      	adds	r4, #26
 800ca8a:	42b5      	cmp	r5, r6
 800ca8c:	d11a      	bne.n	800cac4 <_printf_common+0xc8>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	e008      	b.n	800caa4 <_printf_common+0xa8>
 800ca92:	2301      	movs	r3, #1
 800ca94:	4652      	mov	r2, sl
 800ca96:	4641      	mov	r1, r8
 800ca98:	4638      	mov	r0, r7
 800ca9a:	47c8      	blx	r9
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d103      	bne.n	800caa8 <_printf_common+0xac>
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa8:	3501      	adds	r5, #1
 800caaa:	e7c6      	b.n	800ca3a <_printf_common+0x3e>
 800caac:	18e1      	adds	r1, r4, r3
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	2030      	movs	r0, #48	@ 0x30
 800cab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cab6:	4422      	add	r2, r4
 800cab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cabc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cac0:	3302      	adds	r3, #2
 800cac2:	e7c7      	b.n	800ca54 <_printf_common+0x58>
 800cac4:	2301      	movs	r3, #1
 800cac6:	4622      	mov	r2, r4
 800cac8:	4641      	mov	r1, r8
 800caca:	4638      	mov	r0, r7
 800cacc:	47c8      	blx	r9
 800cace:	3001      	adds	r0, #1
 800cad0:	d0e6      	beq.n	800caa0 <_printf_common+0xa4>
 800cad2:	3601      	adds	r6, #1
 800cad4:	e7d9      	b.n	800ca8a <_printf_common+0x8e>
	...

0800cad8 <_printf_i>:
 800cad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cadc:	7e0f      	ldrb	r7, [r1, #24]
 800cade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cae0:	2f78      	cmp	r7, #120	@ 0x78
 800cae2:	4691      	mov	r9, r2
 800cae4:	4680      	mov	r8, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	469a      	mov	sl, r3
 800caea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800caee:	d807      	bhi.n	800cb00 <_printf_i+0x28>
 800caf0:	2f62      	cmp	r7, #98	@ 0x62
 800caf2:	d80a      	bhi.n	800cb0a <_printf_i+0x32>
 800caf4:	2f00      	cmp	r7, #0
 800caf6:	f000 80d1 	beq.w	800cc9c <_printf_i+0x1c4>
 800cafa:	2f58      	cmp	r7, #88	@ 0x58
 800cafc:	f000 80b8 	beq.w	800cc70 <_printf_i+0x198>
 800cb00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb08:	e03a      	b.n	800cb80 <_printf_i+0xa8>
 800cb0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb0e:	2b15      	cmp	r3, #21
 800cb10:	d8f6      	bhi.n	800cb00 <_printf_i+0x28>
 800cb12:	a101      	add	r1, pc, #4	@ (adr r1, 800cb18 <_printf_i+0x40>)
 800cb14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb18:	0800cb71 	.word	0x0800cb71
 800cb1c:	0800cb85 	.word	0x0800cb85
 800cb20:	0800cb01 	.word	0x0800cb01
 800cb24:	0800cb01 	.word	0x0800cb01
 800cb28:	0800cb01 	.word	0x0800cb01
 800cb2c:	0800cb01 	.word	0x0800cb01
 800cb30:	0800cb85 	.word	0x0800cb85
 800cb34:	0800cb01 	.word	0x0800cb01
 800cb38:	0800cb01 	.word	0x0800cb01
 800cb3c:	0800cb01 	.word	0x0800cb01
 800cb40:	0800cb01 	.word	0x0800cb01
 800cb44:	0800cc83 	.word	0x0800cc83
 800cb48:	0800cbaf 	.word	0x0800cbaf
 800cb4c:	0800cc3d 	.word	0x0800cc3d
 800cb50:	0800cb01 	.word	0x0800cb01
 800cb54:	0800cb01 	.word	0x0800cb01
 800cb58:	0800cca5 	.word	0x0800cca5
 800cb5c:	0800cb01 	.word	0x0800cb01
 800cb60:	0800cbaf 	.word	0x0800cbaf
 800cb64:	0800cb01 	.word	0x0800cb01
 800cb68:	0800cb01 	.word	0x0800cb01
 800cb6c:	0800cc45 	.word	0x0800cc45
 800cb70:	6833      	ldr	r3, [r6, #0]
 800cb72:	1d1a      	adds	r2, r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6032      	str	r2, [r6, #0]
 800cb78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb80:	2301      	movs	r3, #1
 800cb82:	e09c      	b.n	800ccbe <_printf_i+0x1e6>
 800cb84:	6833      	ldr	r3, [r6, #0]
 800cb86:	6820      	ldr	r0, [r4, #0]
 800cb88:	1d19      	adds	r1, r3, #4
 800cb8a:	6031      	str	r1, [r6, #0]
 800cb8c:	0606      	lsls	r6, r0, #24
 800cb8e:	d501      	bpl.n	800cb94 <_printf_i+0xbc>
 800cb90:	681d      	ldr	r5, [r3, #0]
 800cb92:	e003      	b.n	800cb9c <_printf_i+0xc4>
 800cb94:	0645      	lsls	r5, r0, #25
 800cb96:	d5fb      	bpl.n	800cb90 <_printf_i+0xb8>
 800cb98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb9c:	2d00      	cmp	r5, #0
 800cb9e:	da03      	bge.n	800cba8 <_printf_i+0xd0>
 800cba0:	232d      	movs	r3, #45	@ 0x2d
 800cba2:	426d      	negs	r5, r5
 800cba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cba8:	4858      	ldr	r0, [pc, #352]	@ (800cd0c <_printf_i+0x234>)
 800cbaa:	230a      	movs	r3, #10
 800cbac:	e011      	b.n	800cbd2 <_printf_i+0xfa>
 800cbae:	6821      	ldr	r1, [r4, #0]
 800cbb0:	6833      	ldr	r3, [r6, #0]
 800cbb2:	0608      	lsls	r0, r1, #24
 800cbb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbb8:	d402      	bmi.n	800cbc0 <_printf_i+0xe8>
 800cbba:	0649      	lsls	r1, r1, #25
 800cbbc:	bf48      	it	mi
 800cbbe:	b2ad      	uxthmi	r5, r5
 800cbc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbc2:	4852      	ldr	r0, [pc, #328]	@ (800cd0c <_printf_i+0x234>)
 800cbc4:	6033      	str	r3, [r6, #0]
 800cbc6:	bf14      	ite	ne
 800cbc8:	230a      	movne	r3, #10
 800cbca:	2308      	moveq	r3, #8
 800cbcc:	2100      	movs	r1, #0
 800cbce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbd2:	6866      	ldr	r6, [r4, #4]
 800cbd4:	60a6      	str	r6, [r4, #8]
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	db05      	blt.n	800cbe6 <_printf_i+0x10e>
 800cbda:	6821      	ldr	r1, [r4, #0]
 800cbdc:	432e      	orrs	r6, r5
 800cbde:	f021 0104 	bic.w	r1, r1, #4
 800cbe2:	6021      	str	r1, [r4, #0]
 800cbe4:	d04b      	beq.n	800cc7e <_printf_i+0x1a6>
 800cbe6:	4616      	mov	r6, r2
 800cbe8:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbec:	fb03 5711 	mls	r7, r3, r1, r5
 800cbf0:	5dc7      	ldrb	r7, [r0, r7]
 800cbf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbf6:	462f      	mov	r7, r5
 800cbf8:	42bb      	cmp	r3, r7
 800cbfa:	460d      	mov	r5, r1
 800cbfc:	d9f4      	bls.n	800cbe8 <_printf_i+0x110>
 800cbfe:	2b08      	cmp	r3, #8
 800cc00:	d10b      	bne.n	800cc1a <_printf_i+0x142>
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	07df      	lsls	r7, r3, #31
 800cc06:	d508      	bpl.n	800cc1a <_printf_i+0x142>
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	6861      	ldr	r1, [r4, #4]
 800cc0c:	4299      	cmp	r1, r3
 800cc0e:	bfde      	ittt	le
 800cc10:	2330      	movle	r3, #48	@ 0x30
 800cc12:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc16:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc1a:	1b92      	subs	r2, r2, r6
 800cc1c:	6122      	str	r2, [r4, #16]
 800cc1e:	f8cd a000 	str.w	sl, [sp]
 800cc22:	464b      	mov	r3, r9
 800cc24:	aa03      	add	r2, sp, #12
 800cc26:	4621      	mov	r1, r4
 800cc28:	4640      	mov	r0, r8
 800cc2a:	f7ff fee7 	bl	800c9fc <_printf_common>
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d14a      	bne.n	800ccc8 <_printf_i+0x1f0>
 800cc32:	f04f 30ff 	mov.w	r0, #4294967295
 800cc36:	b004      	add	sp, #16
 800cc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	f043 0320 	orr.w	r3, r3, #32
 800cc42:	6023      	str	r3, [r4, #0]
 800cc44:	4832      	ldr	r0, [pc, #200]	@ (800cd10 <_printf_i+0x238>)
 800cc46:	2778      	movs	r7, #120	@ 0x78
 800cc48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	6831      	ldr	r1, [r6, #0]
 800cc50:	061f      	lsls	r7, r3, #24
 800cc52:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc56:	d402      	bmi.n	800cc5e <_printf_i+0x186>
 800cc58:	065f      	lsls	r7, r3, #25
 800cc5a:	bf48      	it	mi
 800cc5c:	b2ad      	uxthmi	r5, r5
 800cc5e:	6031      	str	r1, [r6, #0]
 800cc60:	07d9      	lsls	r1, r3, #31
 800cc62:	bf44      	itt	mi
 800cc64:	f043 0320 	orrmi.w	r3, r3, #32
 800cc68:	6023      	strmi	r3, [r4, #0]
 800cc6a:	b11d      	cbz	r5, 800cc74 <_printf_i+0x19c>
 800cc6c:	2310      	movs	r3, #16
 800cc6e:	e7ad      	b.n	800cbcc <_printf_i+0xf4>
 800cc70:	4826      	ldr	r0, [pc, #152]	@ (800cd0c <_printf_i+0x234>)
 800cc72:	e7e9      	b.n	800cc48 <_printf_i+0x170>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	f023 0320 	bic.w	r3, r3, #32
 800cc7a:	6023      	str	r3, [r4, #0]
 800cc7c:	e7f6      	b.n	800cc6c <_printf_i+0x194>
 800cc7e:	4616      	mov	r6, r2
 800cc80:	e7bd      	b.n	800cbfe <_printf_i+0x126>
 800cc82:	6833      	ldr	r3, [r6, #0]
 800cc84:	6825      	ldr	r5, [r4, #0]
 800cc86:	6961      	ldr	r1, [r4, #20]
 800cc88:	1d18      	adds	r0, r3, #4
 800cc8a:	6030      	str	r0, [r6, #0]
 800cc8c:	062e      	lsls	r6, r5, #24
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	d501      	bpl.n	800cc96 <_printf_i+0x1be>
 800cc92:	6019      	str	r1, [r3, #0]
 800cc94:	e002      	b.n	800cc9c <_printf_i+0x1c4>
 800cc96:	0668      	lsls	r0, r5, #25
 800cc98:	d5fb      	bpl.n	800cc92 <_printf_i+0x1ba>
 800cc9a:	8019      	strh	r1, [r3, #0]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	4616      	mov	r6, r2
 800cca2:	e7bc      	b.n	800cc1e <_printf_i+0x146>
 800cca4:	6833      	ldr	r3, [r6, #0]
 800cca6:	1d1a      	adds	r2, r3, #4
 800cca8:	6032      	str	r2, [r6, #0]
 800ccaa:	681e      	ldr	r6, [r3, #0]
 800ccac:	6862      	ldr	r2, [r4, #4]
 800ccae:	2100      	movs	r1, #0
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f7f3 faad 	bl	8000210 <memchr>
 800ccb6:	b108      	cbz	r0, 800ccbc <_printf_i+0x1e4>
 800ccb8:	1b80      	subs	r0, r0, r6
 800ccba:	6060      	str	r0, [r4, #4]
 800ccbc:	6863      	ldr	r3, [r4, #4]
 800ccbe:	6123      	str	r3, [r4, #16]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccc6:	e7aa      	b.n	800cc1e <_printf_i+0x146>
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	4632      	mov	r2, r6
 800cccc:	4649      	mov	r1, r9
 800ccce:	4640      	mov	r0, r8
 800ccd0:	47d0      	blx	sl
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	d0ad      	beq.n	800cc32 <_printf_i+0x15a>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	079b      	lsls	r3, r3, #30
 800ccda:	d413      	bmi.n	800cd04 <_printf_i+0x22c>
 800ccdc:	68e0      	ldr	r0, [r4, #12]
 800ccde:	9b03      	ldr	r3, [sp, #12]
 800cce0:	4298      	cmp	r0, r3
 800cce2:	bfb8      	it	lt
 800cce4:	4618      	movlt	r0, r3
 800cce6:	e7a6      	b.n	800cc36 <_printf_i+0x15e>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4632      	mov	r2, r6
 800ccec:	4649      	mov	r1, r9
 800ccee:	4640      	mov	r0, r8
 800ccf0:	47d0      	blx	sl
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d09d      	beq.n	800cc32 <_printf_i+0x15a>
 800ccf6:	3501      	adds	r5, #1
 800ccf8:	68e3      	ldr	r3, [r4, #12]
 800ccfa:	9903      	ldr	r1, [sp, #12]
 800ccfc:	1a5b      	subs	r3, r3, r1
 800ccfe:	42ab      	cmp	r3, r5
 800cd00:	dcf2      	bgt.n	800cce8 <_printf_i+0x210>
 800cd02:	e7eb      	b.n	800ccdc <_printf_i+0x204>
 800cd04:	2500      	movs	r5, #0
 800cd06:	f104 0619 	add.w	r6, r4, #25
 800cd0a:	e7f5      	b.n	800ccf8 <_printf_i+0x220>
 800cd0c:	080107c4 	.word	0x080107c4
 800cd10:	080107d5 	.word	0x080107d5

0800cd14 <std>:
 800cd14:	2300      	movs	r3, #0
 800cd16:	b510      	push	{r4, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd22:	6083      	str	r3, [r0, #8]
 800cd24:	8181      	strh	r1, [r0, #12]
 800cd26:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd28:	81c2      	strh	r2, [r0, #14]
 800cd2a:	6183      	str	r3, [r0, #24]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	2208      	movs	r2, #8
 800cd30:	305c      	adds	r0, #92	@ 0x5c
 800cd32:	f000 f9f9 	bl	800d128 <memset>
 800cd36:	4b0d      	ldr	r3, [pc, #52]	@ (800cd6c <std+0x58>)
 800cd38:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd70 <std+0x5c>)
 800cd3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd74 <std+0x60>)
 800cd40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd42:	4b0d      	ldr	r3, [pc, #52]	@ (800cd78 <std+0x64>)
 800cd44:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd46:	4b0d      	ldr	r3, [pc, #52]	@ (800cd7c <std+0x68>)
 800cd48:	6224      	str	r4, [r4, #32]
 800cd4a:	429c      	cmp	r4, r3
 800cd4c:	d006      	beq.n	800cd5c <std+0x48>
 800cd4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd52:	4294      	cmp	r4, r2
 800cd54:	d002      	beq.n	800cd5c <std+0x48>
 800cd56:	33d0      	adds	r3, #208	@ 0xd0
 800cd58:	429c      	cmp	r4, r3
 800cd5a:	d105      	bne.n	800cd68 <std+0x54>
 800cd5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd64:	f000 ba6e 	b.w	800d244 <__retarget_lock_init_recursive>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	bf00      	nop
 800cd6c:	0800cf79 	.word	0x0800cf79
 800cd70:	0800cf9b 	.word	0x0800cf9b
 800cd74:	0800cfd3 	.word	0x0800cfd3
 800cd78:	0800cff7 	.word	0x0800cff7
 800cd7c:	20009508 	.word	0x20009508

0800cd80 <stdio_exit_handler>:
 800cd80:	4a02      	ldr	r2, [pc, #8]	@ (800cd8c <stdio_exit_handler+0xc>)
 800cd82:	4903      	ldr	r1, [pc, #12]	@ (800cd90 <stdio_exit_handler+0x10>)
 800cd84:	4803      	ldr	r0, [pc, #12]	@ (800cd94 <stdio_exit_handler+0x14>)
 800cd86:	f000 b869 	b.w	800ce5c <_fwalk_sglue>
 800cd8a:	bf00      	nop
 800cd8c:	2000004c 	.word	0x2000004c
 800cd90:	0800f4b9 	.word	0x0800f4b9
 800cd94:	200001c8 	.word	0x200001c8

0800cd98 <cleanup_stdio>:
 800cd98:	6841      	ldr	r1, [r0, #4]
 800cd9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cdcc <cleanup_stdio+0x34>)
 800cd9c:	4299      	cmp	r1, r3
 800cd9e:	b510      	push	{r4, lr}
 800cda0:	4604      	mov	r4, r0
 800cda2:	d001      	beq.n	800cda8 <cleanup_stdio+0x10>
 800cda4:	f002 fb88 	bl	800f4b8 <_fflush_r>
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	4b09      	ldr	r3, [pc, #36]	@ (800cdd0 <cleanup_stdio+0x38>)
 800cdac:	4299      	cmp	r1, r3
 800cdae:	d002      	beq.n	800cdb6 <cleanup_stdio+0x1e>
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f002 fb81 	bl	800f4b8 <_fflush_r>
 800cdb6:	68e1      	ldr	r1, [r4, #12]
 800cdb8:	4b06      	ldr	r3, [pc, #24]	@ (800cdd4 <cleanup_stdio+0x3c>)
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	d004      	beq.n	800cdc8 <cleanup_stdio+0x30>
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdc4:	f002 bb78 	b.w	800f4b8 <_fflush_r>
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	bf00      	nop
 800cdcc:	20009508 	.word	0x20009508
 800cdd0:	20009570 	.word	0x20009570
 800cdd4:	200095d8 	.word	0x200095d8

0800cdd8 <global_stdio_init.part.0>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	4b0b      	ldr	r3, [pc, #44]	@ (800ce08 <global_stdio_init.part.0+0x30>)
 800cddc:	4c0b      	ldr	r4, [pc, #44]	@ (800ce0c <global_stdio_init.part.0+0x34>)
 800cdde:	4a0c      	ldr	r2, [pc, #48]	@ (800ce10 <global_stdio_init.part.0+0x38>)
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	4620      	mov	r0, r4
 800cde4:	2200      	movs	r2, #0
 800cde6:	2104      	movs	r1, #4
 800cde8:	f7ff ff94 	bl	800cd14 <std>
 800cdec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	2109      	movs	r1, #9
 800cdf4:	f7ff ff8e 	bl	800cd14 <std>
 800cdf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce02:	2112      	movs	r1, #18
 800ce04:	f7ff bf86 	b.w	800cd14 <std>
 800ce08:	20009640 	.word	0x20009640
 800ce0c:	20009508 	.word	0x20009508
 800ce10:	0800cd81 	.word	0x0800cd81

0800ce14 <__sfp_lock_acquire>:
 800ce14:	4801      	ldr	r0, [pc, #4]	@ (800ce1c <__sfp_lock_acquire+0x8>)
 800ce16:	f000 ba16 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800ce1a:	bf00      	nop
 800ce1c:	20009649 	.word	0x20009649

0800ce20 <__sfp_lock_release>:
 800ce20:	4801      	ldr	r0, [pc, #4]	@ (800ce28 <__sfp_lock_release+0x8>)
 800ce22:	f000 ba11 	b.w	800d248 <__retarget_lock_release_recursive>
 800ce26:	bf00      	nop
 800ce28:	20009649 	.word	0x20009649

0800ce2c <__sinit>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	4604      	mov	r4, r0
 800ce30:	f7ff fff0 	bl	800ce14 <__sfp_lock_acquire>
 800ce34:	6a23      	ldr	r3, [r4, #32]
 800ce36:	b11b      	cbz	r3, 800ce40 <__sinit+0x14>
 800ce38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce3c:	f7ff bff0 	b.w	800ce20 <__sfp_lock_release>
 800ce40:	4b04      	ldr	r3, [pc, #16]	@ (800ce54 <__sinit+0x28>)
 800ce42:	6223      	str	r3, [r4, #32]
 800ce44:	4b04      	ldr	r3, [pc, #16]	@ (800ce58 <__sinit+0x2c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1f5      	bne.n	800ce38 <__sinit+0xc>
 800ce4c:	f7ff ffc4 	bl	800cdd8 <global_stdio_init.part.0>
 800ce50:	e7f2      	b.n	800ce38 <__sinit+0xc>
 800ce52:	bf00      	nop
 800ce54:	0800cd99 	.word	0x0800cd99
 800ce58:	20009640 	.word	0x20009640

0800ce5c <_fwalk_sglue>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4607      	mov	r7, r0
 800ce62:	4688      	mov	r8, r1
 800ce64:	4614      	mov	r4, r2
 800ce66:	2600      	movs	r6, #0
 800ce68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce6c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce70:	d505      	bpl.n	800ce7e <_fwalk_sglue+0x22>
 800ce72:	6824      	ldr	r4, [r4, #0]
 800ce74:	2c00      	cmp	r4, #0
 800ce76:	d1f7      	bne.n	800ce68 <_fwalk_sglue+0xc>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce7e:	89ab      	ldrh	r3, [r5, #12]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d907      	bls.n	800ce94 <_fwalk_sglue+0x38>
 800ce84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	d003      	beq.n	800ce94 <_fwalk_sglue+0x38>
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4638      	mov	r0, r7
 800ce90:	47c0      	blx	r8
 800ce92:	4306      	orrs	r6, r0
 800ce94:	3568      	adds	r5, #104	@ 0x68
 800ce96:	e7e9      	b.n	800ce6c <_fwalk_sglue+0x10>

0800ce98 <iprintf>:
 800ce98:	b40f      	push	{r0, r1, r2, r3}
 800ce9a:	b507      	push	{r0, r1, r2, lr}
 800ce9c:	4906      	ldr	r1, [pc, #24]	@ (800ceb8 <iprintf+0x20>)
 800ce9e:	ab04      	add	r3, sp, #16
 800cea0:	6808      	ldr	r0, [r1, #0]
 800cea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea6:	6881      	ldr	r1, [r0, #8]
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	f002 f969 	bl	800f180 <_vfiprintf_r>
 800ceae:	b003      	add	sp, #12
 800ceb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceb4:	b004      	add	sp, #16
 800ceb6:	4770      	bx	lr
 800ceb8:	200001c4 	.word	0x200001c4

0800cebc <_puts_r>:
 800cebc:	6a03      	ldr	r3, [r0, #32]
 800cebe:	b570      	push	{r4, r5, r6, lr}
 800cec0:	6884      	ldr	r4, [r0, #8]
 800cec2:	4605      	mov	r5, r0
 800cec4:	460e      	mov	r6, r1
 800cec6:	b90b      	cbnz	r3, 800cecc <_puts_r+0x10>
 800cec8:	f7ff ffb0 	bl	800ce2c <__sinit>
 800cecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cece:	07db      	lsls	r3, r3, #31
 800ced0:	d405      	bmi.n	800cede <_puts_r+0x22>
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	0598      	lsls	r0, r3, #22
 800ced6:	d402      	bmi.n	800cede <_puts_r+0x22>
 800ced8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceda:	f000 f9b4 	bl	800d246 <__retarget_lock_acquire_recursive>
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	0719      	lsls	r1, r3, #28
 800cee2:	d502      	bpl.n	800ceea <_puts_r+0x2e>
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d135      	bne.n	800cf56 <_puts_r+0x9a>
 800ceea:	4621      	mov	r1, r4
 800ceec:	4628      	mov	r0, r5
 800ceee:	f000 f8c5 	bl	800d07c <__swsetup_r>
 800cef2:	b380      	cbz	r0, 800cf56 <_puts_r+0x9a>
 800cef4:	f04f 35ff 	mov.w	r5, #4294967295
 800cef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cefa:	07da      	lsls	r2, r3, #31
 800cefc:	d405      	bmi.n	800cf0a <_puts_r+0x4e>
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	059b      	lsls	r3, r3, #22
 800cf02:	d402      	bmi.n	800cf0a <_puts_r+0x4e>
 800cf04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf06:	f000 f99f 	bl	800d248 <__retarget_lock_release_recursive>
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	da04      	bge.n	800cf1c <_puts_r+0x60>
 800cf12:	69a2      	ldr	r2, [r4, #24]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	dc17      	bgt.n	800cf48 <_puts_r+0x8c>
 800cf18:	290a      	cmp	r1, #10
 800cf1a:	d015      	beq.n	800cf48 <_puts_r+0x8c>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	6022      	str	r2, [r4, #0]
 800cf22:	7019      	strb	r1, [r3, #0]
 800cf24:	68a3      	ldr	r3, [r4, #8]
 800cf26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	2900      	cmp	r1, #0
 800cf30:	d1ed      	bne.n	800cf0e <_puts_r+0x52>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	da11      	bge.n	800cf5a <_puts_r+0x9e>
 800cf36:	4622      	mov	r2, r4
 800cf38:	210a      	movs	r1, #10
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f000 f85f 	bl	800cffe <__swbuf_r>
 800cf40:	3001      	adds	r0, #1
 800cf42:	d0d7      	beq.n	800cef4 <_puts_r+0x38>
 800cf44:	250a      	movs	r5, #10
 800cf46:	e7d7      	b.n	800cef8 <_puts_r+0x3c>
 800cf48:	4622      	mov	r2, r4
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f000 f857 	bl	800cffe <__swbuf_r>
 800cf50:	3001      	adds	r0, #1
 800cf52:	d1e7      	bne.n	800cf24 <_puts_r+0x68>
 800cf54:	e7ce      	b.n	800cef4 <_puts_r+0x38>
 800cf56:	3e01      	subs	r6, #1
 800cf58:	e7e4      	b.n	800cf24 <_puts_r+0x68>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	6022      	str	r2, [r4, #0]
 800cf60:	220a      	movs	r2, #10
 800cf62:	701a      	strb	r2, [r3, #0]
 800cf64:	e7ee      	b.n	800cf44 <_puts_r+0x88>
	...

0800cf68 <puts>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	@ (800cf74 <puts+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f7ff bfa5 	b.w	800cebc <_puts_r>
 800cf72:	bf00      	nop
 800cf74:	200001c4 	.word	0x200001c4

0800cf78 <__sread>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf80:	f000 f912 	bl	800d1a8 <_read_r>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	bfab      	itete	ge
 800cf88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf8a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf8c:	181b      	addge	r3, r3, r0
 800cf8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf92:	bfac      	ite	ge
 800cf94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf96:	81a3      	strhlt	r3, [r4, #12]
 800cf98:	bd10      	pop	{r4, pc}

0800cf9a <__swrite>:
 800cf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9e:	461f      	mov	r7, r3
 800cfa0:	898b      	ldrh	r3, [r1, #12]
 800cfa2:	05db      	lsls	r3, r3, #23
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	4616      	mov	r6, r2
 800cfaa:	d505      	bpl.n	800cfb8 <__swrite+0x1e>
 800cfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f000 f8e6 	bl	800d184 <_lseek_r>
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	4632      	mov	r2, r6
 800cfc6:	463b      	mov	r3, r7
 800cfc8:	4628      	mov	r0, r5
 800cfca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfce:	f000 b8fd 	b.w	800d1cc <_write_r>

0800cfd2 <__sseek>:
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfda:	f000 f8d3 	bl	800d184 <_lseek_r>
 800cfde:	1c43      	adds	r3, r0, #1
 800cfe0:	89a3      	ldrh	r3, [r4, #12]
 800cfe2:	bf15      	itete	ne
 800cfe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cfe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cfea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cfee:	81a3      	strheq	r3, [r4, #12]
 800cff0:	bf18      	it	ne
 800cff2:	81a3      	strhne	r3, [r4, #12]
 800cff4:	bd10      	pop	{r4, pc}

0800cff6 <__sclose>:
 800cff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cffa:	f000 b8b3 	b.w	800d164 <_close_r>

0800cffe <__swbuf_r>:
 800cffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d000:	460e      	mov	r6, r1
 800d002:	4614      	mov	r4, r2
 800d004:	4605      	mov	r5, r0
 800d006:	b118      	cbz	r0, 800d010 <__swbuf_r+0x12>
 800d008:	6a03      	ldr	r3, [r0, #32]
 800d00a:	b90b      	cbnz	r3, 800d010 <__swbuf_r+0x12>
 800d00c:	f7ff ff0e 	bl	800ce2c <__sinit>
 800d010:	69a3      	ldr	r3, [r4, #24]
 800d012:	60a3      	str	r3, [r4, #8]
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	071a      	lsls	r2, r3, #28
 800d018:	d501      	bpl.n	800d01e <__swbuf_r+0x20>
 800d01a:	6923      	ldr	r3, [r4, #16]
 800d01c:	b943      	cbnz	r3, 800d030 <__swbuf_r+0x32>
 800d01e:	4621      	mov	r1, r4
 800d020:	4628      	mov	r0, r5
 800d022:	f000 f82b 	bl	800d07c <__swsetup_r>
 800d026:	b118      	cbz	r0, 800d030 <__swbuf_r+0x32>
 800d028:	f04f 37ff 	mov.w	r7, #4294967295
 800d02c:	4638      	mov	r0, r7
 800d02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	6922      	ldr	r2, [r4, #16]
 800d034:	1a98      	subs	r0, r3, r2
 800d036:	6963      	ldr	r3, [r4, #20]
 800d038:	b2f6      	uxtb	r6, r6
 800d03a:	4283      	cmp	r3, r0
 800d03c:	4637      	mov	r7, r6
 800d03e:	dc05      	bgt.n	800d04c <__swbuf_r+0x4e>
 800d040:	4621      	mov	r1, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f002 fa38 	bl	800f4b8 <_fflush_r>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d1ed      	bne.n	800d028 <__swbuf_r+0x2a>
 800d04c:	68a3      	ldr	r3, [r4, #8]
 800d04e:	3b01      	subs	r3, #1
 800d050:	60a3      	str	r3, [r4, #8]
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	6022      	str	r2, [r4, #0]
 800d058:	701e      	strb	r6, [r3, #0]
 800d05a:	6962      	ldr	r2, [r4, #20]
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	429a      	cmp	r2, r3
 800d060:	d004      	beq.n	800d06c <__swbuf_r+0x6e>
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	07db      	lsls	r3, r3, #31
 800d066:	d5e1      	bpl.n	800d02c <__swbuf_r+0x2e>
 800d068:	2e0a      	cmp	r6, #10
 800d06a:	d1df      	bne.n	800d02c <__swbuf_r+0x2e>
 800d06c:	4621      	mov	r1, r4
 800d06e:	4628      	mov	r0, r5
 800d070:	f002 fa22 	bl	800f4b8 <_fflush_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	d0d9      	beq.n	800d02c <__swbuf_r+0x2e>
 800d078:	e7d6      	b.n	800d028 <__swbuf_r+0x2a>
	...

0800d07c <__swsetup_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4b29      	ldr	r3, [pc, #164]	@ (800d124 <__swsetup_r+0xa8>)
 800d080:	4605      	mov	r5, r0
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	460c      	mov	r4, r1
 800d086:	b118      	cbz	r0, 800d090 <__swsetup_r+0x14>
 800d088:	6a03      	ldr	r3, [r0, #32]
 800d08a:	b90b      	cbnz	r3, 800d090 <__swsetup_r+0x14>
 800d08c:	f7ff fece 	bl	800ce2c <__sinit>
 800d090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d094:	0719      	lsls	r1, r3, #28
 800d096:	d422      	bmi.n	800d0de <__swsetup_r+0x62>
 800d098:	06da      	lsls	r2, r3, #27
 800d09a:	d407      	bmi.n	800d0ac <__swsetup_r+0x30>
 800d09c:	2209      	movs	r2, #9
 800d09e:	602a      	str	r2, [r5, #0]
 800d0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a4:	81a3      	strh	r3, [r4, #12]
 800d0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0aa:	e033      	b.n	800d114 <__swsetup_r+0x98>
 800d0ac:	0758      	lsls	r0, r3, #29
 800d0ae:	d512      	bpl.n	800d0d6 <__swsetup_r+0x5a>
 800d0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0b2:	b141      	cbz	r1, 800d0c6 <__swsetup_r+0x4a>
 800d0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0b8:	4299      	cmp	r1, r3
 800d0ba:	d002      	beq.n	800d0c2 <__swsetup_r+0x46>
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f000 ff33 	bl	800df28 <_free_r>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0cc:	81a3      	strh	r3, [r4, #12]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	6063      	str	r3, [r4, #4]
 800d0d2:	6923      	ldr	r3, [r4, #16]
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	f043 0308 	orr.w	r3, r3, #8
 800d0dc:	81a3      	strh	r3, [r4, #12]
 800d0de:	6923      	ldr	r3, [r4, #16]
 800d0e0:	b94b      	cbnz	r3, 800d0f6 <__swsetup_r+0x7a>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0ec:	d003      	beq.n	800d0f6 <__swsetup_r+0x7a>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f002 fa2f 	bl	800f554 <__smakebuf_r>
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	f013 0201 	ands.w	r2, r3, #1
 800d0fe:	d00a      	beq.n	800d116 <__swsetup_r+0x9a>
 800d100:	2200      	movs	r2, #0
 800d102:	60a2      	str	r2, [r4, #8]
 800d104:	6962      	ldr	r2, [r4, #20]
 800d106:	4252      	negs	r2, r2
 800d108:	61a2      	str	r2, [r4, #24]
 800d10a:	6922      	ldr	r2, [r4, #16]
 800d10c:	b942      	cbnz	r2, 800d120 <__swsetup_r+0xa4>
 800d10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d112:	d1c5      	bne.n	800d0a0 <__swsetup_r+0x24>
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	0799      	lsls	r1, r3, #30
 800d118:	bf58      	it	pl
 800d11a:	6962      	ldrpl	r2, [r4, #20]
 800d11c:	60a2      	str	r2, [r4, #8]
 800d11e:	e7f4      	b.n	800d10a <__swsetup_r+0x8e>
 800d120:	2000      	movs	r0, #0
 800d122:	e7f7      	b.n	800d114 <__swsetup_r+0x98>
 800d124:	200001c4 	.word	0x200001c4

0800d128 <memset>:
 800d128:	4402      	add	r2, r0
 800d12a:	4603      	mov	r3, r0
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d100      	bne.n	800d132 <memset+0xa>
 800d130:	4770      	bx	lr
 800d132:	f803 1b01 	strb.w	r1, [r3], #1
 800d136:	e7f9      	b.n	800d12c <memset+0x4>

0800d138 <strncmp>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	b16a      	cbz	r2, 800d158 <strncmp+0x20>
 800d13c:	3901      	subs	r1, #1
 800d13e:	1884      	adds	r4, r0, r2
 800d140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d144:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d148:	429a      	cmp	r2, r3
 800d14a:	d103      	bne.n	800d154 <strncmp+0x1c>
 800d14c:	42a0      	cmp	r0, r4
 800d14e:	d001      	beq.n	800d154 <strncmp+0x1c>
 800d150:	2a00      	cmp	r2, #0
 800d152:	d1f5      	bne.n	800d140 <strncmp+0x8>
 800d154:	1ad0      	subs	r0, r2, r3
 800d156:	bd10      	pop	{r4, pc}
 800d158:	4610      	mov	r0, r2
 800d15a:	e7fc      	b.n	800d156 <strncmp+0x1e>

0800d15c <_localeconv_r>:
 800d15c:	4800      	ldr	r0, [pc, #0]	@ (800d160 <_localeconv_r+0x4>)
 800d15e:	4770      	bx	lr
 800d160:	20000148 	.word	0x20000148

0800d164 <_close_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4d06      	ldr	r5, [pc, #24]	@ (800d180 <_close_r+0x1c>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	f7f8 fdf8 	bl	8005d64 <_close>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_close_r+0x1a>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_close_r+0x1a>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	20009644 	.word	0x20009644

0800d184 <_lseek_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d07      	ldr	r5, [pc, #28]	@ (800d1a4 <_lseek_r+0x20>)
 800d188:	4604      	mov	r4, r0
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f7f8 fe0d 	bl	8005db2 <_lseek>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_lseek_r+0x1e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_lseek_r+0x1e>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	20009644 	.word	0x20009644

0800d1a8 <_read_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d07      	ldr	r5, [pc, #28]	@ (800d1c8 <_read_r+0x20>)
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	602a      	str	r2, [r5, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f7f8 fd9b 	bl	8005cf2 <_read>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_read_r+0x1e>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_read_r+0x1e>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	20009644 	.word	0x20009644

0800d1cc <_write_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d07      	ldr	r5, [pc, #28]	@ (800d1ec <_write_r+0x20>)
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	602a      	str	r2, [r5, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f7f8 fda6 	bl	8005d2c <_write>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_write_r+0x1e>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_write_r+0x1e>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	20009644 	.word	0x20009644

0800d1f0 <__errno>:
 800d1f0:	4b01      	ldr	r3, [pc, #4]	@ (800d1f8 <__errno+0x8>)
 800d1f2:	6818      	ldr	r0, [r3, #0]
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	200001c4 	.word	0x200001c4

0800d1fc <__libc_init_array>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	4d0d      	ldr	r5, [pc, #52]	@ (800d234 <__libc_init_array+0x38>)
 800d200:	4c0d      	ldr	r4, [pc, #52]	@ (800d238 <__libc_init_array+0x3c>)
 800d202:	1b64      	subs	r4, r4, r5
 800d204:	10a4      	asrs	r4, r4, #2
 800d206:	2600      	movs	r6, #0
 800d208:	42a6      	cmp	r6, r4
 800d20a:	d109      	bne.n	800d220 <__libc_init_array+0x24>
 800d20c:	4d0b      	ldr	r5, [pc, #44]	@ (800d23c <__libc_init_array+0x40>)
 800d20e:	4c0c      	ldr	r4, [pc, #48]	@ (800d240 <__libc_init_array+0x44>)
 800d210:	f002 fa9e 	bl	800f750 <_init>
 800d214:	1b64      	subs	r4, r4, r5
 800d216:	10a4      	asrs	r4, r4, #2
 800d218:	2600      	movs	r6, #0
 800d21a:	42a6      	cmp	r6, r4
 800d21c:	d105      	bne.n	800d22a <__libc_init_array+0x2e>
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	f855 3b04 	ldr.w	r3, [r5], #4
 800d224:	4798      	blx	r3
 800d226:	3601      	adds	r6, #1
 800d228:	e7ee      	b.n	800d208 <__libc_init_array+0xc>
 800d22a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d22e:	4798      	blx	r3
 800d230:	3601      	adds	r6, #1
 800d232:	e7f2      	b.n	800d21a <__libc_init_array+0x1e>
 800d234:	08010be0 	.word	0x08010be0
 800d238:	08010be0 	.word	0x08010be0
 800d23c:	08010be0 	.word	0x08010be0
 800d240:	08010be4 	.word	0x08010be4

0800d244 <__retarget_lock_init_recursive>:
 800d244:	4770      	bx	lr

0800d246 <__retarget_lock_acquire_recursive>:
 800d246:	4770      	bx	lr

0800d248 <__retarget_lock_release_recursive>:
 800d248:	4770      	bx	lr

0800d24a <memcpy>:
 800d24a:	440a      	add	r2, r1
 800d24c:	4291      	cmp	r1, r2
 800d24e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d252:	d100      	bne.n	800d256 <memcpy+0xc>
 800d254:	4770      	bx	lr
 800d256:	b510      	push	{r4, lr}
 800d258:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d25c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d260:	4291      	cmp	r1, r2
 800d262:	d1f9      	bne.n	800d258 <memcpy+0xe>
 800d264:	bd10      	pop	{r4, pc}
	...

0800d268 <nan>:
 800d268:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d270 <nan+0x8>
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	00000000 	.word	0x00000000
 800d274:	7ff80000 	.word	0x7ff80000

0800d278 <quorem>:
 800d278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	6903      	ldr	r3, [r0, #16]
 800d27e:	690c      	ldr	r4, [r1, #16]
 800d280:	42a3      	cmp	r3, r4
 800d282:	4607      	mov	r7, r0
 800d284:	db7e      	blt.n	800d384 <quorem+0x10c>
 800d286:	3c01      	subs	r4, #1
 800d288:	f101 0814 	add.w	r8, r1, #20
 800d28c:	00a3      	lsls	r3, r4, #2
 800d28e:	f100 0514 	add.w	r5, r0, #20
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d29e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2ae:	d32e      	bcc.n	800d30e <quorem+0x96>
 800d2b0:	f04f 0a00 	mov.w	sl, #0
 800d2b4:	46c4      	mov	ip, r8
 800d2b6:	46ae      	mov	lr, r5
 800d2b8:	46d3      	mov	fp, sl
 800d2ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d2be:	b298      	uxth	r0, r3
 800d2c0:	fb06 a000 	mla	r0, r6, r0, sl
 800d2c4:	0c02      	lsrs	r2, r0, #16
 800d2c6:	0c1b      	lsrs	r3, r3, #16
 800d2c8:	fb06 2303 	mla	r3, r6, r3, r2
 800d2cc:	f8de 2000 	ldr.w	r2, [lr]
 800d2d0:	b280      	uxth	r0, r0
 800d2d2:	b292      	uxth	r2, r2
 800d2d4:	1a12      	subs	r2, r2, r0
 800d2d6:	445a      	add	r2, fp
 800d2d8:	f8de 0000 	ldr.w	r0, [lr]
 800d2dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d2e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d2ea:	b292      	uxth	r2, r2
 800d2ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d2f0:	45e1      	cmp	r9, ip
 800d2f2:	f84e 2b04 	str.w	r2, [lr], #4
 800d2f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d2fa:	d2de      	bcs.n	800d2ba <quorem+0x42>
 800d2fc:	9b00      	ldr	r3, [sp, #0]
 800d2fe:	58eb      	ldr	r3, [r5, r3]
 800d300:	b92b      	cbnz	r3, 800d30e <quorem+0x96>
 800d302:	9b01      	ldr	r3, [sp, #4]
 800d304:	3b04      	subs	r3, #4
 800d306:	429d      	cmp	r5, r3
 800d308:	461a      	mov	r2, r3
 800d30a:	d32f      	bcc.n	800d36c <quorem+0xf4>
 800d30c:	613c      	str	r4, [r7, #16]
 800d30e:	4638      	mov	r0, r7
 800d310:	f001 fd12 	bl	800ed38 <__mcmp>
 800d314:	2800      	cmp	r0, #0
 800d316:	db25      	blt.n	800d364 <quorem+0xec>
 800d318:	4629      	mov	r1, r5
 800d31a:	2000      	movs	r0, #0
 800d31c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d320:	f8d1 c000 	ldr.w	ip, [r1]
 800d324:	fa1f fe82 	uxth.w	lr, r2
 800d328:	fa1f f38c 	uxth.w	r3, ip
 800d32c:	eba3 030e 	sub.w	r3, r3, lr
 800d330:	4403      	add	r3, r0
 800d332:	0c12      	lsrs	r2, r2, #16
 800d334:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d338:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d342:	45c1      	cmp	r9, r8
 800d344:	f841 3b04 	str.w	r3, [r1], #4
 800d348:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d34c:	d2e6      	bcs.n	800d31c <quorem+0xa4>
 800d34e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d356:	b922      	cbnz	r2, 800d362 <quorem+0xea>
 800d358:	3b04      	subs	r3, #4
 800d35a:	429d      	cmp	r5, r3
 800d35c:	461a      	mov	r2, r3
 800d35e:	d30b      	bcc.n	800d378 <quorem+0x100>
 800d360:	613c      	str	r4, [r7, #16]
 800d362:	3601      	adds	r6, #1
 800d364:	4630      	mov	r0, r6
 800d366:	b003      	add	sp, #12
 800d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36c:	6812      	ldr	r2, [r2, #0]
 800d36e:	3b04      	subs	r3, #4
 800d370:	2a00      	cmp	r2, #0
 800d372:	d1cb      	bne.n	800d30c <quorem+0x94>
 800d374:	3c01      	subs	r4, #1
 800d376:	e7c6      	b.n	800d306 <quorem+0x8e>
 800d378:	6812      	ldr	r2, [r2, #0]
 800d37a:	3b04      	subs	r3, #4
 800d37c:	2a00      	cmp	r2, #0
 800d37e:	d1ef      	bne.n	800d360 <quorem+0xe8>
 800d380:	3c01      	subs	r4, #1
 800d382:	e7ea      	b.n	800d35a <quorem+0xe2>
 800d384:	2000      	movs	r0, #0
 800d386:	e7ee      	b.n	800d366 <quorem+0xee>

0800d388 <_dtoa_r>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	69c7      	ldr	r7, [r0, #28]
 800d38e:	b097      	sub	sp, #92	@ 0x5c
 800d390:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d394:	ec55 4b10 	vmov	r4, r5, d0
 800d398:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d39a:	9107      	str	r1, [sp, #28]
 800d39c:	4681      	mov	r9, r0
 800d39e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d3a2:	b97f      	cbnz	r7, 800d3c4 <_dtoa_r+0x3c>
 800d3a4:	2010      	movs	r0, #16
 800d3a6:	f001 f943 	bl	800e630 <malloc>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	f8c9 001c 	str.w	r0, [r9, #28]
 800d3b0:	b920      	cbnz	r0, 800d3bc <_dtoa_r+0x34>
 800d3b2:	4ba9      	ldr	r3, [pc, #676]	@ (800d658 <_dtoa_r+0x2d0>)
 800d3b4:	21ef      	movs	r1, #239	@ 0xef
 800d3b6:	48a9      	ldr	r0, [pc, #676]	@ (800d65c <_dtoa_r+0x2d4>)
 800d3b8:	f002 f93a 	bl	800f630 <__assert_func>
 800d3bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d3c0:	6007      	str	r7, [r0, #0]
 800d3c2:	60c7      	str	r7, [r0, #12]
 800d3c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	b159      	cbz	r1, 800d3e4 <_dtoa_r+0x5c>
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	604a      	str	r2, [r1, #4]
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	4093      	lsls	r3, r2
 800d3d4:	608b      	str	r3, [r1, #8]
 800d3d6:	4648      	mov	r0, r9
 800d3d8:	f001 fa32 	bl	800e840 <_Bfree>
 800d3dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	1e2b      	subs	r3, r5, #0
 800d3e6:	bfb9      	ittee	lt
 800d3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d3ec:	9305      	strlt	r3, [sp, #20]
 800d3ee:	2300      	movge	r3, #0
 800d3f0:	6033      	strge	r3, [r6, #0]
 800d3f2:	9f05      	ldr	r7, [sp, #20]
 800d3f4:	4b9a      	ldr	r3, [pc, #616]	@ (800d660 <_dtoa_r+0x2d8>)
 800d3f6:	bfbc      	itt	lt
 800d3f8:	2201      	movlt	r2, #1
 800d3fa:	6032      	strlt	r2, [r6, #0]
 800d3fc:	43bb      	bics	r3, r7
 800d3fe:	d112      	bne.n	800d426 <_dtoa_r+0x9e>
 800d400:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d402:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d406:	6013      	str	r3, [r2, #0]
 800d408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d40c:	4323      	orrs	r3, r4
 800d40e:	f000 855a 	beq.w	800dec6 <_dtoa_r+0xb3e>
 800d412:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d414:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d674 <_dtoa_r+0x2ec>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 855c 	beq.w	800ded6 <_dtoa_r+0xb4e>
 800d41e:	f10a 0303 	add.w	r3, sl, #3
 800d422:	f000 bd56 	b.w	800ded2 <_dtoa_r+0xb4a>
 800d426:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d42a:	2200      	movs	r2, #0
 800d42c:	ec51 0b17 	vmov	r0, r1, d7
 800d430:	2300      	movs	r3, #0
 800d432:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d436:	f7f3 fb67 	bl	8000b08 <__aeabi_dcmpeq>
 800d43a:	4680      	mov	r8, r0
 800d43c:	b158      	cbz	r0, 800d456 <_dtoa_r+0xce>
 800d43e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d440:	2301      	movs	r3, #1
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d446:	b113      	cbz	r3, 800d44e <_dtoa_r+0xc6>
 800d448:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d44a:	4b86      	ldr	r3, [pc, #536]	@ (800d664 <_dtoa_r+0x2dc>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d678 <_dtoa_r+0x2f0>
 800d452:	f000 bd40 	b.w	800ded6 <_dtoa_r+0xb4e>
 800d456:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d45a:	aa14      	add	r2, sp, #80	@ 0x50
 800d45c:	a915      	add	r1, sp, #84	@ 0x54
 800d45e:	4648      	mov	r0, r9
 800d460:	f001 fd8a 	bl	800ef78 <__d2b>
 800d464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d468:	9002      	str	r0, [sp, #8]
 800d46a:	2e00      	cmp	r6, #0
 800d46c:	d078      	beq.n	800d560 <_dtoa_r+0x1d8>
 800d46e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d470:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d47c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d488:	4619      	mov	r1, r3
 800d48a:	2200      	movs	r2, #0
 800d48c:	4b76      	ldr	r3, [pc, #472]	@ (800d668 <_dtoa_r+0x2e0>)
 800d48e:	f7f2 ff1b 	bl	80002c8 <__aeabi_dsub>
 800d492:	a36b      	add	r3, pc, #428	@ (adr r3, 800d640 <_dtoa_r+0x2b8>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	f7f3 f8ce 	bl	8000638 <__aeabi_dmul>
 800d49c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d648 <_dtoa_r+0x2c0>)
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	f7f2 ff13 	bl	80002cc <__adddf3>
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	f7f3 f85a 	bl	8000564 <__aeabi_i2d>
 800d4b0:	a367      	add	r3, pc, #412	@ (adr r3, 800d650 <_dtoa_r+0x2c8>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f3 f8bf 	bl	8000638 <__aeabi_dmul>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4620      	mov	r0, r4
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	f7f2 ff03 	bl	80002cc <__adddf3>
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	f7f3 fb65 	bl	8000b98 <__aeabi_d2iz>
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	f7f3 fb20 	bl	8000b1c <__aeabi_dcmplt>
 800d4dc:	b140      	cbz	r0, 800d4f0 <_dtoa_r+0x168>
 800d4de:	4638      	mov	r0, r7
 800d4e0:	f7f3 f840 	bl	8000564 <__aeabi_i2d>
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	462b      	mov	r3, r5
 800d4e8:	f7f3 fb0e 	bl	8000b08 <__aeabi_dcmpeq>
 800d4ec:	b900      	cbnz	r0, 800d4f0 <_dtoa_r+0x168>
 800d4ee:	3f01      	subs	r7, #1
 800d4f0:	2f16      	cmp	r7, #22
 800d4f2:	d852      	bhi.n	800d59a <_dtoa_r+0x212>
 800d4f4:	4b5d      	ldr	r3, [pc, #372]	@ (800d66c <_dtoa_r+0x2e4>)
 800d4f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d502:	f7f3 fb0b 	bl	8000b1c <__aeabi_dcmplt>
 800d506:	2800      	cmp	r0, #0
 800d508:	d049      	beq.n	800d59e <_dtoa_r+0x216>
 800d50a:	3f01      	subs	r7, #1
 800d50c:	2300      	movs	r3, #0
 800d50e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d510:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d512:	1b9b      	subs	r3, r3, r6
 800d514:	1e5a      	subs	r2, r3, #1
 800d516:	bf45      	ittet	mi
 800d518:	f1c3 0301 	rsbmi	r3, r3, #1
 800d51c:	9300      	strmi	r3, [sp, #0]
 800d51e:	2300      	movpl	r3, #0
 800d520:	2300      	movmi	r3, #0
 800d522:	9206      	str	r2, [sp, #24]
 800d524:	bf54      	ite	pl
 800d526:	9300      	strpl	r3, [sp, #0]
 800d528:	9306      	strmi	r3, [sp, #24]
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	db39      	blt.n	800d5a2 <_dtoa_r+0x21a>
 800d52e:	9b06      	ldr	r3, [sp, #24]
 800d530:	970d      	str	r7, [sp, #52]	@ 0x34
 800d532:	443b      	add	r3, r7
 800d534:	9306      	str	r3, [sp, #24]
 800d536:	2300      	movs	r3, #0
 800d538:	9308      	str	r3, [sp, #32]
 800d53a:	9b07      	ldr	r3, [sp, #28]
 800d53c:	2b09      	cmp	r3, #9
 800d53e:	d863      	bhi.n	800d608 <_dtoa_r+0x280>
 800d540:	2b05      	cmp	r3, #5
 800d542:	bfc4      	itt	gt
 800d544:	3b04      	subgt	r3, #4
 800d546:	9307      	strgt	r3, [sp, #28]
 800d548:	9b07      	ldr	r3, [sp, #28]
 800d54a:	f1a3 0302 	sub.w	r3, r3, #2
 800d54e:	bfcc      	ite	gt
 800d550:	2400      	movgt	r4, #0
 800d552:	2401      	movle	r4, #1
 800d554:	2b03      	cmp	r3, #3
 800d556:	d863      	bhi.n	800d620 <_dtoa_r+0x298>
 800d558:	e8df f003 	tbb	[pc, r3]
 800d55c:	2b375452 	.word	0x2b375452
 800d560:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d564:	441e      	add	r6, r3
 800d566:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d56a:	2b20      	cmp	r3, #32
 800d56c:	bfc1      	itttt	gt
 800d56e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d572:	409f      	lslgt	r7, r3
 800d574:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d578:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d57c:	bfd6      	itet	le
 800d57e:	f1c3 0320 	rsble	r3, r3, #32
 800d582:	ea47 0003 	orrgt.w	r0, r7, r3
 800d586:	fa04 f003 	lslle.w	r0, r4, r3
 800d58a:	f7f2 ffdb 	bl	8000544 <__aeabi_ui2d>
 800d58e:	2201      	movs	r2, #1
 800d590:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d594:	3e01      	subs	r6, #1
 800d596:	9212      	str	r2, [sp, #72]	@ 0x48
 800d598:	e776      	b.n	800d488 <_dtoa_r+0x100>
 800d59a:	2301      	movs	r3, #1
 800d59c:	e7b7      	b.n	800d50e <_dtoa_r+0x186>
 800d59e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d5a0:	e7b6      	b.n	800d510 <_dtoa_r+0x188>
 800d5a2:	9b00      	ldr	r3, [sp, #0]
 800d5a4:	1bdb      	subs	r3, r3, r7
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	427b      	negs	r3, r7
 800d5aa:	9308      	str	r3, [sp, #32]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800d5b0:	e7c3      	b.n	800d53a <_dtoa_r+0x1b2>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5b8:	eb07 0b03 	add.w	fp, r7, r3
 800d5bc:	f10b 0301 	add.w	r3, fp, #1
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	9303      	str	r3, [sp, #12]
 800d5c4:	bfb8      	it	lt
 800d5c6:	2301      	movlt	r3, #1
 800d5c8:	e006      	b.n	800d5d8 <_dtoa_r+0x250>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	dd28      	ble.n	800d626 <_dtoa_r+0x29e>
 800d5d4:	469b      	mov	fp, r3
 800d5d6:	9303      	str	r3, [sp, #12]
 800d5d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	2204      	movs	r2, #4
 800d5e0:	f102 0514 	add.w	r5, r2, #20
 800d5e4:	429d      	cmp	r5, r3
 800d5e6:	d926      	bls.n	800d636 <_dtoa_r+0x2ae>
 800d5e8:	6041      	str	r1, [r0, #4]
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	f001 f8e8 	bl	800e7c0 <_Balloc>
 800d5f0:	4682      	mov	sl, r0
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d142      	bne.n	800d67c <_dtoa_r+0x2f4>
 800d5f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d670 <_dtoa_r+0x2e8>)
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	f240 11af 	movw	r1, #431	@ 0x1af
 800d5fe:	e6da      	b.n	800d3b6 <_dtoa_r+0x2e>
 800d600:	2300      	movs	r3, #0
 800d602:	e7e3      	b.n	800d5cc <_dtoa_r+0x244>
 800d604:	2300      	movs	r3, #0
 800d606:	e7d5      	b.n	800d5b4 <_dtoa_r+0x22c>
 800d608:	2401      	movs	r4, #1
 800d60a:	2300      	movs	r3, #0
 800d60c:	9307      	str	r3, [sp, #28]
 800d60e:	9409      	str	r4, [sp, #36]	@ 0x24
 800d610:	f04f 3bff 	mov.w	fp, #4294967295
 800d614:	2200      	movs	r2, #0
 800d616:	f8cd b00c 	str.w	fp, [sp, #12]
 800d61a:	2312      	movs	r3, #18
 800d61c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d61e:	e7db      	b.n	800d5d8 <_dtoa_r+0x250>
 800d620:	2301      	movs	r3, #1
 800d622:	9309      	str	r3, [sp, #36]	@ 0x24
 800d624:	e7f4      	b.n	800d610 <_dtoa_r+0x288>
 800d626:	f04f 0b01 	mov.w	fp, #1
 800d62a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d62e:	465b      	mov	r3, fp
 800d630:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d634:	e7d0      	b.n	800d5d8 <_dtoa_r+0x250>
 800d636:	3101      	adds	r1, #1
 800d638:	0052      	lsls	r2, r2, #1
 800d63a:	e7d1      	b.n	800d5e0 <_dtoa_r+0x258>
 800d63c:	f3af 8000 	nop.w
 800d640:	636f4361 	.word	0x636f4361
 800d644:	3fd287a7 	.word	0x3fd287a7
 800d648:	8b60c8b3 	.word	0x8b60c8b3
 800d64c:	3fc68a28 	.word	0x3fc68a28
 800d650:	509f79fb 	.word	0x509f79fb
 800d654:	3fd34413 	.word	0x3fd34413
 800d658:	080107fb 	.word	0x080107fb
 800d65c:	08010812 	.word	0x08010812
 800d660:	7ff00000 	.word	0x7ff00000
 800d664:	080107c3 	.word	0x080107c3
 800d668:	3ff80000 	.word	0x3ff80000
 800d66c:	08010b10 	.word	0x08010b10
 800d670:	0801086a 	.word	0x0801086a
 800d674:	080107f7 	.word	0x080107f7
 800d678:	080107c2 	.word	0x080107c2
 800d67c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d680:	6018      	str	r0, [r3, #0]
 800d682:	9b03      	ldr	r3, [sp, #12]
 800d684:	2b0e      	cmp	r3, #14
 800d686:	f200 80a1 	bhi.w	800d7cc <_dtoa_r+0x444>
 800d68a:	2c00      	cmp	r4, #0
 800d68c:	f000 809e 	beq.w	800d7cc <_dtoa_r+0x444>
 800d690:	2f00      	cmp	r7, #0
 800d692:	dd33      	ble.n	800d6fc <_dtoa_r+0x374>
 800d694:	4b9c      	ldr	r3, [pc, #624]	@ (800d908 <_dtoa_r+0x580>)
 800d696:	f007 020f 	and.w	r2, r7, #15
 800d69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d69e:	ed93 7b00 	vldr	d7, [r3]
 800d6a2:	05f8      	lsls	r0, r7, #23
 800d6a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d6a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d6ac:	d516      	bpl.n	800d6dc <_dtoa_r+0x354>
 800d6ae:	4b97      	ldr	r3, [pc, #604]	@ (800d90c <_dtoa_r+0x584>)
 800d6b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6b8:	f7f3 f8e8 	bl	800088c <__aeabi_ddiv>
 800d6bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6c0:	f004 040f 	and.w	r4, r4, #15
 800d6c4:	2603      	movs	r6, #3
 800d6c6:	4d91      	ldr	r5, [pc, #580]	@ (800d90c <_dtoa_r+0x584>)
 800d6c8:	b954      	cbnz	r4, 800d6e0 <_dtoa_r+0x358>
 800d6ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6d2:	f7f3 f8db 	bl	800088c <__aeabi_ddiv>
 800d6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6da:	e028      	b.n	800d72e <_dtoa_r+0x3a6>
 800d6dc:	2602      	movs	r6, #2
 800d6de:	e7f2      	b.n	800d6c6 <_dtoa_r+0x33e>
 800d6e0:	07e1      	lsls	r1, r4, #31
 800d6e2:	d508      	bpl.n	800d6f6 <_dtoa_r+0x36e>
 800d6e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d6e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6ec:	f7f2 ffa4 	bl	8000638 <__aeabi_dmul>
 800d6f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d6f4:	3601      	adds	r6, #1
 800d6f6:	1064      	asrs	r4, r4, #1
 800d6f8:	3508      	adds	r5, #8
 800d6fa:	e7e5      	b.n	800d6c8 <_dtoa_r+0x340>
 800d6fc:	f000 80af 	beq.w	800d85e <_dtoa_r+0x4d6>
 800d700:	427c      	negs	r4, r7
 800d702:	4b81      	ldr	r3, [pc, #516]	@ (800d908 <_dtoa_r+0x580>)
 800d704:	4d81      	ldr	r5, [pc, #516]	@ (800d90c <_dtoa_r+0x584>)
 800d706:	f004 020f 	and.w	r2, r4, #15
 800d70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d716:	f7f2 ff8f 	bl	8000638 <__aeabi_dmul>
 800d71a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d71e:	1124      	asrs	r4, r4, #4
 800d720:	2300      	movs	r3, #0
 800d722:	2602      	movs	r6, #2
 800d724:	2c00      	cmp	r4, #0
 800d726:	f040 808f 	bne.w	800d848 <_dtoa_r+0x4c0>
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1d3      	bne.n	800d6d6 <_dtoa_r+0x34e>
 800d72e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d730:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 8094 	beq.w	800d862 <_dtoa_r+0x4da>
 800d73a:	4b75      	ldr	r3, [pc, #468]	@ (800d910 <_dtoa_r+0x588>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	f7f3 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 800d746:	2800      	cmp	r0, #0
 800d748:	f000 808b 	beq.w	800d862 <_dtoa_r+0x4da>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 8087 	beq.w	800d862 <_dtoa_r+0x4da>
 800d754:	f1bb 0f00 	cmp.w	fp, #0
 800d758:	dd34      	ble.n	800d7c4 <_dtoa_r+0x43c>
 800d75a:	4620      	mov	r0, r4
 800d75c:	4b6d      	ldr	r3, [pc, #436]	@ (800d914 <_dtoa_r+0x58c>)
 800d75e:	2200      	movs	r2, #0
 800d760:	4629      	mov	r1, r5
 800d762:	f7f2 ff69 	bl	8000638 <__aeabi_dmul>
 800d766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d76a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d76e:	3601      	adds	r6, #1
 800d770:	465c      	mov	r4, fp
 800d772:	4630      	mov	r0, r6
 800d774:	f7f2 fef6 	bl	8000564 <__aeabi_i2d>
 800d778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d77c:	f7f2 ff5c 	bl	8000638 <__aeabi_dmul>
 800d780:	4b65      	ldr	r3, [pc, #404]	@ (800d918 <_dtoa_r+0x590>)
 800d782:	2200      	movs	r2, #0
 800d784:	f7f2 fda2 	bl	80002cc <__adddf3>
 800d788:	4605      	mov	r5, r0
 800d78a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d78e:	2c00      	cmp	r4, #0
 800d790:	d16a      	bne.n	800d868 <_dtoa_r+0x4e0>
 800d792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d796:	4b61      	ldr	r3, [pc, #388]	@ (800d91c <_dtoa_r+0x594>)
 800d798:	2200      	movs	r2, #0
 800d79a:	f7f2 fd95 	bl	80002c8 <__aeabi_dsub>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7a6:	462a      	mov	r2, r5
 800d7a8:	4633      	mov	r3, r6
 800d7aa:	f7f3 f9d5 	bl	8000b58 <__aeabi_dcmpgt>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	f040 8298 	bne.w	800dce4 <_dtoa_r+0x95c>
 800d7b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d7be:	f7f3 f9ad 	bl	8000b1c <__aeabi_dcmplt>
 800d7c2:	bb38      	cbnz	r0, 800d814 <_dtoa_r+0x48c>
 800d7c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d7c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d7cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f2c0 8157 	blt.w	800da82 <_dtoa_r+0x6fa>
 800d7d4:	2f0e      	cmp	r7, #14
 800d7d6:	f300 8154 	bgt.w	800da82 <_dtoa_r+0x6fa>
 800d7da:	4b4b      	ldr	r3, [pc, #300]	@ (800d908 <_dtoa_r+0x580>)
 800d7dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d7e0:	ed93 7b00 	vldr	d7, [r3]
 800d7e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	ed8d 7b00 	vstr	d7, [sp]
 800d7ec:	f280 80e5 	bge.w	800d9ba <_dtoa_r+0x632>
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f300 80e1 	bgt.w	800d9ba <_dtoa_r+0x632>
 800d7f8:	d10c      	bne.n	800d814 <_dtoa_r+0x48c>
 800d7fa:	4b48      	ldr	r3, [pc, #288]	@ (800d91c <_dtoa_r+0x594>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	ec51 0b17 	vmov	r0, r1, d7
 800d802:	f7f2 ff19 	bl	8000638 <__aeabi_dmul>
 800d806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d80a:	f7f3 f99b 	bl	8000b44 <__aeabi_dcmpge>
 800d80e:	2800      	cmp	r0, #0
 800d810:	f000 8266 	beq.w	800dce0 <_dtoa_r+0x958>
 800d814:	2400      	movs	r4, #0
 800d816:	4625      	mov	r5, r4
 800d818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d81a:	4656      	mov	r6, sl
 800d81c:	ea6f 0803 	mvn.w	r8, r3
 800d820:	2700      	movs	r7, #0
 800d822:	4621      	mov	r1, r4
 800d824:	4648      	mov	r0, r9
 800d826:	f001 f80b 	bl	800e840 <_Bfree>
 800d82a:	2d00      	cmp	r5, #0
 800d82c:	f000 80bd 	beq.w	800d9aa <_dtoa_r+0x622>
 800d830:	b12f      	cbz	r7, 800d83e <_dtoa_r+0x4b6>
 800d832:	42af      	cmp	r7, r5
 800d834:	d003      	beq.n	800d83e <_dtoa_r+0x4b6>
 800d836:	4639      	mov	r1, r7
 800d838:	4648      	mov	r0, r9
 800d83a:	f001 f801 	bl	800e840 <_Bfree>
 800d83e:	4629      	mov	r1, r5
 800d840:	4648      	mov	r0, r9
 800d842:	f000 fffd 	bl	800e840 <_Bfree>
 800d846:	e0b0      	b.n	800d9aa <_dtoa_r+0x622>
 800d848:	07e2      	lsls	r2, r4, #31
 800d84a:	d505      	bpl.n	800d858 <_dtoa_r+0x4d0>
 800d84c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d850:	f7f2 fef2 	bl	8000638 <__aeabi_dmul>
 800d854:	3601      	adds	r6, #1
 800d856:	2301      	movs	r3, #1
 800d858:	1064      	asrs	r4, r4, #1
 800d85a:	3508      	adds	r5, #8
 800d85c:	e762      	b.n	800d724 <_dtoa_r+0x39c>
 800d85e:	2602      	movs	r6, #2
 800d860:	e765      	b.n	800d72e <_dtoa_r+0x3a6>
 800d862:	9c03      	ldr	r4, [sp, #12]
 800d864:	46b8      	mov	r8, r7
 800d866:	e784      	b.n	800d772 <_dtoa_r+0x3ea>
 800d868:	4b27      	ldr	r3, [pc, #156]	@ (800d908 <_dtoa_r+0x580>)
 800d86a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d86c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d870:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d874:	4454      	add	r4, sl
 800d876:	2900      	cmp	r1, #0
 800d878:	d054      	beq.n	800d924 <_dtoa_r+0x59c>
 800d87a:	4929      	ldr	r1, [pc, #164]	@ (800d920 <_dtoa_r+0x598>)
 800d87c:	2000      	movs	r0, #0
 800d87e:	f7f3 f805 	bl	800088c <__aeabi_ddiv>
 800d882:	4633      	mov	r3, r6
 800d884:	462a      	mov	r2, r5
 800d886:	f7f2 fd1f 	bl	80002c8 <__aeabi_dsub>
 800d88a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d88e:	4656      	mov	r6, sl
 800d890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d894:	f7f3 f980 	bl	8000b98 <__aeabi_d2iz>
 800d898:	4605      	mov	r5, r0
 800d89a:	f7f2 fe63 	bl	8000564 <__aeabi_i2d>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8a6:	f7f2 fd0f 	bl	80002c8 <__aeabi_dsub>
 800d8aa:	3530      	adds	r5, #48	@ 0x30
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8b4:	f806 5b01 	strb.w	r5, [r6], #1
 800d8b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d8bc:	f7f3 f92e 	bl	8000b1c <__aeabi_dcmplt>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d172      	bne.n	800d9aa <_dtoa_r+0x622>
 800d8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8c8:	4911      	ldr	r1, [pc, #68]	@ (800d910 <_dtoa_r+0x588>)
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	f7f2 fcfc 	bl	80002c8 <__aeabi_dsub>
 800d8d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d8d4:	f7f3 f922 	bl	8000b1c <__aeabi_dcmplt>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	f040 80b4 	bne.w	800da46 <_dtoa_r+0x6be>
 800d8de:	42a6      	cmp	r6, r4
 800d8e0:	f43f af70 	beq.w	800d7c4 <_dtoa_r+0x43c>
 800d8e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d8e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d914 <_dtoa_r+0x58c>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f7f2 fea4 	bl	8000638 <__aeabi_dmul>
 800d8f0:	4b08      	ldr	r3, [pc, #32]	@ (800d914 <_dtoa_r+0x58c>)
 800d8f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8fc:	f7f2 fe9c 	bl	8000638 <__aeabi_dmul>
 800d900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d904:	e7c4      	b.n	800d890 <_dtoa_r+0x508>
 800d906:	bf00      	nop
 800d908:	08010b10 	.word	0x08010b10
 800d90c:	08010ae8 	.word	0x08010ae8
 800d910:	3ff00000 	.word	0x3ff00000
 800d914:	40240000 	.word	0x40240000
 800d918:	401c0000 	.word	0x401c0000
 800d91c:	40140000 	.word	0x40140000
 800d920:	3fe00000 	.word	0x3fe00000
 800d924:	4631      	mov	r1, r6
 800d926:	4628      	mov	r0, r5
 800d928:	f7f2 fe86 	bl	8000638 <__aeabi_dmul>
 800d92c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d930:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d932:	4656      	mov	r6, sl
 800d934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d938:	f7f3 f92e 	bl	8000b98 <__aeabi_d2iz>
 800d93c:	4605      	mov	r5, r0
 800d93e:	f7f2 fe11 	bl	8000564 <__aeabi_i2d>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d94a:	f7f2 fcbd 	bl	80002c8 <__aeabi_dsub>
 800d94e:	3530      	adds	r5, #48	@ 0x30
 800d950:	f806 5b01 	strb.w	r5, [r6], #1
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	42a6      	cmp	r6, r4
 800d95a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d95e:	f04f 0200 	mov.w	r2, #0
 800d962:	d124      	bne.n	800d9ae <_dtoa_r+0x626>
 800d964:	4baf      	ldr	r3, [pc, #700]	@ (800dc24 <_dtoa_r+0x89c>)
 800d966:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d96a:	f7f2 fcaf 	bl	80002cc <__adddf3>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d976:	f7f3 f8ef 	bl	8000b58 <__aeabi_dcmpgt>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d163      	bne.n	800da46 <_dtoa_r+0x6be>
 800d97e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d982:	49a8      	ldr	r1, [pc, #672]	@ (800dc24 <_dtoa_r+0x89c>)
 800d984:	2000      	movs	r0, #0
 800d986:	f7f2 fc9f 	bl	80002c8 <__aeabi_dsub>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d992:	f7f3 f8c3 	bl	8000b1c <__aeabi_dcmplt>
 800d996:	2800      	cmp	r0, #0
 800d998:	f43f af14 	beq.w	800d7c4 <_dtoa_r+0x43c>
 800d99c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d99e:	1e73      	subs	r3, r6, #1
 800d9a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d9a6:	2b30      	cmp	r3, #48	@ 0x30
 800d9a8:	d0f8      	beq.n	800d99c <_dtoa_r+0x614>
 800d9aa:	4647      	mov	r7, r8
 800d9ac:	e03b      	b.n	800da26 <_dtoa_r+0x69e>
 800d9ae:	4b9e      	ldr	r3, [pc, #632]	@ (800dc28 <_dtoa_r+0x8a0>)
 800d9b0:	f7f2 fe42 	bl	8000638 <__aeabi_dmul>
 800d9b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9b8:	e7bc      	b.n	800d934 <_dtoa_r+0x5ac>
 800d9ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d9be:	4656      	mov	r6, sl
 800d9c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	f7f2 ff60 	bl	800088c <__aeabi_ddiv>
 800d9cc:	f7f3 f8e4 	bl	8000b98 <__aeabi_d2iz>
 800d9d0:	4680      	mov	r8, r0
 800d9d2:	f7f2 fdc7 	bl	8000564 <__aeabi_i2d>
 800d9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9da:	f7f2 fe2d 	bl	8000638 <__aeabi_dmul>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d9ea:	f7f2 fc6d 	bl	80002c8 <__aeabi_dsub>
 800d9ee:	f806 4b01 	strb.w	r4, [r6], #1
 800d9f2:	9d03      	ldr	r5, [sp, #12]
 800d9f4:	eba6 040a 	sub.w	r4, r6, sl
 800d9f8:	42a5      	cmp	r5, r4
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	d133      	bne.n	800da68 <_dtoa_r+0x6e0>
 800da00:	f7f2 fc64 	bl	80002cc <__adddf3>
 800da04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da08:	4604      	mov	r4, r0
 800da0a:	460d      	mov	r5, r1
 800da0c:	f7f3 f8a4 	bl	8000b58 <__aeabi_dcmpgt>
 800da10:	b9c0      	cbnz	r0, 800da44 <_dtoa_r+0x6bc>
 800da12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da16:	4620      	mov	r0, r4
 800da18:	4629      	mov	r1, r5
 800da1a:	f7f3 f875 	bl	8000b08 <__aeabi_dcmpeq>
 800da1e:	b110      	cbz	r0, 800da26 <_dtoa_r+0x69e>
 800da20:	f018 0f01 	tst.w	r8, #1
 800da24:	d10e      	bne.n	800da44 <_dtoa_r+0x6bc>
 800da26:	9902      	ldr	r1, [sp, #8]
 800da28:	4648      	mov	r0, r9
 800da2a:	f000 ff09 	bl	800e840 <_Bfree>
 800da2e:	2300      	movs	r3, #0
 800da30:	7033      	strb	r3, [r6, #0]
 800da32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da34:	3701      	adds	r7, #1
 800da36:	601f      	str	r7, [r3, #0]
 800da38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 824b 	beq.w	800ded6 <_dtoa_r+0xb4e>
 800da40:	601e      	str	r6, [r3, #0]
 800da42:	e248      	b.n	800ded6 <_dtoa_r+0xb4e>
 800da44:	46b8      	mov	r8, r7
 800da46:	4633      	mov	r3, r6
 800da48:	461e      	mov	r6, r3
 800da4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da4e:	2a39      	cmp	r2, #57	@ 0x39
 800da50:	d106      	bne.n	800da60 <_dtoa_r+0x6d8>
 800da52:	459a      	cmp	sl, r3
 800da54:	d1f8      	bne.n	800da48 <_dtoa_r+0x6c0>
 800da56:	2230      	movs	r2, #48	@ 0x30
 800da58:	f108 0801 	add.w	r8, r8, #1
 800da5c:	f88a 2000 	strb.w	r2, [sl]
 800da60:	781a      	ldrb	r2, [r3, #0]
 800da62:	3201      	adds	r2, #1
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	e7a0      	b.n	800d9aa <_dtoa_r+0x622>
 800da68:	4b6f      	ldr	r3, [pc, #444]	@ (800dc28 <_dtoa_r+0x8a0>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	f7f2 fde4 	bl	8000638 <__aeabi_dmul>
 800da70:	2200      	movs	r2, #0
 800da72:	2300      	movs	r3, #0
 800da74:	4604      	mov	r4, r0
 800da76:	460d      	mov	r5, r1
 800da78:	f7f3 f846 	bl	8000b08 <__aeabi_dcmpeq>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d09f      	beq.n	800d9c0 <_dtoa_r+0x638>
 800da80:	e7d1      	b.n	800da26 <_dtoa_r+0x69e>
 800da82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da84:	2a00      	cmp	r2, #0
 800da86:	f000 80ea 	beq.w	800dc5e <_dtoa_r+0x8d6>
 800da8a:	9a07      	ldr	r2, [sp, #28]
 800da8c:	2a01      	cmp	r2, #1
 800da8e:	f300 80cd 	bgt.w	800dc2c <_dtoa_r+0x8a4>
 800da92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800da94:	2a00      	cmp	r2, #0
 800da96:	f000 80c1 	beq.w	800dc1c <_dtoa_r+0x894>
 800da9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da9e:	9c08      	ldr	r4, [sp, #32]
 800daa0:	9e00      	ldr	r6, [sp, #0]
 800daa2:	9a00      	ldr	r2, [sp, #0]
 800daa4:	441a      	add	r2, r3
 800daa6:	9200      	str	r2, [sp, #0]
 800daa8:	9a06      	ldr	r2, [sp, #24]
 800daaa:	2101      	movs	r1, #1
 800daac:	441a      	add	r2, r3
 800daae:	4648      	mov	r0, r9
 800dab0:	9206      	str	r2, [sp, #24]
 800dab2:	f000 ffc3 	bl	800ea3c <__i2b>
 800dab6:	4605      	mov	r5, r0
 800dab8:	b166      	cbz	r6, 800dad4 <_dtoa_r+0x74c>
 800daba:	9b06      	ldr	r3, [sp, #24]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	dd09      	ble.n	800dad4 <_dtoa_r+0x74c>
 800dac0:	42b3      	cmp	r3, r6
 800dac2:	9a00      	ldr	r2, [sp, #0]
 800dac4:	bfa8      	it	ge
 800dac6:	4633      	movge	r3, r6
 800dac8:	1ad2      	subs	r2, r2, r3
 800daca:	9200      	str	r2, [sp, #0]
 800dacc:	9a06      	ldr	r2, [sp, #24]
 800dace:	1af6      	subs	r6, r6, r3
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	9306      	str	r3, [sp, #24]
 800dad4:	9b08      	ldr	r3, [sp, #32]
 800dad6:	b30b      	cbz	r3, 800db1c <_dtoa_r+0x794>
 800dad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f000 80c6 	beq.w	800dc6c <_dtoa_r+0x8e4>
 800dae0:	2c00      	cmp	r4, #0
 800dae2:	f000 80c0 	beq.w	800dc66 <_dtoa_r+0x8de>
 800dae6:	4629      	mov	r1, r5
 800dae8:	4622      	mov	r2, r4
 800daea:	4648      	mov	r0, r9
 800daec:	f001 f85e 	bl	800ebac <__pow5mult>
 800daf0:	9a02      	ldr	r2, [sp, #8]
 800daf2:	4601      	mov	r1, r0
 800daf4:	4605      	mov	r5, r0
 800daf6:	4648      	mov	r0, r9
 800daf8:	f000 ffb6 	bl	800ea68 <__multiply>
 800dafc:	9902      	ldr	r1, [sp, #8]
 800dafe:	4680      	mov	r8, r0
 800db00:	4648      	mov	r0, r9
 800db02:	f000 fe9d 	bl	800e840 <_Bfree>
 800db06:	9b08      	ldr	r3, [sp, #32]
 800db08:	1b1b      	subs	r3, r3, r4
 800db0a:	9308      	str	r3, [sp, #32]
 800db0c:	f000 80b1 	beq.w	800dc72 <_dtoa_r+0x8ea>
 800db10:	9a08      	ldr	r2, [sp, #32]
 800db12:	4641      	mov	r1, r8
 800db14:	4648      	mov	r0, r9
 800db16:	f001 f849 	bl	800ebac <__pow5mult>
 800db1a:	9002      	str	r0, [sp, #8]
 800db1c:	2101      	movs	r1, #1
 800db1e:	4648      	mov	r0, r9
 800db20:	f000 ff8c 	bl	800ea3c <__i2b>
 800db24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db26:	4604      	mov	r4, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 81d8 	beq.w	800dede <_dtoa_r+0xb56>
 800db2e:	461a      	mov	r2, r3
 800db30:	4601      	mov	r1, r0
 800db32:	4648      	mov	r0, r9
 800db34:	f001 f83a 	bl	800ebac <__pow5mult>
 800db38:	9b07      	ldr	r3, [sp, #28]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	4604      	mov	r4, r0
 800db3e:	f300 809f 	bgt.w	800dc80 <_dtoa_r+0x8f8>
 800db42:	9b04      	ldr	r3, [sp, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 8097 	bne.w	800dc78 <_dtoa_r+0x8f0>
 800db4a:	9b05      	ldr	r3, [sp, #20]
 800db4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db50:	2b00      	cmp	r3, #0
 800db52:	f040 8093 	bne.w	800dc7c <_dtoa_r+0x8f4>
 800db56:	9b05      	ldr	r3, [sp, #20]
 800db58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db5c:	0d1b      	lsrs	r3, r3, #20
 800db5e:	051b      	lsls	r3, r3, #20
 800db60:	b133      	cbz	r3, 800db70 <_dtoa_r+0x7e8>
 800db62:	9b00      	ldr	r3, [sp, #0]
 800db64:	3301      	adds	r3, #1
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	9b06      	ldr	r3, [sp, #24]
 800db6a:	3301      	adds	r3, #1
 800db6c:	9306      	str	r3, [sp, #24]
 800db6e:	2301      	movs	r3, #1
 800db70:	9308      	str	r3, [sp, #32]
 800db72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 81b8 	beq.w	800deea <_dtoa_r+0xb62>
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db80:	6918      	ldr	r0, [r3, #16]
 800db82:	f000 ff0f 	bl	800e9a4 <__hi0bits>
 800db86:	f1c0 0020 	rsb	r0, r0, #32
 800db8a:	9b06      	ldr	r3, [sp, #24]
 800db8c:	4418      	add	r0, r3
 800db8e:	f010 001f 	ands.w	r0, r0, #31
 800db92:	f000 8082 	beq.w	800dc9a <_dtoa_r+0x912>
 800db96:	f1c0 0320 	rsb	r3, r0, #32
 800db9a:	2b04      	cmp	r3, #4
 800db9c:	dd73      	ble.n	800dc86 <_dtoa_r+0x8fe>
 800db9e:	9b00      	ldr	r3, [sp, #0]
 800dba0:	f1c0 001c 	rsb	r0, r0, #28
 800dba4:	4403      	add	r3, r0
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	9b06      	ldr	r3, [sp, #24]
 800dbaa:	4403      	add	r3, r0
 800dbac:	4406      	add	r6, r0
 800dbae:	9306      	str	r3, [sp, #24]
 800dbb0:	9b00      	ldr	r3, [sp, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd05      	ble.n	800dbc2 <_dtoa_r+0x83a>
 800dbb6:	9902      	ldr	r1, [sp, #8]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4648      	mov	r0, r9
 800dbbc:	f001 f850 	bl	800ec60 <__lshift>
 800dbc0:	9002      	str	r0, [sp, #8]
 800dbc2:	9b06      	ldr	r3, [sp, #24]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd05      	ble.n	800dbd4 <_dtoa_r+0x84c>
 800dbc8:	4621      	mov	r1, r4
 800dbca:	461a      	mov	r2, r3
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f001 f847 	bl	800ec60 <__lshift>
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d061      	beq.n	800dc9e <_dtoa_r+0x916>
 800dbda:	9802      	ldr	r0, [sp, #8]
 800dbdc:	4621      	mov	r1, r4
 800dbde:	f001 f8ab 	bl	800ed38 <__mcmp>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	da5b      	bge.n	800dc9e <_dtoa_r+0x916>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	9902      	ldr	r1, [sp, #8]
 800dbea:	220a      	movs	r2, #10
 800dbec:	4648      	mov	r0, r9
 800dbee:	f000 fe49 	bl	800e884 <__multadd>
 800dbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf4:	9002      	str	r0, [sp, #8]
 800dbf6:	f107 38ff 	add.w	r8, r7, #4294967295
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 8177 	beq.w	800deee <_dtoa_r+0xb66>
 800dc00:	4629      	mov	r1, r5
 800dc02:	2300      	movs	r3, #0
 800dc04:	220a      	movs	r2, #10
 800dc06:	4648      	mov	r0, r9
 800dc08:	f000 fe3c 	bl	800e884 <__multadd>
 800dc0c:	f1bb 0f00 	cmp.w	fp, #0
 800dc10:	4605      	mov	r5, r0
 800dc12:	dc6f      	bgt.n	800dcf4 <_dtoa_r+0x96c>
 800dc14:	9b07      	ldr	r3, [sp, #28]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	dc49      	bgt.n	800dcae <_dtoa_r+0x926>
 800dc1a:	e06b      	b.n	800dcf4 <_dtoa_r+0x96c>
 800dc1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dc1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc22:	e73c      	b.n	800da9e <_dtoa_r+0x716>
 800dc24:	3fe00000 	.word	0x3fe00000
 800dc28:	40240000 	.word	0x40240000
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1e5c      	subs	r4, r3, #1
 800dc30:	9b08      	ldr	r3, [sp, #32]
 800dc32:	42a3      	cmp	r3, r4
 800dc34:	db09      	blt.n	800dc4a <_dtoa_r+0x8c2>
 800dc36:	1b1c      	subs	r4, r3, r4
 800dc38:	9b03      	ldr	r3, [sp, #12]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f6bf af30 	bge.w	800daa0 <_dtoa_r+0x718>
 800dc40:	9b00      	ldr	r3, [sp, #0]
 800dc42:	9a03      	ldr	r2, [sp, #12]
 800dc44:	1a9e      	subs	r6, r3, r2
 800dc46:	2300      	movs	r3, #0
 800dc48:	e72b      	b.n	800daa2 <_dtoa_r+0x71a>
 800dc4a:	9b08      	ldr	r3, [sp, #32]
 800dc4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc4e:	9408      	str	r4, [sp, #32]
 800dc50:	1ae3      	subs	r3, r4, r3
 800dc52:	441a      	add	r2, r3
 800dc54:	9e00      	ldr	r6, [sp, #0]
 800dc56:	9b03      	ldr	r3, [sp, #12]
 800dc58:	920d      	str	r2, [sp, #52]	@ 0x34
 800dc5a:	2400      	movs	r4, #0
 800dc5c:	e721      	b.n	800daa2 <_dtoa_r+0x71a>
 800dc5e:	9c08      	ldr	r4, [sp, #32]
 800dc60:	9e00      	ldr	r6, [sp, #0]
 800dc62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dc64:	e728      	b.n	800dab8 <_dtoa_r+0x730>
 800dc66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dc6a:	e751      	b.n	800db10 <_dtoa_r+0x788>
 800dc6c:	9a08      	ldr	r2, [sp, #32]
 800dc6e:	9902      	ldr	r1, [sp, #8]
 800dc70:	e750      	b.n	800db14 <_dtoa_r+0x78c>
 800dc72:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc76:	e751      	b.n	800db1c <_dtoa_r+0x794>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e779      	b.n	800db70 <_dtoa_r+0x7e8>
 800dc7c:	9b04      	ldr	r3, [sp, #16]
 800dc7e:	e777      	b.n	800db70 <_dtoa_r+0x7e8>
 800dc80:	2300      	movs	r3, #0
 800dc82:	9308      	str	r3, [sp, #32]
 800dc84:	e779      	b.n	800db7a <_dtoa_r+0x7f2>
 800dc86:	d093      	beq.n	800dbb0 <_dtoa_r+0x828>
 800dc88:	9a00      	ldr	r2, [sp, #0]
 800dc8a:	331c      	adds	r3, #28
 800dc8c:	441a      	add	r2, r3
 800dc8e:	9200      	str	r2, [sp, #0]
 800dc90:	9a06      	ldr	r2, [sp, #24]
 800dc92:	441a      	add	r2, r3
 800dc94:	441e      	add	r6, r3
 800dc96:	9206      	str	r2, [sp, #24]
 800dc98:	e78a      	b.n	800dbb0 <_dtoa_r+0x828>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	e7f4      	b.n	800dc88 <_dtoa_r+0x900>
 800dc9e:	9b03      	ldr	r3, [sp, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	46b8      	mov	r8, r7
 800dca4:	dc20      	bgt.n	800dce8 <_dtoa_r+0x960>
 800dca6:	469b      	mov	fp, r3
 800dca8:	9b07      	ldr	r3, [sp, #28]
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	dd1e      	ble.n	800dcec <_dtoa_r+0x964>
 800dcae:	f1bb 0f00 	cmp.w	fp, #0
 800dcb2:	f47f adb1 	bne.w	800d818 <_dtoa_r+0x490>
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	465b      	mov	r3, fp
 800dcba:	2205      	movs	r2, #5
 800dcbc:	4648      	mov	r0, r9
 800dcbe:	f000 fde1 	bl	800e884 <__multadd>
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	9802      	ldr	r0, [sp, #8]
 800dcc8:	f001 f836 	bl	800ed38 <__mcmp>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	f77f ada3 	ble.w	800d818 <_dtoa_r+0x490>
 800dcd2:	4656      	mov	r6, sl
 800dcd4:	2331      	movs	r3, #49	@ 0x31
 800dcd6:	f806 3b01 	strb.w	r3, [r6], #1
 800dcda:	f108 0801 	add.w	r8, r8, #1
 800dcde:	e59f      	b.n	800d820 <_dtoa_r+0x498>
 800dce0:	9c03      	ldr	r4, [sp, #12]
 800dce2:	46b8      	mov	r8, r7
 800dce4:	4625      	mov	r5, r4
 800dce6:	e7f4      	b.n	800dcd2 <_dtoa_r+0x94a>
 800dce8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	f000 8101 	beq.w	800def6 <_dtoa_r+0xb6e>
 800dcf4:	2e00      	cmp	r6, #0
 800dcf6:	dd05      	ble.n	800dd04 <_dtoa_r+0x97c>
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4632      	mov	r2, r6
 800dcfc:	4648      	mov	r0, r9
 800dcfe:	f000 ffaf 	bl	800ec60 <__lshift>
 800dd02:	4605      	mov	r5, r0
 800dd04:	9b08      	ldr	r3, [sp, #32]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d05c      	beq.n	800ddc4 <_dtoa_r+0xa3c>
 800dd0a:	6869      	ldr	r1, [r5, #4]
 800dd0c:	4648      	mov	r0, r9
 800dd0e:	f000 fd57 	bl	800e7c0 <_Balloc>
 800dd12:	4606      	mov	r6, r0
 800dd14:	b928      	cbnz	r0, 800dd22 <_dtoa_r+0x99a>
 800dd16:	4b82      	ldr	r3, [pc, #520]	@ (800df20 <_dtoa_r+0xb98>)
 800dd18:	4602      	mov	r2, r0
 800dd1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd1e:	f7ff bb4a 	b.w	800d3b6 <_dtoa_r+0x2e>
 800dd22:	692a      	ldr	r2, [r5, #16]
 800dd24:	3202      	adds	r2, #2
 800dd26:	0092      	lsls	r2, r2, #2
 800dd28:	f105 010c 	add.w	r1, r5, #12
 800dd2c:	300c      	adds	r0, #12
 800dd2e:	f7ff fa8c 	bl	800d24a <memcpy>
 800dd32:	2201      	movs	r2, #1
 800dd34:	4631      	mov	r1, r6
 800dd36:	4648      	mov	r0, r9
 800dd38:	f000 ff92 	bl	800ec60 <__lshift>
 800dd3c:	f10a 0301 	add.w	r3, sl, #1
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	eb0a 030b 	add.w	r3, sl, fp
 800dd46:	9308      	str	r3, [sp, #32]
 800dd48:	9b04      	ldr	r3, [sp, #16]
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	462f      	mov	r7, r5
 800dd50:	9306      	str	r3, [sp, #24]
 800dd52:	4605      	mov	r5, r0
 800dd54:	9b00      	ldr	r3, [sp, #0]
 800dd56:	9802      	ldr	r0, [sp, #8]
 800dd58:	4621      	mov	r1, r4
 800dd5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd5e:	f7ff fa8b 	bl	800d278 <quorem>
 800dd62:	4603      	mov	r3, r0
 800dd64:	3330      	adds	r3, #48	@ 0x30
 800dd66:	9003      	str	r0, [sp, #12]
 800dd68:	4639      	mov	r1, r7
 800dd6a:	9802      	ldr	r0, [sp, #8]
 800dd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd6e:	f000 ffe3 	bl	800ed38 <__mcmp>
 800dd72:	462a      	mov	r2, r5
 800dd74:	9004      	str	r0, [sp, #16]
 800dd76:	4621      	mov	r1, r4
 800dd78:	4648      	mov	r0, r9
 800dd7a:	f000 fff9 	bl	800ed70 <__mdiff>
 800dd7e:	68c2      	ldr	r2, [r0, #12]
 800dd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd82:	4606      	mov	r6, r0
 800dd84:	bb02      	cbnz	r2, 800ddc8 <_dtoa_r+0xa40>
 800dd86:	4601      	mov	r1, r0
 800dd88:	9802      	ldr	r0, [sp, #8]
 800dd8a:	f000 ffd5 	bl	800ed38 <__mcmp>
 800dd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd90:	4602      	mov	r2, r0
 800dd92:	4631      	mov	r1, r6
 800dd94:	4648      	mov	r0, r9
 800dd96:	920c      	str	r2, [sp, #48]	@ 0x30
 800dd98:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd9a:	f000 fd51 	bl	800e840 <_Bfree>
 800dd9e:	9b07      	ldr	r3, [sp, #28]
 800dda0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dda2:	9e00      	ldr	r6, [sp, #0]
 800dda4:	ea42 0103 	orr.w	r1, r2, r3
 800dda8:	9b06      	ldr	r3, [sp, #24]
 800ddaa:	4319      	orrs	r1, r3
 800ddac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddae:	d10d      	bne.n	800ddcc <_dtoa_r+0xa44>
 800ddb0:	2b39      	cmp	r3, #57	@ 0x39
 800ddb2:	d027      	beq.n	800de04 <_dtoa_r+0xa7c>
 800ddb4:	9a04      	ldr	r2, [sp, #16]
 800ddb6:	2a00      	cmp	r2, #0
 800ddb8:	dd01      	ble.n	800ddbe <_dtoa_r+0xa36>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	3331      	adds	r3, #49	@ 0x31
 800ddbe:	f88b 3000 	strb.w	r3, [fp]
 800ddc2:	e52e      	b.n	800d822 <_dtoa_r+0x49a>
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	e7b9      	b.n	800dd3c <_dtoa_r+0x9b4>
 800ddc8:	2201      	movs	r2, #1
 800ddca:	e7e2      	b.n	800dd92 <_dtoa_r+0xa0a>
 800ddcc:	9904      	ldr	r1, [sp, #16]
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	db04      	blt.n	800dddc <_dtoa_r+0xa54>
 800ddd2:	9807      	ldr	r0, [sp, #28]
 800ddd4:	4301      	orrs	r1, r0
 800ddd6:	9806      	ldr	r0, [sp, #24]
 800ddd8:	4301      	orrs	r1, r0
 800ddda:	d120      	bne.n	800de1e <_dtoa_r+0xa96>
 800dddc:	2a00      	cmp	r2, #0
 800ddde:	ddee      	ble.n	800ddbe <_dtoa_r+0xa36>
 800dde0:	9902      	ldr	r1, [sp, #8]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	2201      	movs	r2, #1
 800dde6:	4648      	mov	r0, r9
 800dde8:	f000 ff3a 	bl	800ec60 <__lshift>
 800ddec:	4621      	mov	r1, r4
 800ddee:	9002      	str	r0, [sp, #8]
 800ddf0:	f000 ffa2 	bl	800ed38 <__mcmp>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	9b00      	ldr	r3, [sp, #0]
 800ddf8:	dc02      	bgt.n	800de00 <_dtoa_r+0xa78>
 800ddfa:	d1e0      	bne.n	800ddbe <_dtoa_r+0xa36>
 800ddfc:	07da      	lsls	r2, r3, #31
 800ddfe:	d5de      	bpl.n	800ddbe <_dtoa_r+0xa36>
 800de00:	2b39      	cmp	r3, #57	@ 0x39
 800de02:	d1da      	bne.n	800ddba <_dtoa_r+0xa32>
 800de04:	2339      	movs	r3, #57	@ 0x39
 800de06:	f88b 3000 	strb.w	r3, [fp]
 800de0a:	4633      	mov	r3, r6
 800de0c:	461e      	mov	r6, r3
 800de0e:	3b01      	subs	r3, #1
 800de10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de14:	2a39      	cmp	r2, #57	@ 0x39
 800de16:	d04e      	beq.n	800deb6 <_dtoa_r+0xb2e>
 800de18:	3201      	adds	r2, #1
 800de1a:	701a      	strb	r2, [r3, #0]
 800de1c:	e501      	b.n	800d822 <_dtoa_r+0x49a>
 800de1e:	2a00      	cmp	r2, #0
 800de20:	dd03      	ble.n	800de2a <_dtoa_r+0xaa2>
 800de22:	2b39      	cmp	r3, #57	@ 0x39
 800de24:	d0ee      	beq.n	800de04 <_dtoa_r+0xa7c>
 800de26:	3301      	adds	r3, #1
 800de28:	e7c9      	b.n	800ddbe <_dtoa_r+0xa36>
 800de2a:	9a00      	ldr	r2, [sp, #0]
 800de2c:	9908      	ldr	r1, [sp, #32]
 800de2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800de32:	428a      	cmp	r2, r1
 800de34:	d028      	beq.n	800de88 <_dtoa_r+0xb00>
 800de36:	9902      	ldr	r1, [sp, #8]
 800de38:	2300      	movs	r3, #0
 800de3a:	220a      	movs	r2, #10
 800de3c:	4648      	mov	r0, r9
 800de3e:	f000 fd21 	bl	800e884 <__multadd>
 800de42:	42af      	cmp	r7, r5
 800de44:	9002      	str	r0, [sp, #8]
 800de46:	f04f 0300 	mov.w	r3, #0
 800de4a:	f04f 020a 	mov.w	r2, #10
 800de4e:	4639      	mov	r1, r7
 800de50:	4648      	mov	r0, r9
 800de52:	d107      	bne.n	800de64 <_dtoa_r+0xadc>
 800de54:	f000 fd16 	bl	800e884 <__multadd>
 800de58:	4607      	mov	r7, r0
 800de5a:	4605      	mov	r5, r0
 800de5c:	9b00      	ldr	r3, [sp, #0]
 800de5e:	3301      	adds	r3, #1
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	e777      	b.n	800dd54 <_dtoa_r+0x9cc>
 800de64:	f000 fd0e 	bl	800e884 <__multadd>
 800de68:	4629      	mov	r1, r5
 800de6a:	4607      	mov	r7, r0
 800de6c:	2300      	movs	r3, #0
 800de6e:	220a      	movs	r2, #10
 800de70:	4648      	mov	r0, r9
 800de72:	f000 fd07 	bl	800e884 <__multadd>
 800de76:	4605      	mov	r5, r0
 800de78:	e7f0      	b.n	800de5c <_dtoa_r+0xad4>
 800de7a:	f1bb 0f00 	cmp.w	fp, #0
 800de7e:	bfcc      	ite	gt
 800de80:	465e      	movgt	r6, fp
 800de82:	2601      	movle	r6, #1
 800de84:	4456      	add	r6, sl
 800de86:	2700      	movs	r7, #0
 800de88:	9902      	ldr	r1, [sp, #8]
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	2201      	movs	r2, #1
 800de8e:	4648      	mov	r0, r9
 800de90:	f000 fee6 	bl	800ec60 <__lshift>
 800de94:	4621      	mov	r1, r4
 800de96:	9002      	str	r0, [sp, #8]
 800de98:	f000 ff4e 	bl	800ed38 <__mcmp>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	dcb4      	bgt.n	800de0a <_dtoa_r+0xa82>
 800dea0:	d102      	bne.n	800dea8 <_dtoa_r+0xb20>
 800dea2:	9b00      	ldr	r3, [sp, #0]
 800dea4:	07db      	lsls	r3, r3, #31
 800dea6:	d4b0      	bmi.n	800de0a <_dtoa_r+0xa82>
 800dea8:	4633      	mov	r3, r6
 800deaa:	461e      	mov	r6, r3
 800deac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800deb0:	2a30      	cmp	r2, #48	@ 0x30
 800deb2:	d0fa      	beq.n	800deaa <_dtoa_r+0xb22>
 800deb4:	e4b5      	b.n	800d822 <_dtoa_r+0x49a>
 800deb6:	459a      	cmp	sl, r3
 800deb8:	d1a8      	bne.n	800de0c <_dtoa_r+0xa84>
 800deba:	2331      	movs	r3, #49	@ 0x31
 800debc:	f108 0801 	add.w	r8, r8, #1
 800dec0:	f88a 3000 	strb.w	r3, [sl]
 800dec4:	e4ad      	b.n	800d822 <_dtoa_r+0x49a>
 800dec6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dec8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800df24 <_dtoa_r+0xb9c>
 800decc:	b11b      	cbz	r3, 800ded6 <_dtoa_r+0xb4e>
 800dece:	f10a 0308 	add.w	r3, sl, #8
 800ded2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	4650      	mov	r0, sl
 800ded8:	b017      	add	sp, #92	@ 0x5c
 800deda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dede:	9b07      	ldr	r3, [sp, #28]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	f77f ae2e 	ble.w	800db42 <_dtoa_r+0x7ba>
 800dee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dee8:	9308      	str	r3, [sp, #32]
 800deea:	2001      	movs	r0, #1
 800deec:	e64d      	b.n	800db8a <_dtoa_r+0x802>
 800deee:	f1bb 0f00 	cmp.w	fp, #0
 800def2:	f77f aed9 	ble.w	800dca8 <_dtoa_r+0x920>
 800def6:	4656      	mov	r6, sl
 800def8:	9802      	ldr	r0, [sp, #8]
 800defa:	4621      	mov	r1, r4
 800defc:	f7ff f9bc 	bl	800d278 <quorem>
 800df00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800df04:	f806 3b01 	strb.w	r3, [r6], #1
 800df08:	eba6 020a 	sub.w	r2, r6, sl
 800df0c:	4593      	cmp	fp, r2
 800df0e:	ddb4      	ble.n	800de7a <_dtoa_r+0xaf2>
 800df10:	9902      	ldr	r1, [sp, #8]
 800df12:	2300      	movs	r3, #0
 800df14:	220a      	movs	r2, #10
 800df16:	4648      	mov	r0, r9
 800df18:	f000 fcb4 	bl	800e884 <__multadd>
 800df1c:	9002      	str	r0, [sp, #8]
 800df1e:	e7eb      	b.n	800def8 <_dtoa_r+0xb70>
 800df20:	0801086a 	.word	0x0801086a
 800df24:	080107ee 	.word	0x080107ee

0800df28 <_free_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4605      	mov	r5, r0
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d041      	beq.n	800dfb4 <_free_r+0x8c>
 800df30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df34:	1f0c      	subs	r4, r1, #4
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfb8      	it	lt
 800df3a:	18e4      	addlt	r4, r4, r3
 800df3c:	f000 fc34 	bl	800e7a8 <__malloc_lock>
 800df40:	4a1d      	ldr	r2, [pc, #116]	@ (800dfb8 <_free_r+0x90>)
 800df42:	6813      	ldr	r3, [r2, #0]
 800df44:	b933      	cbnz	r3, 800df54 <_free_r+0x2c>
 800df46:	6063      	str	r3, [r4, #4]
 800df48:	6014      	str	r4, [r2, #0]
 800df4a:	4628      	mov	r0, r5
 800df4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df50:	f000 bc30 	b.w	800e7b4 <__malloc_unlock>
 800df54:	42a3      	cmp	r3, r4
 800df56:	d908      	bls.n	800df6a <_free_r+0x42>
 800df58:	6820      	ldr	r0, [r4, #0]
 800df5a:	1821      	adds	r1, r4, r0
 800df5c:	428b      	cmp	r3, r1
 800df5e:	bf01      	itttt	eq
 800df60:	6819      	ldreq	r1, [r3, #0]
 800df62:	685b      	ldreq	r3, [r3, #4]
 800df64:	1809      	addeq	r1, r1, r0
 800df66:	6021      	streq	r1, [r4, #0]
 800df68:	e7ed      	b.n	800df46 <_free_r+0x1e>
 800df6a:	461a      	mov	r2, r3
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	b10b      	cbz	r3, 800df74 <_free_r+0x4c>
 800df70:	42a3      	cmp	r3, r4
 800df72:	d9fa      	bls.n	800df6a <_free_r+0x42>
 800df74:	6811      	ldr	r1, [r2, #0]
 800df76:	1850      	adds	r0, r2, r1
 800df78:	42a0      	cmp	r0, r4
 800df7a:	d10b      	bne.n	800df94 <_free_r+0x6c>
 800df7c:	6820      	ldr	r0, [r4, #0]
 800df7e:	4401      	add	r1, r0
 800df80:	1850      	adds	r0, r2, r1
 800df82:	4283      	cmp	r3, r0
 800df84:	6011      	str	r1, [r2, #0]
 800df86:	d1e0      	bne.n	800df4a <_free_r+0x22>
 800df88:	6818      	ldr	r0, [r3, #0]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	6053      	str	r3, [r2, #4]
 800df8e:	4408      	add	r0, r1
 800df90:	6010      	str	r0, [r2, #0]
 800df92:	e7da      	b.n	800df4a <_free_r+0x22>
 800df94:	d902      	bls.n	800df9c <_free_r+0x74>
 800df96:	230c      	movs	r3, #12
 800df98:	602b      	str	r3, [r5, #0]
 800df9a:	e7d6      	b.n	800df4a <_free_r+0x22>
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	1821      	adds	r1, r4, r0
 800dfa0:	428b      	cmp	r3, r1
 800dfa2:	bf04      	itt	eq
 800dfa4:	6819      	ldreq	r1, [r3, #0]
 800dfa6:	685b      	ldreq	r3, [r3, #4]
 800dfa8:	6063      	str	r3, [r4, #4]
 800dfaa:	bf04      	itt	eq
 800dfac:	1809      	addeq	r1, r1, r0
 800dfae:	6021      	streq	r1, [r4, #0]
 800dfb0:	6054      	str	r4, [r2, #4]
 800dfb2:	e7ca      	b.n	800df4a <_free_r+0x22>
 800dfb4:	bd38      	pop	{r3, r4, r5, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20009650 	.word	0x20009650

0800dfbc <rshift>:
 800dfbc:	6903      	ldr	r3, [r0, #16]
 800dfbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dfc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dfca:	f100 0414 	add.w	r4, r0, #20
 800dfce:	dd45      	ble.n	800e05c <rshift+0xa0>
 800dfd0:	f011 011f 	ands.w	r1, r1, #31
 800dfd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dfd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dfdc:	d10c      	bne.n	800dff8 <rshift+0x3c>
 800dfde:	f100 0710 	add.w	r7, r0, #16
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	42b1      	cmp	r1, r6
 800dfe6:	d334      	bcc.n	800e052 <rshift+0x96>
 800dfe8:	1a9b      	subs	r3, r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	1eea      	subs	r2, r5, #3
 800dfee:	4296      	cmp	r6, r2
 800dff0:	bf38      	it	cc
 800dff2:	2300      	movcc	r3, #0
 800dff4:	4423      	add	r3, r4
 800dff6:	e015      	b.n	800e024 <rshift+0x68>
 800dff8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dffc:	f1c1 0820 	rsb	r8, r1, #32
 800e000:	40cf      	lsrs	r7, r1
 800e002:	f105 0e04 	add.w	lr, r5, #4
 800e006:	46a1      	mov	r9, r4
 800e008:	4576      	cmp	r6, lr
 800e00a:	46f4      	mov	ip, lr
 800e00c:	d815      	bhi.n	800e03a <rshift+0x7e>
 800e00e:	1a9a      	subs	r2, r3, r2
 800e010:	0092      	lsls	r2, r2, #2
 800e012:	3a04      	subs	r2, #4
 800e014:	3501      	adds	r5, #1
 800e016:	42ae      	cmp	r6, r5
 800e018:	bf38      	it	cc
 800e01a:	2200      	movcc	r2, #0
 800e01c:	18a3      	adds	r3, r4, r2
 800e01e:	50a7      	str	r7, [r4, r2]
 800e020:	b107      	cbz	r7, 800e024 <rshift+0x68>
 800e022:	3304      	adds	r3, #4
 800e024:	1b1a      	subs	r2, r3, r4
 800e026:	42a3      	cmp	r3, r4
 800e028:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e02c:	bf08      	it	eq
 800e02e:	2300      	moveq	r3, #0
 800e030:	6102      	str	r2, [r0, #16]
 800e032:	bf08      	it	eq
 800e034:	6143      	streq	r3, [r0, #20]
 800e036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e03a:	f8dc c000 	ldr.w	ip, [ip]
 800e03e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e042:	ea4c 0707 	orr.w	r7, ip, r7
 800e046:	f849 7b04 	str.w	r7, [r9], #4
 800e04a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e04e:	40cf      	lsrs	r7, r1
 800e050:	e7da      	b.n	800e008 <rshift+0x4c>
 800e052:	f851 cb04 	ldr.w	ip, [r1], #4
 800e056:	f847 cf04 	str.w	ip, [r7, #4]!
 800e05a:	e7c3      	b.n	800dfe4 <rshift+0x28>
 800e05c:	4623      	mov	r3, r4
 800e05e:	e7e1      	b.n	800e024 <rshift+0x68>

0800e060 <__hexdig_fun>:
 800e060:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e064:	2b09      	cmp	r3, #9
 800e066:	d802      	bhi.n	800e06e <__hexdig_fun+0xe>
 800e068:	3820      	subs	r0, #32
 800e06a:	b2c0      	uxtb	r0, r0
 800e06c:	4770      	bx	lr
 800e06e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e072:	2b05      	cmp	r3, #5
 800e074:	d801      	bhi.n	800e07a <__hexdig_fun+0x1a>
 800e076:	3847      	subs	r0, #71	@ 0x47
 800e078:	e7f7      	b.n	800e06a <__hexdig_fun+0xa>
 800e07a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e07e:	2b05      	cmp	r3, #5
 800e080:	d801      	bhi.n	800e086 <__hexdig_fun+0x26>
 800e082:	3827      	subs	r0, #39	@ 0x27
 800e084:	e7f1      	b.n	800e06a <__hexdig_fun+0xa>
 800e086:	2000      	movs	r0, #0
 800e088:	4770      	bx	lr
	...

0800e08c <__gethex>:
 800e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e090:	b085      	sub	sp, #20
 800e092:	468a      	mov	sl, r1
 800e094:	9302      	str	r3, [sp, #8]
 800e096:	680b      	ldr	r3, [r1, #0]
 800e098:	9001      	str	r0, [sp, #4]
 800e09a:	4690      	mov	r8, r2
 800e09c:	1c9c      	adds	r4, r3, #2
 800e09e:	46a1      	mov	r9, r4
 800e0a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0a4:	2830      	cmp	r0, #48	@ 0x30
 800e0a6:	d0fa      	beq.n	800e09e <__gethex+0x12>
 800e0a8:	eba9 0303 	sub.w	r3, r9, r3
 800e0ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800e0b0:	f7ff ffd6 	bl	800e060 <__hexdig_fun>
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d168      	bne.n	800e18c <__gethex+0x100>
 800e0ba:	49a0      	ldr	r1, [pc, #640]	@ (800e33c <__gethex+0x2b0>)
 800e0bc:	2201      	movs	r2, #1
 800e0be:	4648      	mov	r0, r9
 800e0c0:	f7ff f83a 	bl	800d138 <strncmp>
 800e0c4:	4607      	mov	r7, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d167      	bne.n	800e19a <__gethex+0x10e>
 800e0ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e0ce:	4626      	mov	r6, r4
 800e0d0:	f7ff ffc6 	bl	800e060 <__hexdig_fun>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d062      	beq.n	800e19e <__gethex+0x112>
 800e0d8:	4623      	mov	r3, r4
 800e0da:	7818      	ldrb	r0, [r3, #0]
 800e0dc:	2830      	cmp	r0, #48	@ 0x30
 800e0de:	4699      	mov	r9, r3
 800e0e0:	f103 0301 	add.w	r3, r3, #1
 800e0e4:	d0f9      	beq.n	800e0da <__gethex+0x4e>
 800e0e6:	f7ff ffbb 	bl	800e060 <__hexdig_fun>
 800e0ea:	fab0 f580 	clz	r5, r0
 800e0ee:	096d      	lsrs	r5, r5, #5
 800e0f0:	f04f 0b01 	mov.w	fp, #1
 800e0f4:	464a      	mov	r2, r9
 800e0f6:	4616      	mov	r6, r2
 800e0f8:	3201      	adds	r2, #1
 800e0fa:	7830      	ldrb	r0, [r6, #0]
 800e0fc:	f7ff ffb0 	bl	800e060 <__hexdig_fun>
 800e100:	2800      	cmp	r0, #0
 800e102:	d1f8      	bne.n	800e0f6 <__gethex+0x6a>
 800e104:	498d      	ldr	r1, [pc, #564]	@ (800e33c <__gethex+0x2b0>)
 800e106:	2201      	movs	r2, #1
 800e108:	4630      	mov	r0, r6
 800e10a:	f7ff f815 	bl	800d138 <strncmp>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d13f      	bne.n	800e192 <__gethex+0x106>
 800e112:	b944      	cbnz	r4, 800e126 <__gethex+0x9a>
 800e114:	1c74      	adds	r4, r6, #1
 800e116:	4622      	mov	r2, r4
 800e118:	4616      	mov	r6, r2
 800e11a:	3201      	adds	r2, #1
 800e11c:	7830      	ldrb	r0, [r6, #0]
 800e11e:	f7ff ff9f 	bl	800e060 <__hexdig_fun>
 800e122:	2800      	cmp	r0, #0
 800e124:	d1f8      	bne.n	800e118 <__gethex+0x8c>
 800e126:	1ba4      	subs	r4, r4, r6
 800e128:	00a7      	lsls	r7, r4, #2
 800e12a:	7833      	ldrb	r3, [r6, #0]
 800e12c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e130:	2b50      	cmp	r3, #80	@ 0x50
 800e132:	d13e      	bne.n	800e1b2 <__gethex+0x126>
 800e134:	7873      	ldrb	r3, [r6, #1]
 800e136:	2b2b      	cmp	r3, #43	@ 0x2b
 800e138:	d033      	beq.n	800e1a2 <__gethex+0x116>
 800e13a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e13c:	d034      	beq.n	800e1a8 <__gethex+0x11c>
 800e13e:	1c71      	adds	r1, r6, #1
 800e140:	2400      	movs	r4, #0
 800e142:	7808      	ldrb	r0, [r1, #0]
 800e144:	f7ff ff8c 	bl	800e060 <__hexdig_fun>
 800e148:	1e43      	subs	r3, r0, #1
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	2b18      	cmp	r3, #24
 800e14e:	d830      	bhi.n	800e1b2 <__gethex+0x126>
 800e150:	f1a0 0210 	sub.w	r2, r0, #16
 800e154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e158:	f7ff ff82 	bl	800e060 <__hexdig_fun>
 800e15c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e160:	fa5f fc8c 	uxtb.w	ip, ip
 800e164:	f1bc 0f18 	cmp.w	ip, #24
 800e168:	f04f 030a 	mov.w	r3, #10
 800e16c:	d91e      	bls.n	800e1ac <__gethex+0x120>
 800e16e:	b104      	cbz	r4, 800e172 <__gethex+0xe6>
 800e170:	4252      	negs	r2, r2
 800e172:	4417      	add	r7, r2
 800e174:	f8ca 1000 	str.w	r1, [sl]
 800e178:	b1ed      	cbz	r5, 800e1b6 <__gethex+0x12a>
 800e17a:	f1bb 0f00 	cmp.w	fp, #0
 800e17e:	bf0c      	ite	eq
 800e180:	2506      	moveq	r5, #6
 800e182:	2500      	movne	r5, #0
 800e184:	4628      	mov	r0, r5
 800e186:	b005      	add	sp, #20
 800e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18c:	2500      	movs	r5, #0
 800e18e:	462c      	mov	r4, r5
 800e190:	e7b0      	b.n	800e0f4 <__gethex+0x68>
 800e192:	2c00      	cmp	r4, #0
 800e194:	d1c7      	bne.n	800e126 <__gethex+0x9a>
 800e196:	4627      	mov	r7, r4
 800e198:	e7c7      	b.n	800e12a <__gethex+0x9e>
 800e19a:	464e      	mov	r6, r9
 800e19c:	462f      	mov	r7, r5
 800e19e:	2501      	movs	r5, #1
 800e1a0:	e7c3      	b.n	800e12a <__gethex+0x9e>
 800e1a2:	2400      	movs	r4, #0
 800e1a4:	1cb1      	adds	r1, r6, #2
 800e1a6:	e7cc      	b.n	800e142 <__gethex+0xb6>
 800e1a8:	2401      	movs	r4, #1
 800e1aa:	e7fb      	b.n	800e1a4 <__gethex+0x118>
 800e1ac:	fb03 0002 	mla	r0, r3, r2, r0
 800e1b0:	e7ce      	b.n	800e150 <__gethex+0xc4>
 800e1b2:	4631      	mov	r1, r6
 800e1b4:	e7de      	b.n	800e174 <__gethex+0xe8>
 800e1b6:	eba6 0309 	sub.w	r3, r6, r9
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	4629      	mov	r1, r5
 800e1be:	2b07      	cmp	r3, #7
 800e1c0:	dc0a      	bgt.n	800e1d8 <__gethex+0x14c>
 800e1c2:	9801      	ldr	r0, [sp, #4]
 800e1c4:	f000 fafc 	bl	800e7c0 <_Balloc>
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	b940      	cbnz	r0, 800e1de <__gethex+0x152>
 800e1cc:	4b5c      	ldr	r3, [pc, #368]	@ (800e340 <__gethex+0x2b4>)
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	21e4      	movs	r1, #228	@ 0xe4
 800e1d2:	485c      	ldr	r0, [pc, #368]	@ (800e344 <__gethex+0x2b8>)
 800e1d4:	f001 fa2c 	bl	800f630 <__assert_func>
 800e1d8:	3101      	adds	r1, #1
 800e1da:	105b      	asrs	r3, r3, #1
 800e1dc:	e7ef      	b.n	800e1be <__gethex+0x132>
 800e1de:	f100 0a14 	add.w	sl, r0, #20
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	4655      	mov	r5, sl
 800e1e6:	469b      	mov	fp, r3
 800e1e8:	45b1      	cmp	r9, r6
 800e1ea:	d337      	bcc.n	800e25c <__gethex+0x1d0>
 800e1ec:	f845 bb04 	str.w	fp, [r5], #4
 800e1f0:	eba5 050a 	sub.w	r5, r5, sl
 800e1f4:	10ad      	asrs	r5, r5, #2
 800e1f6:	6125      	str	r5, [r4, #16]
 800e1f8:	4658      	mov	r0, fp
 800e1fa:	f000 fbd3 	bl	800e9a4 <__hi0bits>
 800e1fe:	016d      	lsls	r5, r5, #5
 800e200:	f8d8 6000 	ldr.w	r6, [r8]
 800e204:	1a2d      	subs	r5, r5, r0
 800e206:	42b5      	cmp	r5, r6
 800e208:	dd54      	ble.n	800e2b4 <__gethex+0x228>
 800e20a:	1bad      	subs	r5, r5, r6
 800e20c:	4629      	mov	r1, r5
 800e20e:	4620      	mov	r0, r4
 800e210:	f000 ff5f 	bl	800f0d2 <__any_on>
 800e214:	4681      	mov	r9, r0
 800e216:	b178      	cbz	r0, 800e238 <__gethex+0x1ac>
 800e218:	1e6b      	subs	r3, r5, #1
 800e21a:	1159      	asrs	r1, r3, #5
 800e21c:	f003 021f 	and.w	r2, r3, #31
 800e220:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e224:	f04f 0901 	mov.w	r9, #1
 800e228:	fa09 f202 	lsl.w	r2, r9, r2
 800e22c:	420a      	tst	r2, r1
 800e22e:	d003      	beq.n	800e238 <__gethex+0x1ac>
 800e230:	454b      	cmp	r3, r9
 800e232:	dc36      	bgt.n	800e2a2 <__gethex+0x216>
 800e234:	f04f 0902 	mov.w	r9, #2
 800e238:	4629      	mov	r1, r5
 800e23a:	4620      	mov	r0, r4
 800e23c:	f7ff febe 	bl	800dfbc <rshift>
 800e240:	442f      	add	r7, r5
 800e242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e246:	42bb      	cmp	r3, r7
 800e248:	da42      	bge.n	800e2d0 <__gethex+0x244>
 800e24a:	9801      	ldr	r0, [sp, #4]
 800e24c:	4621      	mov	r1, r4
 800e24e:	f000 faf7 	bl	800e840 <_Bfree>
 800e252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e254:	2300      	movs	r3, #0
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	25a3      	movs	r5, #163	@ 0xa3
 800e25a:	e793      	b.n	800e184 <__gethex+0xf8>
 800e25c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e260:	2a2e      	cmp	r2, #46	@ 0x2e
 800e262:	d012      	beq.n	800e28a <__gethex+0x1fe>
 800e264:	2b20      	cmp	r3, #32
 800e266:	d104      	bne.n	800e272 <__gethex+0x1e6>
 800e268:	f845 bb04 	str.w	fp, [r5], #4
 800e26c:	f04f 0b00 	mov.w	fp, #0
 800e270:	465b      	mov	r3, fp
 800e272:	7830      	ldrb	r0, [r6, #0]
 800e274:	9303      	str	r3, [sp, #12]
 800e276:	f7ff fef3 	bl	800e060 <__hexdig_fun>
 800e27a:	9b03      	ldr	r3, [sp, #12]
 800e27c:	f000 000f 	and.w	r0, r0, #15
 800e280:	4098      	lsls	r0, r3
 800e282:	ea4b 0b00 	orr.w	fp, fp, r0
 800e286:	3304      	adds	r3, #4
 800e288:	e7ae      	b.n	800e1e8 <__gethex+0x15c>
 800e28a:	45b1      	cmp	r9, r6
 800e28c:	d8ea      	bhi.n	800e264 <__gethex+0x1d8>
 800e28e:	492b      	ldr	r1, [pc, #172]	@ (800e33c <__gethex+0x2b0>)
 800e290:	9303      	str	r3, [sp, #12]
 800e292:	2201      	movs	r2, #1
 800e294:	4630      	mov	r0, r6
 800e296:	f7fe ff4f 	bl	800d138 <strncmp>
 800e29a:	9b03      	ldr	r3, [sp, #12]
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d1e1      	bne.n	800e264 <__gethex+0x1d8>
 800e2a0:	e7a2      	b.n	800e1e8 <__gethex+0x15c>
 800e2a2:	1ea9      	subs	r1, r5, #2
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 ff14 	bl	800f0d2 <__any_on>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d0c2      	beq.n	800e234 <__gethex+0x1a8>
 800e2ae:	f04f 0903 	mov.w	r9, #3
 800e2b2:	e7c1      	b.n	800e238 <__gethex+0x1ac>
 800e2b4:	da09      	bge.n	800e2ca <__gethex+0x23e>
 800e2b6:	1b75      	subs	r5, r6, r5
 800e2b8:	4621      	mov	r1, r4
 800e2ba:	9801      	ldr	r0, [sp, #4]
 800e2bc:	462a      	mov	r2, r5
 800e2be:	f000 fccf 	bl	800ec60 <__lshift>
 800e2c2:	1b7f      	subs	r7, r7, r5
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	f100 0a14 	add.w	sl, r0, #20
 800e2ca:	f04f 0900 	mov.w	r9, #0
 800e2ce:	e7b8      	b.n	800e242 <__gethex+0x1b6>
 800e2d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e2d4:	42bd      	cmp	r5, r7
 800e2d6:	dd6f      	ble.n	800e3b8 <__gethex+0x32c>
 800e2d8:	1bed      	subs	r5, r5, r7
 800e2da:	42ae      	cmp	r6, r5
 800e2dc:	dc34      	bgt.n	800e348 <__gethex+0x2bc>
 800e2de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d022      	beq.n	800e32c <__gethex+0x2a0>
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d024      	beq.n	800e334 <__gethex+0x2a8>
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d115      	bne.n	800e31a <__gethex+0x28e>
 800e2ee:	42ae      	cmp	r6, r5
 800e2f0:	d113      	bne.n	800e31a <__gethex+0x28e>
 800e2f2:	2e01      	cmp	r6, #1
 800e2f4:	d10b      	bne.n	800e30e <__gethex+0x282>
 800e2f6:	9a02      	ldr	r2, [sp, #8]
 800e2f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	2301      	movs	r3, #1
 800e300:	6123      	str	r3, [r4, #16]
 800e302:	f8ca 3000 	str.w	r3, [sl]
 800e306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e308:	2562      	movs	r5, #98	@ 0x62
 800e30a:	601c      	str	r4, [r3, #0]
 800e30c:	e73a      	b.n	800e184 <__gethex+0xf8>
 800e30e:	1e71      	subs	r1, r6, #1
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fede 	bl	800f0d2 <__any_on>
 800e316:	2800      	cmp	r0, #0
 800e318:	d1ed      	bne.n	800e2f6 <__gethex+0x26a>
 800e31a:	9801      	ldr	r0, [sp, #4]
 800e31c:	4621      	mov	r1, r4
 800e31e:	f000 fa8f 	bl	800e840 <_Bfree>
 800e322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e324:	2300      	movs	r3, #0
 800e326:	6013      	str	r3, [r2, #0]
 800e328:	2550      	movs	r5, #80	@ 0x50
 800e32a:	e72b      	b.n	800e184 <__gethex+0xf8>
 800e32c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1f3      	bne.n	800e31a <__gethex+0x28e>
 800e332:	e7e0      	b.n	800e2f6 <__gethex+0x26a>
 800e334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1dd      	bne.n	800e2f6 <__gethex+0x26a>
 800e33a:	e7ee      	b.n	800e31a <__gethex+0x28e>
 800e33c:	080107b0 	.word	0x080107b0
 800e340:	0801086a 	.word	0x0801086a
 800e344:	0801087b 	.word	0x0801087b
 800e348:	1e6f      	subs	r7, r5, #1
 800e34a:	f1b9 0f00 	cmp.w	r9, #0
 800e34e:	d130      	bne.n	800e3b2 <__gethex+0x326>
 800e350:	b127      	cbz	r7, 800e35c <__gethex+0x2d0>
 800e352:	4639      	mov	r1, r7
 800e354:	4620      	mov	r0, r4
 800e356:	f000 febc 	bl	800f0d2 <__any_on>
 800e35a:	4681      	mov	r9, r0
 800e35c:	117a      	asrs	r2, r7, #5
 800e35e:	2301      	movs	r3, #1
 800e360:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e364:	f007 071f 	and.w	r7, r7, #31
 800e368:	40bb      	lsls	r3, r7
 800e36a:	4213      	tst	r3, r2
 800e36c:	4629      	mov	r1, r5
 800e36e:	4620      	mov	r0, r4
 800e370:	bf18      	it	ne
 800e372:	f049 0902 	orrne.w	r9, r9, #2
 800e376:	f7ff fe21 	bl	800dfbc <rshift>
 800e37a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e37e:	1b76      	subs	r6, r6, r5
 800e380:	2502      	movs	r5, #2
 800e382:	f1b9 0f00 	cmp.w	r9, #0
 800e386:	d047      	beq.n	800e418 <__gethex+0x38c>
 800e388:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	d015      	beq.n	800e3bc <__gethex+0x330>
 800e390:	2b03      	cmp	r3, #3
 800e392:	d017      	beq.n	800e3c4 <__gethex+0x338>
 800e394:	2b01      	cmp	r3, #1
 800e396:	d109      	bne.n	800e3ac <__gethex+0x320>
 800e398:	f019 0f02 	tst.w	r9, #2
 800e39c:	d006      	beq.n	800e3ac <__gethex+0x320>
 800e39e:	f8da 3000 	ldr.w	r3, [sl]
 800e3a2:	ea49 0903 	orr.w	r9, r9, r3
 800e3a6:	f019 0f01 	tst.w	r9, #1
 800e3aa:	d10e      	bne.n	800e3ca <__gethex+0x33e>
 800e3ac:	f045 0510 	orr.w	r5, r5, #16
 800e3b0:	e032      	b.n	800e418 <__gethex+0x38c>
 800e3b2:	f04f 0901 	mov.w	r9, #1
 800e3b6:	e7d1      	b.n	800e35c <__gethex+0x2d0>
 800e3b8:	2501      	movs	r5, #1
 800e3ba:	e7e2      	b.n	800e382 <__gethex+0x2f6>
 800e3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3be:	f1c3 0301 	rsb	r3, r3, #1
 800e3c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0f0      	beq.n	800e3ac <__gethex+0x320>
 800e3ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e3ce:	f104 0314 	add.w	r3, r4, #20
 800e3d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e3d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e3da:	f04f 0c00 	mov.w	ip, #0
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e3e8:	d01b      	beq.n	800e422 <__gethex+0x396>
 800e3ea:	3201      	adds	r2, #1
 800e3ec:	6002      	str	r2, [r0, #0]
 800e3ee:	2d02      	cmp	r5, #2
 800e3f0:	f104 0314 	add.w	r3, r4, #20
 800e3f4:	d13c      	bne.n	800e470 <__gethex+0x3e4>
 800e3f6:	f8d8 2000 	ldr.w	r2, [r8]
 800e3fa:	3a01      	subs	r2, #1
 800e3fc:	42b2      	cmp	r2, r6
 800e3fe:	d109      	bne.n	800e414 <__gethex+0x388>
 800e400:	1171      	asrs	r1, r6, #5
 800e402:	2201      	movs	r2, #1
 800e404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e408:	f006 061f 	and.w	r6, r6, #31
 800e40c:	fa02 f606 	lsl.w	r6, r2, r6
 800e410:	421e      	tst	r6, r3
 800e412:	d13a      	bne.n	800e48a <__gethex+0x3fe>
 800e414:	f045 0520 	orr.w	r5, r5, #32
 800e418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e41a:	601c      	str	r4, [r3, #0]
 800e41c:	9b02      	ldr	r3, [sp, #8]
 800e41e:	601f      	str	r7, [r3, #0]
 800e420:	e6b0      	b.n	800e184 <__gethex+0xf8>
 800e422:	4299      	cmp	r1, r3
 800e424:	f843 cc04 	str.w	ip, [r3, #-4]
 800e428:	d8d9      	bhi.n	800e3de <__gethex+0x352>
 800e42a:	68a3      	ldr	r3, [r4, #8]
 800e42c:	459b      	cmp	fp, r3
 800e42e:	db17      	blt.n	800e460 <__gethex+0x3d4>
 800e430:	6861      	ldr	r1, [r4, #4]
 800e432:	9801      	ldr	r0, [sp, #4]
 800e434:	3101      	adds	r1, #1
 800e436:	f000 f9c3 	bl	800e7c0 <_Balloc>
 800e43a:	4681      	mov	r9, r0
 800e43c:	b918      	cbnz	r0, 800e446 <__gethex+0x3ba>
 800e43e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4a8 <__gethex+0x41c>)
 800e440:	4602      	mov	r2, r0
 800e442:	2184      	movs	r1, #132	@ 0x84
 800e444:	e6c5      	b.n	800e1d2 <__gethex+0x146>
 800e446:	6922      	ldr	r2, [r4, #16]
 800e448:	3202      	adds	r2, #2
 800e44a:	f104 010c 	add.w	r1, r4, #12
 800e44e:	0092      	lsls	r2, r2, #2
 800e450:	300c      	adds	r0, #12
 800e452:	f7fe fefa 	bl	800d24a <memcpy>
 800e456:	4621      	mov	r1, r4
 800e458:	9801      	ldr	r0, [sp, #4]
 800e45a:	f000 f9f1 	bl	800e840 <_Bfree>
 800e45e:	464c      	mov	r4, r9
 800e460:	6923      	ldr	r3, [r4, #16]
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e468:	6122      	str	r2, [r4, #16]
 800e46a:	2201      	movs	r2, #1
 800e46c:	615a      	str	r2, [r3, #20]
 800e46e:	e7be      	b.n	800e3ee <__gethex+0x362>
 800e470:	6922      	ldr	r2, [r4, #16]
 800e472:	455a      	cmp	r2, fp
 800e474:	dd0b      	ble.n	800e48e <__gethex+0x402>
 800e476:	2101      	movs	r1, #1
 800e478:	4620      	mov	r0, r4
 800e47a:	f7ff fd9f 	bl	800dfbc <rshift>
 800e47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e482:	3701      	adds	r7, #1
 800e484:	42bb      	cmp	r3, r7
 800e486:	f6ff aee0 	blt.w	800e24a <__gethex+0x1be>
 800e48a:	2501      	movs	r5, #1
 800e48c:	e7c2      	b.n	800e414 <__gethex+0x388>
 800e48e:	f016 061f 	ands.w	r6, r6, #31
 800e492:	d0fa      	beq.n	800e48a <__gethex+0x3fe>
 800e494:	4453      	add	r3, sl
 800e496:	f1c6 0620 	rsb	r6, r6, #32
 800e49a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e49e:	f000 fa81 	bl	800e9a4 <__hi0bits>
 800e4a2:	42b0      	cmp	r0, r6
 800e4a4:	dbe7      	blt.n	800e476 <__gethex+0x3ea>
 800e4a6:	e7f0      	b.n	800e48a <__gethex+0x3fe>
 800e4a8:	0801086a 	.word	0x0801086a

0800e4ac <L_shift>:
 800e4ac:	f1c2 0208 	rsb	r2, r2, #8
 800e4b0:	0092      	lsls	r2, r2, #2
 800e4b2:	b570      	push	{r4, r5, r6, lr}
 800e4b4:	f1c2 0620 	rsb	r6, r2, #32
 800e4b8:	6843      	ldr	r3, [r0, #4]
 800e4ba:	6804      	ldr	r4, [r0, #0]
 800e4bc:	fa03 f506 	lsl.w	r5, r3, r6
 800e4c0:	432c      	orrs	r4, r5
 800e4c2:	40d3      	lsrs	r3, r2
 800e4c4:	6004      	str	r4, [r0, #0]
 800e4c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e4ca:	4288      	cmp	r0, r1
 800e4cc:	d3f4      	bcc.n	800e4b8 <L_shift+0xc>
 800e4ce:	bd70      	pop	{r4, r5, r6, pc}

0800e4d0 <__match>:
 800e4d0:	b530      	push	{r4, r5, lr}
 800e4d2:	6803      	ldr	r3, [r0, #0]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4da:	b914      	cbnz	r4, 800e4e2 <__match+0x12>
 800e4dc:	6003      	str	r3, [r0, #0]
 800e4de:	2001      	movs	r0, #1
 800e4e0:	bd30      	pop	{r4, r5, pc}
 800e4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e4ea:	2d19      	cmp	r5, #25
 800e4ec:	bf98      	it	ls
 800e4ee:	3220      	addls	r2, #32
 800e4f0:	42a2      	cmp	r2, r4
 800e4f2:	d0f0      	beq.n	800e4d6 <__match+0x6>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	e7f3      	b.n	800e4e0 <__match+0x10>

0800e4f8 <__hexnan>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	680b      	ldr	r3, [r1, #0]
 800e4fe:	6801      	ldr	r1, [r0, #0]
 800e500:	115e      	asrs	r6, r3, #5
 800e502:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e506:	f013 031f 	ands.w	r3, r3, #31
 800e50a:	b087      	sub	sp, #28
 800e50c:	bf18      	it	ne
 800e50e:	3604      	addne	r6, #4
 800e510:	2500      	movs	r5, #0
 800e512:	1f37      	subs	r7, r6, #4
 800e514:	4682      	mov	sl, r0
 800e516:	4690      	mov	r8, r2
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e51e:	46b9      	mov	r9, r7
 800e520:	463c      	mov	r4, r7
 800e522:	9502      	str	r5, [sp, #8]
 800e524:	46ab      	mov	fp, r5
 800e526:	784a      	ldrb	r2, [r1, #1]
 800e528:	1c4b      	adds	r3, r1, #1
 800e52a:	9303      	str	r3, [sp, #12]
 800e52c:	b342      	cbz	r2, 800e580 <__hexnan+0x88>
 800e52e:	4610      	mov	r0, r2
 800e530:	9105      	str	r1, [sp, #20]
 800e532:	9204      	str	r2, [sp, #16]
 800e534:	f7ff fd94 	bl	800e060 <__hexdig_fun>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d151      	bne.n	800e5e0 <__hexnan+0xe8>
 800e53c:	9a04      	ldr	r2, [sp, #16]
 800e53e:	9905      	ldr	r1, [sp, #20]
 800e540:	2a20      	cmp	r2, #32
 800e542:	d818      	bhi.n	800e576 <__hexnan+0x7e>
 800e544:	9b02      	ldr	r3, [sp, #8]
 800e546:	459b      	cmp	fp, r3
 800e548:	dd13      	ble.n	800e572 <__hexnan+0x7a>
 800e54a:	454c      	cmp	r4, r9
 800e54c:	d206      	bcs.n	800e55c <__hexnan+0x64>
 800e54e:	2d07      	cmp	r5, #7
 800e550:	dc04      	bgt.n	800e55c <__hexnan+0x64>
 800e552:	462a      	mov	r2, r5
 800e554:	4649      	mov	r1, r9
 800e556:	4620      	mov	r0, r4
 800e558:	f7ff ffa8 	bl	800e4ac <L_shift>
 800e55c:	4544      	cmp	r4, r8
 800e55e:	d952      	bls.n	800e606 <__hexnan+0x10e>
 800e560:	2300      	movs	r3, #0
 800e562:	f1a4 0904 	sub.w	r9, r4, #4
 800e566:	f844 3c04 	str.w	r3, [r4, #-4]
 800e56a:	f8cd b008 	str.w	fp, [sp, #8]
 800e56e:	464c      	mov	r4, r9
 800e570:	461d      	mov	r5, r3
 800e572:	9903      	ldr	r1, [sp, #12]
 800e574:	e7d7      	b.n	800e526 <__hexnan+0x2e>
 800e576:	2a29      	cmp	r2, #41	@ 0x29
 800e578:	d157      	bne.n	800e62a <__hexnan+0x132>
 800e57a:	3102      	adds	r1, #2
 800e57c:	f8ca 1000 	str.w	r1, [sl]
 800e580:	f1bb 0f00 	cmp.w	fp, #0
 800e584:	d051      	beq.n	800e62a <__hexnan+0x132>
 800e586:	454c      	cmp	r4, r9
 800e588:	d206      	bcs.n	800e598 <__hexnan+0xa0>
 800e58a:	2d07      	cmp	r5, #7
 800e58c:	dc04      	bgt.n	800e598 <__hexnan+0xa0>
 800e58e:	462a      	mov	r2, r5
 800e590:	4649      	mov	r1, r9
 800e592:	4620      	mov	r0, r4
 800e594:	f7ff ff8a 	bl	800e4ac <L_shift>
 800e598:	4544      	cmp	r4, r8
 800e59a:	d936      	bls.n	800e60a <__hexnan+0x112>
 800e59c:	f1a8 0204 	sub.w	r2, r8, #4
 800e5a0:	4623      	mov	r3, r4
 800e5a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5aa:	429f      	cmp	r7, r3
 800e5ac:	d2f9      	bcs.n	800e5a2 <__hexnan+0xaa>
 800e5ae:	1b3b      	subs	r3, r7, r4
 800e5b0:	f023 0303 	bic.w	r3, r3, #3
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	3401      	adds	r4, #1
 800e5b8:	3e03      	subs	r6, #3
 800e5ba:	42b4      	cmp	r4, r6
 800e5bc:	bf88      	it	hi
 800e5be:	2304      	movhi	r3, #4
 800e5c0:	4443      	add	r3, r8
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f843 2b04 	str.w	r2, [r3], #4
 800e5c8:	429f      	cmp	r7, r3
 800e5ca:	d2fb      	bcs.n	800e5c4 <__hexnan+0xcc>
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	b91b      	cbnz	r3, 800e5d8 <__hexnan+0xe0>
 800e5d0:	4547      	cmp	r7, r8
 800e5d2:	d128      	bne.n	800e626 <__hexnan+0x12e>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	2005      	movs	r0, #5
 800e5da:	b007      	add	sp, #28
 800e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e0:	3501      	adds	r5, #1
 800e5e2:	2d08      	cmp	r5, #8
 800e5e4:	f10b 0b01 	add.w	fp, fp, #1
 800e5e8:	dd06      	ble.n	800e5f8 <__hexnan+0x100>
 800e5ea:	4544      	cmp	r4, r8
 800e5ec:	d9c1      	bls.n	800e572 <__hexnan+0x7a>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5f4:	2501      	movs	r5, #1
 800e5f6:	3c04      	subs	r4, #4
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	f000 000f 	and.w	r0, r0, #15
 800e5fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	e7b5      	b.n	800e572 <__hexnan+0x7a>
 800e606:	2508      	movs	r5, #8
 800e608:	e7b3      	b.n	800e572 <__hexnan+0x7a>
 800e60a:	9b01      	ldr	r3, [sp, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d0dd      	beq.n	800e5cc <__hexnan+0xd4>
 800e610:	f1c3 0320 	rsb	r3, r3, #32
 800e614:	f04f 32ff 	mov.w	r2, #4294967295
 800e618:	40da      	lsrs	r2, r3
 800e61a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e61e:	4013      	ands	r3, r2
 800e620:	f846 3c04 	str.w	r3, [r6, #-4]
 800e624:	e7d2      	b.n	800e5cc <__hexnan+0xd4>
 800e626:	3f04      	subs	r7, #4
 800e628:	e7d0      	b.n	800e5cc <__hexnan+0xd4>
 800e62a:	2004      	movs	r0, #4
 800e62c:	e7d5      	b.n	800e5da <__hexnan+0xe2>
	...

0800e630 <malloc>:
 800e630:	4b02      	ldr	r3, [pc, #8]	@ (800e63c <malloc+0xc>)
 800e632:	4601      	mov	r1, r0
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	f000 b825 	b.w	800e684 <_malloc_r>
 800e63a:	bf00      	nop
 800e63c:	200001c4 	.word	0x200001c4

0800e640 <sbrk_aligned>:
 800e640:	b570      	push	{r4, r5, r6, lr}
 800e642:	4e0f      	ldr	r6, [pc, #60]	@ (800e680 <sbrk_aligned+0x40>)
 800e644:	460c      	mov	r4, r1
 800e646:	6831      	ldr	r1, [r6, #0]
 800e648:	4605      	mov	r5, r0
 800e64a:	b911      	cbnz	r1, 800e652 <sbrk_aligned+0x12>
 800e64c:	f000 ffe0 	bl	800f610 <_sbrk_r>
 800e650:	6030      	str	r0, [r6, #0]
 800e652:	4621      	mov	r1, r4
 800e654:	4628      	mov	r0, r5
 800e656:	f000 ffdb 	bl	800f610 <_sbrk_r>
 800e65a:	1c43      	adds	r3, r0, #1
 800e65c:	d103      	bne.n	800e666 <sbrk_aligned+0x26>
 800e65e:	f04f 34ff 	mov.w	r4, #4294967295
 800e662:	4620      	mov	r0, r4
 800e664:	bd70      	pop	{r4, r5, r6, pc}
 800e666:	1cc4      	adds	r4, r0, #3
 800e668:	f024 0403 	bic.w	r4, r4, #3
 800e66c:	42a0      	cmp	r0, r4
 800e66e:	d0f8      	beq.n	800e662 <sbrk_aligned+0x22>
 800e670:	1a21      	subs	r1, r4, r0
 800e672:	4628      	mov	r0, r5
 800e674:	f000 ffcc 	bl	800f610 <_sbrk_r>
 800e678:	3001      	adds	r0, #1
 800e67a:	d1f2      	bne.n	800e662 <sbrk_aligned+0x22>
 800e67c:	e7ef      	b.n	800e65e <sbrk_aligned+0x1e>
 800e67e:	bf00      	nop
 800e680:	2000964c 	.word	0x2000964c

0800e684 <_malloc_r>:
 800e684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e688:	1ccd      	adds	r5, r1, #3
 800e68a:	f025 0503 	bic.w	r5, r5, #3
 800e68e:	3508      	adds	r5, #8
 800e690:	2d0c      	cmp	r5, #12
 800e692:	bf38      	it	cc
 800e694:	250c      	movcc	r5, #12
 800e696:	2d00      	cmp	r5, #0
 800e698:	4606      	mov	r6, r0
 800e69a:	db01      	blt.n	800e6a0 <_malloc_r+0x1c>
 800e69c:	42a9      	cmp	r1, r5
 800e69e:	d904      	bls.n	800e6aa <_malloc_r+0x26>
 800e6a0:	230c      	movs	r3, #12
 800e6a2:	6033      	str	r3, [r6, #0]
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e780 <_malloc_r+0xfc>
 800e6ae:	f000 f87b 	bl	800e7a8 <__malloc_lock>
 800e6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b6:	461c      	mov	r4, r3
 800e6b8:	bb44      	cbnz	r4, 800e70c <_malloc_r+0x88>
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f7ff ffbf 	bl	800e640 <sbrk_aligned>
 800e6c2:	1c43      	adds	r3, r0, #1
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	d158      	bne.n	800e77a <_malloc_r+0xf6>
 800e6c8:	f8d8 4000 	ldr.w	r4, [r8]
 800e6cc:	4627      	mov	r7, r4
 800e6ce:	2f00      	cmp	r7, #0
 800e6d0:	d143      	bne.n	800e75a <_malloc_r+0xd6>
 800e6d2:	2c00      	cmp	r4, #0
 800e6d4:	d04b      	beq.n	800e76e <_malloc_r+0xea>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	4639      	mov	r1, r7
 800e6da:	4630      	mov	r0, r6
 800e6dc:	eb04 0903 	add.w	r9, r4, r3
 800e6e0:	f000 ff96 	bl	800f610 <_sbrk_r>
 800e6e4:	4581      	cmp	r9, r0
 800e6e6:	d142      	bne.n	800e76e <_malloc_r+0xea>
 800e6e8:	6821      	ldr	r1, [r4, #0]
 800e6ea:	1a6d      	subs	r5, r5, r1
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f7ff ffa6 	bl	800e640 <sbrk_aligned>
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d03a      	beq.n	800e76e <_malloc_r+0xea>
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	442b      	add	r3, r5
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	bb62      	cbnz	r2, 800e760 <_malloc_r+0xdc>
 800e706:	f8c8 7000 	str.w	r7, [r8]
 800e70a:	e00f      	b.n	800e72c <_malloc_r+0xa8>
 800e70c:	6822      	ldr	r2, [r4, #0]
 800e70e:	1b52      	subs	r2, r2, r5
 800e710:	d420      	bmi.n	800e754 <_malloc_r+0xd0>
 800e712:	2a0b      	cmp	r2, #11
 800e714:	d917      	bls.n	800e746 <_malloc_r+0xc2>
 800e716:	1961      	adds	r1, r4, r5
 800e718:	42a3      	cmp	r3, r4
 800e71a:	6025      	str	r5, [r4, #0]
 800e71c:	bf18      	it	ne
 800e71e:	6059      	strne	r1, [r3, #4]
 800e720:	6863      	ldr	r3, [r4, #4]
 800e722:	bf08      	it	eq
 800e724:	f8c8 1000 	streq.w	r1, [r8]
 800e728:	5162      	str	r2, [r4, r5]
 800e72a:	604b      	str	r3, [r1, #4]
 800e72c:	4630      	mov	r0, r6
 800e72e:	f000 f841 	bl	800e7b4 <__malloc_unlock>
 800e732:	f104 000b 	add.w	r0, r4, #11
 800e736:	1d23      	adds	r3, r4, #4
 800e738:	f020 0007 	bic.w	r0, r0, #7
 800e73c:	1ac2      	subs	r2, r0, r3
 800e73e:	bf1c      	itt	ne
 800e740:	1a1b      	subne	r3, r3, r0
 800e742:	50a3      	strne	r3, [r4, r2]
 800e744:	e7af      	b.n	800e6a6 <_malloc_r+0x22>
 800e746:	6862      	ldr	r2, [r4, #4]
 800e748:	42a3      	cmp	r3, r4
 800e74a:	bf0c      	ite	eq
 800e74c:	f8c8 2000 	streq.w	r2, [r8]
 800e750:	605a      	strne	r2, [r3, #4]
 800e752:	e7eb      	b.n	800e72c <_malloc_r+0xa8>
 800e754:	4623      	mov	r3, r4
 800e756:	6864      	ldr	r4, [r4, #4]
 800e758:	e7ae      	b.n	800e6b8 <_malloc_r+0x34>
 800e75a:	463c      	mov	r4, r7
 800e75c:	687f      	ldr	r7, [r7, #4]
 800e75e:	e7b6      	b.n	800e6ce <_malloc_r+0x4a>
 800e760:	461a      	mov	r2, r3
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	42a3      	cmp	r3, r4
 800e766:	d1fb      	bne.n	800e760 <_malloc_r+0xdc>
 800e768:	2300      	movs	r3, #0
 800e76a:	6053      	str	r3, [r2, #4]
 800e76c:	e7de      	b.n	800e72c <_malloc_r+0xa8>
 800e76e:	230c      	movs	r3, #12
 800e770:	6033      	str	r3, [r6, #0]
 800e772:	4630      	mov	r0, r6
 800e774:	f000 f81e 	bl	800e7b4 <__malloc_unlock>
 800e778:	e794      	b.n	800e6a4 <_malloc_r+0x20>
 800e77a:	6005      	str	r5, [r0, #0]
 800e77c:	e7d6      	b.n	800e72c <_malloc_r+0xa8>
 800e77e:	bf00      	nop
 800e780:	20009650 	.word	0x20009650

0800e784 <__ascii_mbtowc>:
 800e784:	b082      	sub	sp, #8
 800e786:	b901      	cbnz	r1, 800e78a <__ascii_mbtowc+0x6>
 800e788:	a901      	add	r1, sp, #4
 800e78a:	b142      	cbz	r2, 800e79e <__ascii_mbtowc+0x1a>
 800e78c:	b14b      	cbz	r3, 800e7a2 <__ascii_mbtowc+0x1e>
 800e78e:	7813      	ldrb	r3, [r2, #0]
 800e790:	600b      	str	r3, [r1, #0]
 800e792:	7812      	ldrb	r2, [r2, #0]
 800e794:	1e10      	subs	r0, r2, #0
 800e796:	bf18      	it	ne
 800e798:	2001      	movne	r0, #1
 800e79a:	b002      	add	sp, #8
 800e79c:	4770      	bx	lr
 800e79e:	4610      	mov	r0, r2
 800e7a0:	e7fb      	b.n	800e79a <__ascii_mbtowc+0x16>
 800e7a2:	f06f 0001 	mvn.w	r0, #1
 800e7a6:	e7f8      	b.n	800e79a <__ascii_mbtowc+0x16>

0800e7a8 <__malloc_lock>:
 800e7a8:	4801      	ldr	r0, [pc, #4]	@ (800e7b0 <__malloc_lock+0x8>)
 800e7aa:	f7fe bd4c 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800e7ae:	bf00      	nop
 800e7b0:	20009648 	.word	0x20009648

0800e7b4 <__malloc_unlock>:
 800e7b4:	4801      	ldr	r0, [pc, #4]	@ (800e7bc <__malloc_unlock+0x8>)
 800e7b6:	f7fe bd47 	b.w	800d248 <__retarget_lock_release_recursive>
 800e7ba:	bf00      	nop
 800e7bc:	20009648 	.word	0x20009648

0800e7c0 <_Balloc>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	69c6      	ldr	r6, [r0, #28]
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	460d      	mov	r5, r1
 800e7c8:	b976      	cbnz	r6, 800e7e8 <_Balloc+0x28>
 800e7ca:	2010      	movs	r0, #16
 800e7cc:	f7ff ff30 	bl	800e630 <malloc>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	61e0      	str	r0, [r4, #28]
 800e7d4:	b920      	cbnz	r0, 800e7e0 <_Balloc+0x20>
 800e7d6:	4b18      	ldr	r3, [pc, #96]	@ (800e838 <_Balloc+0x78>)
 800e7d8:	4818      	ldr	r0, [pc, #96]	@ (800e83c <_Balloc+0x7c>)
 800e7da:	216b      	movs	r1, #107	@ 0x6b
 800e7dc:	f000 ff28 	bl	800f630 <__assert_func>
 800e7e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7e4:	6006      	str	r6, [r0, #0]
 800e7e6:	60c6      	str	r6, [r0, #12]
 800e7e8:	69e6      	ldr	r6, [r4, #28]
 800e7ea:	68f3      	ldr	r3, [r6, #12]
 800e7ec:	b183      	cbz	r3, 800e810 <_Balloc+0x50>
 800e7ee:	69e3      	ldr	r3, [r4, #28]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7f6:	b9b8      	cbnz	r0, 800e828 <_Balloc+0x68>
 800e7f8:	2101      	movs	r1, #1
 800e7fa:	fa01 f605 	lsl.w	r6, r1, r5
 800e7fe:	1d72      	adds	r2, r6, #5
 800e800:	0092      	lsls	r2, r2, #2
 800e802:	4620      	mov	r0, r4
 800e804:	f000 ff32 	bl	800f66c <_calloc_r>
 800e808:	b160      	cbz	r0, 800e824 <_Balloc+0x64>
 800e80a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e80e:	e00e      	b.n	800e82e <_Balloc+0x6e>
 800e810:	2221      	movs	r2, #33	@ 0x21
 800e812:	2104      	movs	r1, #4
 800e814:	4620      	mov	r0, r4
 800e816:	f000 ff29 	bl	800f66c <_calloc_r>
 800e81a:	69e3      	ldr	r3, [r4, #28]
 800e81c:	60f0      	str	r0, [r6, #12]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1e4      	bne.n	800e7ee <_Balloc+0x2e>
 800e824:	2000      	movs	r0, #0
 800e826:	bd70      	pop	{r4, r5, r6, pc}
 800e828:	6802      	ldr	r2, [r0, #0]
 800e82a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e82e:	2300      	movs	r3, #0
 800e830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e834:	e7f7      	b.n	800e826 <_Balloc+0x66>
 800e836:	bf00      	nop
 800e838:	080107fb 	.word	0x080107fb
 800e83c:	080108db 	.word	0x080108db

0800e840 <_Bfree>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	69c6      	ldr	r6, [r0, #28]
 800e844:	4605      	mov	r5, r0
 800e846:	460c      	mov	r4, r1
 800e848:	b976      	cbnz	r6, 800e868 <_Bfree+0x28>
 800e84a:	2010      	movs	r0, #16
 800e84c:	f7ff fef0 	bl	800e630 <malloc>
 800e850:	4602      	mov	r2, r0
 800e852:	61e8      	str	r0, [r5, #28]
 800e854:	b920      	cbnz	r0, 800e860 <_Bfree+0x20>
 800e856:	4b09      	ldr	r3, [pc, #36]	@ (800e87c <_Bfree+0x3c>)
 800e858:	4809      	ldr	r0, [pc, #36]	@ (800e880 <_Bfree+0x40>)
 800e85a:	218f      	movs	r1, #143	@ 0x8f
 800e85c:	f000 fee8 	bl	800f630 <__assert_func>
 800e860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e864:	6006      	str	r6, [r0, #0]
 800e866:	60c6      	str	r6, [r0, #12]
 800e868:	b13c      	cbz	r4, 800e87a <_Bfree+0x3a>
 800e86a:	69eb      	ldr	r3, [r5, #28]
 800e86c:	6862      	ldr	r2, [r4, #4]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e874:	6021      	str	r1, [r4, #0]
 800e876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	080107fb 	.word	0x080107fb
 800e880:	080108db 	.word	0x080108db

0800e884 <__multadd>:
 800e884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e888:	690d      	ldr	r5, [r1, #16]
 800e88a:	4607      	mov	r7, r0
 800e88c:	460c      	mov	r4, r1
 800e88e:	461e      	mov	r6, r3
 800e890:	f101 0c14 	add.w	ip, r1, #20
 800e894:	2000      	movs	r0, #0
 800e896:	f8dc 3000 	ldr.w	r3, [ip]
 800e89a:	b299      	uxth	r1, r3
 800e89c:	fb02 6101 	mla	r1, r2, r1, r6
 800e8a0:	0c1e      	lsrs	r6, r3, #16
 800e8a2:	0c0b      	lsrs	r3, r1, #16
 800e8a4:	fb02 3306 	mla	r3, r2, r6, r3
 800e8a8:	b289      	uxth	r1, r1
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8b0:	4285      	cmp	r5, r0
 800e8b2:	f84c 1b04 	str.w	r1, [ip], #4
 800e8b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8ba:	dcec      	bgt.n	800e896 <__multadd+0x12>
 800e8bc:	b30e      	cbz	r6, 800e902 <__multadd+0x7e>
 800e8be:	68a3      	ldr	r3, [r4, #8]
 800e8c0:	42ab      	cmp	r3, r5
 800e8c2:	dc19      	bgt.n	800e8f8 <__multadd+0x74>
 800e8c4:	6861      	ldr	r1, [r4, #4]
 800e8c6:	4638      	mov	r0, r7
 800e8c8:	3101      	adds	r1, #1
 800e8ca:	f7ff ff79 	bl	800e7c0 <_Balloc>
 800e8ce:	4680      	mov	r8, r0
 800e8d0:	b928      	cbnz	r0, 800e8de <__multadd+0x5a>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e908 <__multadd+0x84>)
 800e8d6:	480d      	ldr	r0, [pc, #52]	@ (800e90c <__multadd+0x88>)
 800e8d8:	21ba      	movs	r1, #186	@ 0xba
 800e8da:	f000 fea9 	bl	800f630 <__assert_func>
 800e8de:	6922      	ldr	r2, [r4, #16]
 800e8e0:	3202      	adds	r2, #2
 800e8e2:	f104 010c 	add.w	r1, r4, #12
 800e8e6:	0092      	lsls	r2, r2, #2
 800e8e8:	300c      	adds	r0, #12
 800e8ea:	f7fe fcae 	bl	800d24a <memcpy>
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f7ff ffa5 	bl	800e840 <_Bfree>
 800e8f6:	4644      	mov	r4, r8
 800e8f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8fc:	3501      	adds	r5, #1
 800e8fe:	615e      	str	r6, [r3, #20]
 800e900:	6125      	str	r5, [r4, #16]
 800e902:	4620      	mov	r0, r4
 800e904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e908:	0801086a 	.word	0x0801086a
 800e90c:	080108db 	.word	0x080108db

0800e910 <__s2b>:
 800e910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e914:	460c      	mov	r4, r1
 800e916:	4615      	mov	r5, r2
 800e918:	461f      	mov	r7, r3
 800e91a:	2209      	movs	r2, #9
 800e91c:	3308      	adds	r3, #8
 800e91e:	4606      	mov	r6, r0
 800e920:	fb93 f3f2 	sdiv	r3, r3, r2
 800e924:	2100      	movs	r1, #0
 800e926:	2201      	movs	r2, #1
 800e928:	429a      	cmp	r2, r3
 800e92a:	db09      	blt.n	800e940 <__s2b+0x30>
 800e92c:	4630      	mov	r0, r6
 800e92e:	f7ff ff47 	bl	800e7c0 <_Balloc>
 800e932:	b940      	cbnz	r0, 800e946 <__s2b+0x36>
 800e934:	4602      	mov	r2, r0
 800e936:	4b19      	ldr	r3, [pc, #100]	@ (800e99c <__s2b+0x8c>)
 800e938:	4819      	ldr	r0, [pc, #100]	@ (800e9a0 <__s2b+0x90>)
 800e93a:	21d3      	movs	r1, #211	@ 0xd3
 800e93c:	f000 fe78 	bl	800f630 <__assert_func>
 800e940:	0052      	lsls	r2, r2, #1
 800e942:	3101      	adds	r1, #1
 800e944:	e7f0      	b.n	800e928 <__s2b+0x18>
 800e946:	9b08      	ldr	r3, [sp, #32]
 800e948:	6143      	str	r3, [r0, #20]
 800e94a:	2d09      	cmp	r5, #9
 800e94c:	f04f 0301 	mov.w	r3, #1
 800e950:	6103      	str	r3, [r0, #16]
 800e952:	dd16      	ble.n	800e982 <__s2b+0x72>
 800e954:	f104 0909 	add.w	r9, r4, #9
 800e958:	46c8      	mov	r8, r9
 800e95a:	442c      	add	r4, r5
 800e95c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e960:	4601      	mov	r1, r0
 800e962:	3b30      	subs	r3, #48	@ 0x30
 800e964:	220a      	movs	r2, #10
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ff8c 	bl	800e884 <__multadd>
 800e96c:	45a0      	cmp	r8, r4
 800e96e:	d1f5      	bne.n	800e95c <__s2b+0x4c>
 800e970:	f1a5 0408 	sub.w	r4, r5, #8
 800e974:	444c      	add	r4, r9
 800e976:	1b2d      	subs	r5, r5, r4
 800e978:	1963      	adds	r3, r4, r5
 800e97a:	42bb      	cmp	r3, r7
 800e97c:	db04      	blt.n	800e988 <__s2b+0x78>
 800e97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e982:	340a      	adds	r4, #10
 800e984:	2509      	movs	r5, #9
 800e986:	e7f6      	b.n	800e976 <__s2b+0x66>
 800e988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e98c:	4601      	mov	r1, r0
 800e98e:	3b30      	subs	r3, #48	@ 0x30
 800e990:	220a      	movs	r2, #10
 800e992:	4630      	mov	r0, r6
 800e994:	f7ff ff76 	bl	800e884 <__multadd>
 800e998:	e7ee      	b.n	800e978 <__s2b+0x68>
 800e99a:	bf00      	nop
 800e99c:	0801086a 	.word	0x0801086a
 800e9a0:	080108db 	.word	0x080108db

0800e9a4 <__hi0bits>:
 800e9a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	bf36      	itet	cc
 800e9ac:	0403      	lslcc	r3, r0, #16
 800e9ae:	2000      	movcs	r0, #0
 800e9b0:	2010      	movcc	r0, #16
 800e9b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e9b6:	bf3c      	itt	cc
 800e9b8:	021b      	lslcc	r3, r3, #8
 800e9ba:	3008      	addcc	r0, #8
 800e9bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9c0:	bf3c      	itt	cc
 800e9c2:	011b      	lslcc	r3, r3, #4
 800e9c4:	3004      	addcc	r0, #4
 800e9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9ca:	bf3c      	itt	cc
 800e9cc:	009b      	lslcc	r3, r3, #2
 800e9ce:	3002      	addcc	r0, #2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	db05      	blt.n	800e9e0 <__hi0bits+0x3c>
 800e9d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e9d8:	f100 0001 	add.w	r0, r0, #1
 800e9dc:	bf08      	it	eq
 800e9de:	2020      	moveq	r0, #32
 800e9e0:	4770      	bx	lr

0800e9e2 <__lo0bits>:
 800e9e2:	6803      	ldr	r3, [r0, #0]
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	f013 0007 	ands.w	r0, r3, #7
 800e9ea:	d00b      	beq.n	800ea04 <__lo0bits+0x22>
 800e9ec:	07d9      	lsls	r1, r3, #31
 800e9ee:	d421      	bmi.n	800ea34 <__lo0bits+0x52>
 800e9f0:	0798      	lsls	r0, r3, #30
 800e9f2:	bf49      	itett	mi
 800e9f4:	085b      	lsrmi	r3, r3, #1
 800e9f6:	089b      	lsrpl	r3, r3, #2
 800e9f8:	2001      	movmi	r0, #1
 800e9fa:	6013      	strmi	r3, [r2, #0]
 800e9fc:	bf5c      	itt	pl
 800e9fe:	6013      	strpl	r3, [r2, #0]
 800ea00:	2002      	movpl	r0, #2
 800ea02:	4770      	bx	lr
 800ea04:	b299      	uxth	r1, r3
 800ea06:	b909      	cbnz	r1, 800ea0c <__lo0bits+0x2a>
 800ea08:	0c1b      	lsrs	r3, r3, #16
 800ea0a:	2010      	movs	r0, #16
 800ea0c:	b2d9      	uxtb	r1, r3
 800ea0e:	b909      	cbnz	r1, 800ea14 <__lo0bits+0x32>
 800ea10:	3008      	adds	r0, #8
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	0719      	lsls	r1, r3, #28
 800ea16:	bf04      	itt	eq
 800ea18:	091b      	lsreq	r3, r3, #4
 800ea1a:	3004      	addeq	r0, #4
 800ea1c:	0799      	lsls	r1, r3, #30
 800ea1e:	bf04      	itt	eq
 800ea20:	089b      	lsreq	r3, r3, #2
 800ea22:	3002      	addeq	r0, #2
 800ea24:	07d9      	lsls	r1, r3, #31
 800ea26:	d403      	bmi.n	800ea30 <__lo0bits+0x4e>
 800ea28:	085b      	lsrs	r3, r3, #1
 800ea2a:	f100 0001 	add.w	r0, r0, #1
 800ea2e:	d003      	beq.n	800ea38 <__lo0bits+0x56>
 800ea30:	6013      	str	r3, [r2, #0]
 800ea32:	4770      	bx	lr
 800ea34:	2000      	movs	r0, #0
 800ea36:	4770      	bx	lr
 800ea38:	2020      	movs	r0, #32
 800ea3a:	4770      	bx	lr

0800ea3c <__i2b>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	460c      	mov	r4, r1
 800ea40:	2101      	movs	r1, #1
 800ea42:	f7ff febd 	bl	800e7c0 <_Balloc>
 800ea46:	4602      	mov	r2, r0
 800ea48:	b928      	cbnz	r0, 800ea56 <__i2b+0x1a>
 800ea4a:	4b05      	ldr	r3, [pc, #20]	@ (800ea60 <__i2b+0x24>)
 800ea4c:	4805      	ldr	r0, [pc, #20]	@ (800ea64 <__i2b+0x28>)
 800ea4e:	f240 1145 	movw	r1, #325	@ 0x145
 800ea52:	f000 fded 	bl	800f630 <__assert_func>
 800ea56:	2301      	movs	r3, #1
 800ea58:	6144      	str	r4, [r0, #20]
 800ea5a:	6103      	str	r3, [r0, #16]
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	bf00      	nop
 800ea60:	0801086a 	.word	0x0801086a
 800ea64:	080108db 	.word	0x080108db

0800ea68 <__multiply>:
 800ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6c:	4617      	mov	r7, r2
 800ea6e:	690a      	ldr	r2, [r1, #16]
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	bfa8      	it	ge
 800ea76:	463b      	movge	r3, r7
 800ea78:	4689      	mov	r9, r1
 800ea7a:	bfa4      	itt	ge
 800ea7c:	460f      	movge	r7, r1
 800ea7e:	4699      	movge	r9, r3
 800ea80:	693d      	ldr	r5, [r7, #16]
 800ea82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	6879      	ldr	r1, [r7, #4]
 800ea8a:	eb05 060a 	add.w	r6, r5, sl
 800ea8e:	42b3      	cmp	r3, r6
 800ea90:	b085      	sub	sp, #20
 800ea92:	bfb8      	it	lt
 800ea94:	3101      	addlt	r1, #1
 800ea96:	f7ff fe93 	bl	800e7c0 <_Balloc>
 800ea9a:	b930      	cbnz	r0, 800eaaa <__multiply+0x42>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	4b41      	ldr	r3, [pc, #260]	@ (800eba4 <__multiply+0x13c>)
 800eaa0:	4841      	ldr	r0, [pc, #260]	@ (800eba8 <__multiply+0x140>)
 800eaa2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eaa6:	f000 fdc3 	bl	800f630 <__assert_func>
 800eaaa:	f100 0414 	add.w	r4, r0, #20
 800eaae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eab2:	4623      	mov	r3, r4
 800eab4:	2200      	movs	r2, #0
 800eab6:	4573      	cmp	r3, lr
 800eab8:	d320      	bcc.n	800eafc <__multiply+0x94>
 800eaba:	f107 0814 	add.w	r8, r7, #20
 800eabe:	f109 0114 	add.w	r1, r9, #20
 800eac2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eac6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eaca:	9302      	str	r3, [sp, #8]
 800eacc:	1beb      	subs	r3, r5, r7
 800eace:	3b15      	subs	r3, #21
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	3304      	adds	r3, #4
 800ead6:	3715      	adds	r7, #21
 800ead8:	42bd      	cmp	r5, r7
 800eada:	bf38      	it	cc
 800eadc:	2304      	movcc	r3, #4
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	9b02      	ldr	r3, [sp, #8]
 800eae2:	9103      	str	r1, [sp, #12]
 800eae4:	428b      	cmp	r3, r1
 800eae6:	d80c      	bhi.n	800eb02 <__multiply+0x9a>
 800eae8:	2e00      	cmp	r6, #0
 800eaea:	dd03      	ble.n	800eaf4 <__multiply+0x8c>
 800eaec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d055      	beq.n	800eba0 <__multiply+0x138>
 800eaf4:	6106      	str	r6, [r0, #16]
 800eaf6:	b005      	add	sp, #20
 800eaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafc:	f843 2b04 	str.w	r2, [r3], #4
 800eb00:	e7d9      	b.n	800eab6 <__multiply+0x4e>
 800eb02:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb06:	f1ba 0f00 	cmp.w	sl, #0
 800eb0a:	d01f      	beq.n	800eb4c <__multiply+0xe4>
 800eb0c:	46c4      	mov	ip, r8
 800eb0e:	46a1      	mov	r9, r4
 800eb10:	2700      	movs	r7, #0
 800eb12:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb16:	f8d9 3000 	ldr.w	r3, [r9]
 800eb1a:	fa1f fb82 	uxth.w	fp, r2
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb24:	443b      	add	r3, r7
 800eb26:	f8d9 7000 	ldr.w	r7, [r9]
 800eb2a:	0c12      	lsrs	r2, r2, #16
 800eb2c:	0c3f      	lsrs	r7, r7, #16
 800eb2e:	fb0a 7202 	mla	r2, sl, r2, r7
 800eb32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb3c:	4565      	cmp	r5, ip
 800eb3e:	f849 3b04 	str.w	r3, [r9], #4
 800eb42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eb46:	d8e4      	bhi.n	800eb12 <__multiply+0xaa>
 800eb48:	9b01      	ldr	r3, [sp, #4]
 800eb4a:	50e7      	str	r7, [r4, r3]
 800eb4c:	9b03      	ldr	r3, [sp, #12]
 800eb4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb52:	3104      	adds	r1, #4
 800eb54:	f1b9 0f00 	cmp.w	r9, #0
 800eb58:	d020      	beq.n	800eb9c <__multiply+0x134>
 800eb5a:	6823      	ldr	r3, [r4, #0]
 800eb5c:	4647      	mov	r7, r8
 800eb5e:	46a4      	mov	ip, r4
 800eb60:	f04f 0a00 	mov.w	sl, #0
 800eb64:	f8b7 b000 	ldrh.w	fp, [r7]
 800eb68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800eb6c:	fb09 220b 	mla	r2, r9, fp, r2
 800eb70:	4452      	add	r2, sl
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb78:	f84c 3b04 	str.w	r3, [ip], #4
 800eb7c:	f857 3b04 	ldr.w	r3, [r7], #4
 800eb80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb84:	f8bc 3000 	ldrh.w	r3, [ip]
 800eb88:	fb09 330a 	mla	r3, r9, sl, r3
 800eb8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800eb90:	42bd      	cmp	r5, r7
 800eb92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb96:	d8e5      	bhi.n	800eb64 <__multiply+0xfc>
 800eb98:	9a01      	ldr	r2, [sp, #4]
 800eb9a:	50a3      	str	r3, [r4, r2]
 800eb9c:	3404      	adds	r4, #4
 800eb9e:	e79f      	b.n	800eae0 <__multiply+0x78>
 800eba0:	3e01      	subs	r6, #1
 800eba2:	e7a1      	b.n	800eae8 <__multiply+0x80>
 800eba4:	0801086a 	.word	0x0801086a
 800eba8:	080108db 	.word	0x080108db

0800ebac <__pow5mult>:
 800ebac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	4615      	mov	r5, r2
 800ebb2:	f012 0203 	ands.w	r2, r2, #3
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	460e      	mov	r6, r1
 800ebba:	d007      	beq.n	800ebcc <__pow5mult+0x20>
 800ebbc:	4c25      	ldr	r4, [pc, #148]	@ (800ec54 <__pow5mult+0xa8>)
 800ebbe:	3a01      	subs	r2, #1
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebc6:	f7ff fe5d 	bl	800e884 <__multadd>
 800ebca:	4606      	mov	r6, r0
 800ebcc:	10ad      	asrs	r5, r5, #2
 800ebce:	d03d      	beq.n	800ec4c <__pow5mult+0xa0>
 800ebd0:	69fc      	ldr	r4, [r7, #28]
 800ebd2:	b97c      	cbnz	r4, 800ebf4 <__pow5mult+0x48>
 800ebd4:	2010      	movs	r0, #16
 800ebd6:	f7ff fd2b 	bl	800e630 <malloc>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	61f8      	str	r0, [r7, #28]
 800ebde:	b928      	cbnz	r0, 800ebec <__pow5mult+0x40>
 800ebe0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec58 <__pow5mult+0xac>)
 800ebe2:	481e      	ldr	r0, [pc, #120]	@ (800ec5c <__pow5mult+0xb0>)
 800ebe4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ebe8:	f000 fd22 	bl	800f630 <__assert_func>
 800ebec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebf0:	6004      	str	r4, [r0, #0]
 800ebf2:	60c4      	str	r4, [r0, #12]
 800ebf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ebf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebfc:	b94c      	cbnz	r4, 800ec12 <__pow5mult+0x66>
 800ebfe:	f240 2171 	movw	r1, #625	@ 0x271
 800ec02:	4638      	mov	r0, r7
 800ec04:	f7ff ff1a 	bl	800ea3c <__i2b>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec0e:	4604      	mov	r4, r0
 800ec10:	6003      	str	r3, [r0, #0]
 800ec12:	f04f 0900 	mov.w	r9, #0
 800ec16:	07eb      	lsls	r3, r5, #31
 800ec18:	d50a      	bpl.n	800ec30 <__pow5mult+0x84>
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f7ff ff22 	bl	800ea68 <__multiply>
 800ec24:	4631      	mov	r1, r6
 800ec26:	4680      	mov	r8, r0
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f7ff fe09 	bl	800e840 <_Bfree>
 800ec2e:	4646      	mov	r6, r8
 800ec30:	106d      	asrs	r5, r5, #1
 800ec32:	d00b      	beq.n	800ec4c <__pow5mult+0xa0>
 800ec34:	6820      	ldr	r0, [r4, #0]
 800ec36:	b938      	cbnz	r0, 800ec48 <__pow5mult+0x9c>
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	4638      	mov	r0, r7
 800ec3e:	f7ff ff13 	bl	800ea68 <__multiply>
 800ec42:	6020      	str	r0, [r4, #0]
 800ec44:	f8c0 9000 	str.w	r9, [r0]
 800ec48:	4604      	mov	r4, r0
 800ec4a:	e7e4      	b.n	800ec16 <__pow5mult+0x6a>
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec52:	bf00      	nop
 800ec54:	08010adc 	.word	0x08010adc
 800ec58:	080107fb 	.word	0x080107fb
 800ec5c:	080108db 	.word	0x080108db

0800ec60 <__lshift>:
 800ec60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec64:	460c      	mov	r4, r1
 800ec66:	6849      	ldr	r1, [r1, #4]
 800ec68:	6923      	ldr	r3, [r4, #16]
 800ec6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec6e:	68a3      	ldr	r3, [r4, #8]
 800ec70:	4607      	mov	r7, r0
 800ec72:	4691      	mov	r9, r2
 800ec74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec78:	f108 0601 	add.w	r6, r8, #1
 800ec7c:	42b3      	cmp	r3, r6
 800ec7e:	db0b      	blt.n	800ec98 <__lshift+0x38>
 800ec80:	4638      	mov	r0, r7
 800ec82:	f7ff fd9d 	bl	800e7c0 <_Balloc>
 800ec86:	4605      	mov	r5, r0
 800ec88:	b948      	cbnz	r0, 800ec9e <__lshift+0x3e>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	4b28      	ldr	r3, [pc, #160]	@ (800ed30 <__lshift+0xd0>)
 800ec8e:	4829      	ldr	r0, [pc, #164]	@ (800ed34 <__lshift+0xd4>)
 800ec90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ec94:	f000 fccc 	bl	800f630 <__assert_func>
 800ec98:	3101      	adds	r1, #1
 800ec9a:	005b      	lsls	r3, r3, #1
 800ec9c:	e7ee      	b.n	800ec7c <__lshift+0x1c>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f100 0114 	add.w	r1, r0, #20
 800eca4:	f100 0210 	add.w	r2, r0, #16
 800eca8:	4618      	mov	r0, r3
 800ecaa:	4553      	cmp	r3, sl
 800ecac:	db33      	blt.n	800ed16 <__lshift+0xb6>
 800ecae:	6920      	ldr	r0, [r4, #16]
 800ecb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecb4:	f104 0314 	add.w	r3, r4, #20
 800ecb8:	f019 091f 	ands.w	r9, r9, #31
 800ecbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ecc4:	d02b      	beq.n	800ed1e <__lshift+0xbe>
 800ecc6:	f1c9 0e20 	rsb	lr, r9, #32
 800ecca:	468a      	mov	sl, r1
 800eccc:	2200      	movs	r2, #0
 800ecce:	6818      	ldr	r0, [r3, #0]
 800ecd0:	fa00 f009 	lsl.w	r0, r0, r9
 800ecd4:	4310      	orrs	r0, r2
 800ecd6:	f84a 0b04 	str.w	r0, [sl], #4
 800ecda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecde:	459c      	cmp	ip, r3
 800ece0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ece4:	d8f3      	bhi.n	800ecce <__lshift+0x6e>
 800ece6:	ebac 0304 	sub.w	r3, ip, r4
 800ecea:	3b15      	subs	r3, #21
 800ecec:	f023 0303 	bic.w	r3, r3, #3
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	f104 0015 	add.w	r0, r4, #21
 800ecf6:	4560      	cmp	r0, ip
 800ecf8:	bf88      	it	hi
 800ecfa:	2304      	movhi	r3, #4
 800ecfc:	50ca      	str	r2, [r1, r3]
 800ecfe:	b10a      	cbz	r2, 800ed04 <__lshift+0xa4>
 800ed00:	f108 0602 	add.w	r6, r8, #2
 800ed04:	3e01      	subs	r6, #1
 800ed06:	4638      	mov	r0, r7
 800ed08:	612e      	str	r6, [r5, #16]
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	f7ff fd98 	bl	800e840 <_Bfree>
 800ed10:	4628      	mov	r0, r5
 800ed12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	e7c5      	b.n	800ecaa <__lshift+0x4a>
 800ed1e:	3904      	subs	r1, #4
 800ed20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed24:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed28:	459c      	cmp	ip, r3
 800ed2a:	d8f9      	bhi.n	800ed20 <__lshift+0xc0>
 800ed2c:	e7ea      	b.n	800ed04 <__lshift+0xa4>
 800ed2e:	bf00      	nop
 800ed30:	0801086a 	.word	0x0801086a
 800ed34:	080108db 	.word	0x080108db

0800ed38 <__mcmp>:
 800ed38:	690a      	ldr	r2, [r1, #16]
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	6900      	ldr	r0, [r0, #16]
 800ed3e:	1a80      	subs	r0, r0, r2
 800ed40:	b530      	push	{r4, r5, lr}
 800ed42:	d10e      	bne.n	800ed62 <__mcmp+0x2a>
 800ed44:	3314      	adds	r3, #20
 800ed46:	3114      	adds	r1, #20
 800ed48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed58:	4295      	cmp	r5, r2
 800ed5a:	d003      	beq.n	800ed64 <__mcmp+0x2c>
 800ed5c:	d205      	bcs.n	800ed6a <__mcmp+0x32>
 800ed5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed62:	bd30      	pop	{r4, r5, pc}
 800ed64:	42a3      	cmp	r3, r4
 800ed66:	d3f3      	bcc.n	800ed50 <__mcmp+0x18>
 800ed68:	e7fb      	b.n	800ed62 <__mcmp+0x2a>
 800ed6a:	2001      	movs	r0, #1
 800ed6c:	e7f9      	b.n	800ed62 <__mcmp+0x2a>
	...

0800ed70 <__mdiff>:
 800ed70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed74:	4689      	mov	r9, r1
 800ed76:	4606      	mov	r6, r0
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4648      	mov	r0, r9
 800ed7c:	4614      	mov	r4, r2
 800ed7e:	f7ff ffdb 	bl	800ed38 <__mcmp>
 800ed82:	1e05      	subs	r5, r0, #0
 800ed84:	d112      	bne.n	800edac <__mdiff+0x3c>
 800ed86:	4629      	mov	r1, r5
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7ff fd19 	bl	800e7c0 <_Balloc>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	b928      	cbnz	r0, 800ed9e <__mdiff+0x2e>
 800ed92:	4b3f      	ldr	r3, [pc, #252]	@ (800ee90 <__mdiff+0x120>)
 800ed94:	f240 2137 	movw	r1, #567	@ 0x237
 800ed98:	483e      	ldr	r0, [pc, #248]	@ (800ee94 <__mdiff+0x124>)
 800ed9a:	f000 fc49 	bl	800f630 <__assert_func>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eda4:	4610      	mov	r0, r2
 800eda6:	b003      	add	sp, #12
 800eda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edac:	bfbc      	itt	lt
 800edae:	464b      	movlt	r3, r9
 800edb0:	46a1      	movlt	r9, r4
 800edb2:	4630      	mov	r0, r6
 800edb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800edb8:	bfba      	itte	lt
 800edba:	461c      	movlt	r4, r3
 800edbc:	2501      	movlt	r5, #1
 800edbe:	2500      	movge	r5, #0
 800edc0:	f7ff fcfe 	bl	800e7c0 <_Balloc>
 800edc4:	4602      	mov	r2, r0
 800edc6:	b918      	cbnz	r0, 800edd0 <__mdiff+0x60>
 800edc8:	4b31      	ldr	r3, [pc, #196]	@ (800ee90 <__mdiff+0x120>)
 800edca:	f240 2145 	movw	r1, #581	@ 0x245
 800edce:	e7e3      	b.n	800ed98 <__mdiff+0x28>
 800edd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800edd4:	6926      	ldr	r6, [r4, #16]
 800edd6:	60c5      	str	r5, [r0, #12]
 800edd8:	f109 0310 	add.w	r3, r9, #16
 800eddc:	f109 0514 	add.w	r5, r9, #20
 800ede0:	f104 0e14 	add.w	lr, r4, #20
 800ede4:	f100 0b14 	add.w	fp, r0, #20
 800ede8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800edec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800edf0:	9301      	str	r3, [sp, #4]
 800edf2:	46d9      	mov	r9, fp
 800edf4:	f04f 0c00 	mov.w	ip, #0
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800edfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	fa1f f38a 	uxth.w	r3, sl
 800ee08:	4619      	mov	r1, r3
 800ee0a:	b283      	uxth	r3, r0
 800ee0c:	1acb      	subs	r3, r1, r3
 800ee0e:	0c00      	lsrs	r0, r0, #16
 800ee10:	4463      	add	r3, ip
 800ee12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee20:	4576      	cmp	r6, lr
 800ee22:	f849 3b04 	str.w	r3, [r9], #4
 800ee26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee2a:	d8e5      	bhi.n	800edf8 <__mdiff+0x88>
 800ee2c:	1b33      	subs	r3, r6, r4
 800ee2e:	3b15      	subs	r3, #21
 800ee30:	f023 0303 	bic.w	r3, r3, #3
 800ee34:	3415      	adds	r4, #21
 800ee36:	3304      	adds	r3, #4
 800ee38:	42a6      	cmp	r6, r4
 800ee3a:	bf38      	it	cc
 800ee3c:	2304      	movcc	r3, #4
 800ee3e:	441d      	add	r5, r3
 800ee40:	445b      	add	r3, fp
 800ee42:	461e      	mov	r6, r3
 800ee44:	462c      	mov	r4, r5
 800ee46:	4544      	cmp	r4, r8
 800ee48:	d30e      	bcc.n	800ee68 <__mdiff+0xf8>
 800ee4a:	f108 0103 	add.w	r1, r8, #3
 800ee4e:	1b49      	subs	r1, r1, r5
 800ee50:	f021 0103 	bic.w	r1, r1, #3
 800ee54:	3d03      	subs	r5, #3
 800ee56:	45a8      	cmp	r8, r5
 800ee58:	bf38      	it	cc
 800ee5a:	2100      	movcc	r1, #0
 800ee5c:	440b      	add	r3, r1
 800ee5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee62:	b191      	cbz	r1, 800ee8a <__mdiff+0x11a>
 800ee64:	6117      	str	r7, [r2, #16]
 800ee66:	e79d      	b.n	800eda4 <__mdiff+0x34>
 800ee68:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee6c:	46e6      	mov	lr, ip
 800ee6e:	0c08      	lsrs	r0, r1, #16
 800ee70:	fa1c fc81 	uxtah	ip, ip, r1
 800ee74:	4471      	add	r1, lr
 800ee76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee7a:	b289      	uxth	r1, r1
 800ee7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee80:	f846 1b04 	str.w	r1, [r6], #4
 800ee84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee88:	e7dd      	b.n	800ee46 <__mdiff+0xd6>
 800ee8a:	3f01      	subs	r7, #1
 800ee8c:	e7e7      	b.n	800ee5e <__mdiff+0xee>
 800ee8e:	bf00      	nop
 800ee90:	0801086a 	.word	0x0801086a
 800ee94:	080108db 	.word	0x080108db

0800ee98 <__ulp>:
 800ee98:	b082      	sub	sp, #8
 800ee9a:	ed8d 0b00 	vstr	d0, [sp]
 800ee9e:	9a01      	ldr	r2, [sp, #4]
 800eea0:	4b0f      	ldr	r3, [pc, #60]	@ (800eee0 <__ulp+0x48>)
 800eea2:	4013      	ands	r3, r2
 800eea4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	dc08      	bgt.n	800eebe <__ulp+0x26>
 800eeac:	425b      	negs	r3, r3
 800eeae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eeb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eeb6:	da04      	bge.n	800eec2 <__ulp+0x2a>
 800eeb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eebc:	4113      	asrs	r3, r2
 800eebe:	2200      	movs	r2, #0
 800eec0:	e008      	b.n	800eed4 <__ulp+0x3c>
 800eec2:	f1a2 0314 	sub.w	r3, r2, #20
 800eec6:	2b1e      	cmp	r3, #30
 800eec8:	bfda      	itte	le
 800eeca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eece:	40da      	lsrle	r2, r3
 800eed0:	2201      	movgt	r2, #1
 800eed2:	2300      	movs	r3, #0
 800eed4:	4619      	mov	r1, r3
 800eed6:	4610      	mov	r0, r2
 800eed8:	ec41 0b10 	vmov	d0, r0, r1
 800eedc:	b002      	add	sp, #8
 800eede:	4770      	bx	lr
 800eee0:	7ff00000 	.word	0x7ff00000

0800eee4 <__b2d>:
 800eee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee8:	6906      	ldr	r6, [r0, #16]
 800eeea:	f100 0814 	add.w	r8, r0, #20
 800eeee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eef2:	1f37      	subs	r7, r6, #4
 800eef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7ff fd53 	bl	800e9a4 <__hi0bits>
 800eefe:	f1c0 0320 	rsb	r3, r0, #32
 800ef02:	280a      	cmp	r0, #10
 800ef04:	600b      	str	r3, [r1, #0]
 800ef06:	491b      	ldr	r1, [pc, #108]	@ (800ef74 <__b2d+0x90>)
 800ef08:	dc15      	bgt.n	800ef36 <__b2d+0x52>
 800ef0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ef12:	45b8      	cmp	r8, r7
 800ef14:	ea43 0501 	orr.w	r5, r3, r1
 800ef18:	bf34      	ite	cc
 800ef1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef1e:	2300      	movcs	r3, #0
 800ef20:	3015      	adds	r0, #21
 800ef22:	fa02 f000 	lsl.w	r0, r2, r0
 800ef26:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef2a:	4303      	orrs	r3, r0
 800ef2c:	461c      	mov	r4, r3
 800ef2e:	ec45 4b10 	vmov	d0, r4, r5
 800ef32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef36:	45b8      	cmp	r8, r7
 800ef38:	bf3a      	itte	cc
 800ef3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ef42:	2300      	movcs	r3, #0
 800ef44:	380b      	subs	r0, #11
 800ef46:	d012      	beq.n	800ef6e <__b2d+0x8a>
 800ef48:	f1c0 0120 	rsb	r1, r0, #32
 800ef4c:	fa23 f401 	lsr.w	r4, r3, r1
 800ef50:	4082      	lsls	r2, r0
 800ef52:	4322      	orrs	r2, r4
 800ef54:	4547      	cmp	r7, r8
 800ef56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ef5a:	bf8c      	ite	hi
 800ef5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ef60:	2200      	movls	r2, #0
 800ef62:	4083      	lsls	r3, r0
 800ef64:	40ca      	lsrs	r2, r1
 800ef66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	e7de      	b.n	800ef2c <__b2d+0x48>
 800ef6e:	ea42 0501 	orr.w	r5, r2, r1
 800ef72:	e7db      	b.n	800ef2c <__b2d+0x48>
 800ef74:	3ff00000 	.word	0x3ff00000

0800ef78 <__d2b>:
 800ef78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	2101      	movs	r1, #1
 800ef80:	ec59 8b10 	vmov	r8, r9, d0
 800ef84:	4616      	mov	r6, r2
 800ef86:	f7ff fc1b 	bl	800e7c0 <_Balloc>
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	b930      	cbnz	r0, 800ef9c <__d2b+0x24>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	4b23      	ldr	r3, [pc, #140]	@ (800f020 <__d2b+0xa8>)
 800ef92:	4824      	ldr	r0, [pc, #144]	@ (800f024 <__d2b+0xac>)
 800ef94:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef98:	f000 fb4a 	bl	800f630 <__assert_func>
 800ef9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800efa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efa4:	b10d      	cbz	r5, 800efaa <__d2b+0x32>
 800efa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efaa:	9301      	str	r3, [sp, #4]
 800efac:	f1b8 0300 	subs.w	r3, r8, #0
 800efb0:	d023      	beq.n	800effa <__d2b+0x82>
 800efb2:	4668      	mov	r0, sp
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	f7ff fd14 	bl	800e9e2 <__lo0bits>
 800efba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800efbe:	b1d0      	cbz	r0, 800eff6 <__d2b+0x7e>
 800efc0:	f1c0 0320 	rsb	r3, r0, #32
 800efc4:	fa02 f303 	lsl.w	r3, r2, r3
 800efc8:	430b      	orrs	r3, r1
 800efca:	40c2      	lsrs	r2, r0
 800efcc:	6163      	str	r3, [r4, #20]
 800efce:	9201      	str	r2, [sp, #4]
 800efd0:	9b01      	ldr	r3, [sp, #4]
 800efd2:	61a3      	str	r3, [r4, #24]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	bf0c      	ite	eq
 800efd8:	2201      	moveq	r2, #1
 800efda:	2202      	movne	r2, #2
 800efdc:	6122      	str	r2, [r4, #16]
 800efde:	b1a5      	cbz	r5, 800f00a <__d2b+0x92>
 800efe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800efe4:	4405      	add	r5, r0
 800efe6:	603d      	str	r5, [r7, #0]
 800efe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	4620      	mov	r0, r4
 800eff0:	b003      	add	sp, #12
 800eff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff6:	6161      	str	r1, [r4, #20]
 800eff8:	e7ea      	b.n	800efd0 <__d2b+0x58>
 800effa:	a801      	add	r0, sp, #4
 800effc:	f7ff fcf1 	bl	800e9e2 <__lo0bits>
 800f000:	9b01      	ldr	r3, [sp, #4]
 800f002:	6163      	str	r3, [r4, #20]
 800f004:	3020      	adds	r0, #32
 800f006:	2201      	movs	r2, #1
 800f008:	e7e8      	b.n	800efdc <__d2b+0x64>
 800f00a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f00e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f012:	6038      	str	r0, [r7, #0]
 800f014:	6918      	ldr	r0, [r3, #16]
 800f016:	f7ff fcc5 	bl	800e9a4 <__hi0bits>
 800f01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f01e:	e7e5      	b.n	800efec <__d2b+0x74>
 800f020:	0801086a 	.word	0x0801086a
 800f024:	080108db 	.word	0x080108db

0800f028 <__ratio>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	b085      	sub	sp, #20
 800f02e:	e9cd 1000 	strd	r1, r0, [sp]
 800f032:	a902      	add	r1, sp, #8
 800f034:	f7ff ff56 	bl	800eee4 <__b2d>
 800f038:	9800      	ldr	r0, [sp, #0]
 800f03a:	a903      	add	r1, sp, #12
 800f03c:	ec55 4b10 	vmov	r4, r5, d0
 800f040:	f7ff ff50 	bl	800eee4 <__b2d>
 800f044:	9b01      	ldr	r3, [sp, #4]
 800f046:	6919      	ldr	r1, [r3, #16]
 800f048:	9b00      	ldr	r3, [sp, #0]
 800f04a:	691b      	ldr	r3, [r3, #16]
 800f04c:	1ac9      	subs	r1, r1, r3
 800f04e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f052:	1a9b      	subs	r3, r3, r2
 800f054:	ec5b ab10 	vmov	sl, fp, d0
 800f058:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfce      	itee	gt
 800f060:	462a      	movgt	r2, r5
 800f062:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f066:	465a      	movle	r2, fp
 800f068:	462f      	mov	r7, r5
 800f06a:	46d9      	mov	r9, fp
 800f06c:	bfcc      	ite	gt
 800f06e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f072:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f076:	464b      	mov	r3, r9
 800f078:	4652      	mov	r2, sl
 800f07a:	4620      	mov	r0, r4
 800f07c:	4639      	mov	r1, r7
 800f07e:	f7f1 fc05 	bl	800088c <__aeabi_ddiv>
 800f082:	ec41 0b10 	vmov	d0, r0, r1
 800f086:	b005      	add	sp, #20
 800f088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f08c <__copybits>:
 800f08c:	3901      	subs	r1, #1
 800f08e:	b570      	push	{r4, r5, r6, lr}
 800f090:	1149      	asrs	r1, r1, #5
 800f092:	6914      	ldr	r4, [r2, #16]
 800f094:	3101      	adds	r1, #1
 800f096:	f102 0314 	add.w	r3, r2, #20
 800f09a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f09e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0a2:	1f05      	subs	r5, r0, #4
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	d30c      	bcc.n	800f0c2 <__copybits+0x36>
 800f0a8:	1aa3      	subs	r3, r4, r2
 800f0aa:	3b11      	subs	r3, #17
 800f0ac:	f023 0303 	bic.w	r3, r3, #3
 800f0b0:	3211      	adds	r2, #17
 800f0b2:	42a2      	cmp	r2, r4
 800f0b4:	bf88      	it	hi
 800f0b6:	2300      	movhi	r3, #0
 800f0b8:	4418      	add	r0, r3
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	4288      	cmp	r0, r1
 800f0be:	d305      	bcc.n	800f0cc <__copybits+0x40>
 800f0c0:	bd70      	pop	{r4, r5, r6, pc}
 800f0c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0ca:	e7eb      	b.n	800f0a4 <__copybits+0x18>
 800f0cc:	f840 3b04 	str.w	r3, [r0], #4
 800f0d0:	e7f4      	b.n	800f0bc <__copybits+0x30>

0800f0d2 <__any_on>:
 800f0d2:	f100 0214 	add.w	r2, r0, #20
 800f0d6:	6900      	ldr	r0, [r0, #16]
 800f0d8:	114b      	asrs	r3, r1, #5
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	db11      	blt.n	800f104 <__any_on+0x32>
 800f0e0:	dd0a      	ble.n	800f0f8 <__any_on+0x26>
 800f0e2:	f011 011f 	ands.w	r1, r1, #31
 800f0e6:	d007      	beq.n	800f0f8 <__any_on+0x26>
 800f0e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0ec:	fa24 f001 	lsr.w	r0, r4, r1
 800f0f0:	fa00 f101 	lsl.w	r1, r0, r1
 800f0f4:	428c      	cmp	r4, r1
 800f0f6:	d10b      	bne.n	800f110 <__any_on+0x3e>
 800f0f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d803      	bhi.n	800f108 <__any_on+0x36>
 800f100:	2000      	movs	r0, #0
 800f102:	bd10      	pop	{r4, pc}
 800f104:	4603      	mov	r3, r0
 800f106:	e7f7      	b.n	800f0f8 <__any_on+0x26>
 800f108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d0f5      	beq.n	800f0fc <__any_on+0x2a>
 800f110:	2001      	movs	r0, #1
 800f112:	e7f6      	b.n	800f102 <__any_on+0x30>

0800f114 <__ascii_wctomb>:
 800f114:	4603      	mov	r3, r0
 800f116:	4608      	mov	r0, r1
 800f118:	b141      	cbz	r1, 800f12c <__ascii_wctomb+0x18>
 800f11a:	2aff      	cmp	r2, #255	@ 0xff
 800f11c:	d904      	bls.n	800f128 <__ascii_wctomb+0x14>
 800f11e:	228a      	movs	r2, #138	@ 0x8a
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	f04f 30ff 	mov.w	r0, #4294967295
 800f126:	4770      	bx	lr
 800f128:	700a      	strb	r2, [r1, #0]
 800f12a:	2001      	movs	r0, #1
 800f12c:	4770      	bx	lr

0800f12e <__sfputc_r>:
 800f12e:	6893      	ldr	r3, [r2, #8]
 800f130:	3b01      	subs	r3, #1
 800f132:	2b00      	cmp	r3, #0
 800f134:	b410      	push	{r4}
 800f136:	6093      	str	r3, [r2, #8]
 800f138:	da08      	bge.n	800f14c <__sfputc_r+0x1e>
 800f13a:	6994      	ldr	r4, [r2, #24]
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	db01      	blt.n	800f144 <__sfputc_r+0x16>
 800f140:	290a      	cmp	r1, #10
 800f142:	d103      	bne.n	800f14c <__sfputc_r+0x1e>
 800f144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f148:	f7fd bf59 	b.w	800cffe <__swbuf_r>
 800f14c:	6813      	ldr	r3, [r2, #0]
 800f14e:	1c58      	adds	r0, r3, #1
 800f150:	6010      	str	r0, [r2, #0]
 800f152:	7019      	strb	r1, [r3, #0]
 800f154:	4608      	mov	r0, r1
 800f156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <__sfputs_r>:
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	4606      	mov	r6, r0
 800f160:	460f      	mov	r7, r1
 800f162:	4614      	mov	r4, r2
 800f164:	18d5      	adds	r5, r2, r3
 800f166:	42ac      	cmp	r4, r5
 800f168:	d101      	bne.n	800f16e <__sfputs_r+0x12>
 800f16a:	2000      	movs	r0, #0
 800f16c:	e007      	b.n	800f17e <__sfputs_r+0x22>
 800f16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f172:	463a      	mov	r2, r7
 800f174:	4630      	mov	r0, r6
 800f176:	f7ff ffda 	bl	800f12e <__sfputc_r>
 800f17a:	1c43      	adds	r3, r0, #1
 800f17c:	d1f3      	bne.n	800f166 <__sfputs_r+0xa>
 800f17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f180 <_vfiprintf_r>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	460d      	mov	r5, r1
 800f186:	b09d      	sub	sp, #116	@ 0x74
 800f188:	4614      	mov	r4, r2
 800f18a:	4698      	mov	r8, r3
 800f18c:	4606      	mov	r6, r0
 800f18e:	b118      	cbz	r0, 800f198 <_vfiprintf_r+0x18>
 800f190:	6a03      	ldr	r3, [r0, #32]
 800f192:	b90b      	cbnz	r3, 800f198 <_vfiprintf_r+0x18>
 800f194:	f7fd fe4a 	bl	800ce2c <__sinit>
 800f198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f19a:	07d9      	lsls	r1, r3, #31
 800f19c:	d405      	bmi.n	800f1aa <_vfiprintf_r+0x2a>
 800f19e:	89ab      	ldrh	r3, [r5, #12]
 800f1a0:	059a      	lsls	r2, r3, #22
 800f1a2:	d402      	bmi.n	800f1aa <_vfiprintf_r+0x2a>
 800f1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1a6:	f7fe f84e 	bl	800d246 <__retarget_lock_acquire_recursive>
 800f1aa:	89ab      	ldrh	r3, [r5, #12]
 800f1ac:	071b      	lsls	r3, r3, #28
 800f1ae:	d501      	bpl.n	800f1b4 <_vfiprintf_r+0x34>
 800f1b0:	692b      	ldr	r3, [r5, #16]
 800f1b2:	b99b      	cbnz	r3, 800f1dc <_vfiprintf_r+0x5c>
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f7fd ff60 	bl	800d07c <__swsetup_r>
 800f1bc:	b170      	cbz	r0, 800f1dc <_vfiprintf_r+0x5c>
 800f1be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1c0:	07dc      	lsls	r4, r3, #31
 800f1c2:	d504      	bpl.n	800f1ce <_vfiprintf_r+0x4e>
 800f1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c8:	b01d      	add	sp, #116	@ 0x74
 800f1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	0598      	lsls	r0, r3, #22
 800f1d2:	d4f7      	bmi.n	800f1c4 <_vfiprintf_r+0x44>
 800f1d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1d6:	f7fe f837 	bl	800d248 <__retarget_lock_release_recursive>
 800f1da:	e7f3      	b.n	800f1c4 <_vfiprintf_r+0x44>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1e0:	2320      	movs	r3, #32
 800f1e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ea:	2330      	movs	r3, #48	@ 0x30
 800f1ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f39c <_vfiprintf_r+0x21c>
 800f1f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1f4:	f04f 0901 	mov.w	r9, #1
 800f1f8:	4623      	mov	r3, r4
 800f1fa:	469a      	mov	sl, r3
 800f1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f200:	b10a      	cbz	r2, 800f206 <_vfiprintf_r+0x86>
 800f202:	2a25      	cmp	r2, #37	@ 0x25
 800f204:	d1f9      	bne.n	800f1fa <_vfiprintf_r+0x7a>
 800f206:	ebba 0b04 	subs.w	fp, sl, r4
 800f20a:	d00b      	beq.n	800f224 <_vfiprintf_r+0xa4>
 800f20c:	465b      	mov	r3, fp
 800f20e:	4622      	mov	r2, r4
 800f210:	4629      	mov	r1, r5
 800f212:	4630      	mov	r0, r6
 800f214:	f7ff ffa2 	bl	800f15c <__sfputs_r>
 800f218:	3001      	adds	r0, #1
 800f21a:	f000 80a7 	beq.w	800f36c <_vfiprintf_r+0x1ec>
 800f21e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f220:	445a      	add	r2, fp
 800f222:	9209      	str	r2, [sp, #36]	@ 0x24
 800f224:	f89a 3000 	ldrb.w	r3, [sl]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f000 809f 	beq.w	800f36c <_vfiprintf_r+0x1ec>
 800f22e:	2300      	movs	r3, #0
 800f230:	f04f 32ff 	mov.w	r2, #4294967295
 800f234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f238:	f10a 0a01 	add.w	sl, sl, #1
 800f23c:	9304      	str	r3, [sp, #16]
 800f23e:	9307      	str	r3, [sp, #28]
 800f240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f244:	931a      	str	r3, [sp, #104]	@ 0x68
 800f246:	4654      	mov	r4, sl
 800f248:	2205      	movs	r2, #5
 800f24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24e:	4853      	ldr	r0, [pc, #332]	@ (800f39c <_vfiprintf_r+0x21c>)
 800f250:	f7f0 ffde 	bl	8000210 <memchr>
 800f254:	9a04      	ldr	r2, [sp, #16]
 800f256:	b9d8      	cbnz	r0, 800f290 <_vfiprintf_r+0x110>
 800f258:	06d1      	lsls	r1, r2, #27
 800f25a:	bf44      	itt	mi
 800f25c:	2320      	movmi	r3, #32
 800f25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f262:	0713      	lsls	r3, r2, #28
 800f264:	bf44      	itt	mi
 800f266:	232b      	movmi	r3, #43	@ 0x2b
 800f268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f26c:	f89a 3000 	ldrb.w	r3, [sl]
 800f270:	2b2a      	cmp	r3, #42	@ 0x2a
 800f272:	d015      	beq.n	800f2a0 <_vfiprintf_r+0x120>
 800f274:	9a07      	ldr	r2, [sp, #28]
 800f276:	4654      	mov	r4, sl
 800f278:	2000      	movs	r0, #0
 800f27a:	f04f 0c0a 	mov.w	ip, #10
 800f27e:	4621      	mov	r1, r4
 800f280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f284:	3b30      	subs	r3, #48	@ 0x30
 800f286:	2b09      	cmp	r3, #9
 800f288:	d94b      	bls.n	800f322 <_vfiprintf_r+0x1a2>
 800f28a:	b1b0      	cbz	r0, 800f2ba <_vfiprintf_r+0x13a>
 800f28c:	9207      	str	r2, [sp, #28]
 800f28e:	e014      	b.n	800f2ba <_vfiprintf_r+0x13a>
 800f290:	eba0 0308 	sub.w	r3, r0, r8
 800f294:	fa09 f303 	lsl.w	r3, r9, r3
 800f298:	4313      	orrs	r3, r2
 800f29a:	9304      	str	r3, [sp, #16]
 800f29c:	46a2      	mov	sl, r4
 800f29e:	e7d2      	b.n	800f246 <_vfiprintf_r+0xc6>
 800f2a0:	9b03      	ldr	r3, [sp, #12]
 800f2a2:	1d19      	adds	r1, r3, #4
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	9103      	str	r1, [sp, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	bfbb      	ittet	lt
 800f2ac:	425b      	neglt	r3, r3
 800f2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f2b2:	9307      	strge	r3, [sp, #28]
 800f2b4:	9307      	strlt	r3, [sp, #28]
 800f2b6:	bfb8      	it	lt
 800f2b8:	9204      	strlt	r2, [sp, #16]
 800f2ba:	7823      	ldrb	r3, [r4, #0]
 800f2bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2be:	d10a      	bne.n	800f2d6 <_vfiprintf_r+0x156>
 800f2c0:	7863      	ldrb	r3, [r4, #1]
 800f2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2c4:	d132      	bne.n	800f32c <_vfiprintf_r+0x1ac>
 800f2c6:	9b03      	ldr	r3, [sp, #12]
 800f2c8:	1d1a      	adds	r2, r3, #4
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	9203      	str	r2, [sp, #12]
 800f2ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2d2:	3402      	adds	r4, #2
 800f2d4:	9305      	str	r3, [sp, #20]
 800f2d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3ac <_vfiprintf_r+0x22c>
 800f2da:	7821      	ldrb	r1, [r4, #0]
 800f2dc:	2203      	movs	r2, #3
 800f2de:	4650      	mov	r0, sl
 800f2e0:	f7f0 ff96 	bl	8000210 <memchr>
 800f2e4:	b138      	cbz	r0, 800f2f6 <_vfiprintf_r+0x176>
 800f2e6:	9b04      	ldr	r3, [sp, #16]
 800f2e8:	eba0 000a 	sub.w	r0, r0, sl
 800f2ec:	2240      	movs	r2, #64	@ 0x40
 800f2ee:	4082      	lsls	r2, r0
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	3401      	adds	r4, #1
 800f2f4:	9304      	str	r3, [sp, #16]
 800f2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2fa:	4829      	ldr	r0, [pc, #164]	@ (800f3a0 <_vfiprintf_r+0x220>)
 800f2fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f300:	2206      	movs	r2, #6
 800f302:	f7f0 ff85 	bl	8000210 <memchr>
 800f306:	2800      	cmp	r0, #0
 800f308:	d03f      	beq.n	800f38a <_vfiprintf_r+0x20a>
 800f30a:	4b26      	ldr	r3, [pc, #152]	@ (800f3a4 <_vfiprintf_r+0x224>)
 800f30c:	bb1b      	cbnz	r3, 800f356 <_vfiprintf_r+0x1d6>
 800f30e:	9b03      	ldr	r3, [sp, #12]
 800f310:	3307      	adds	r3, #7
 800f312:	f023 0307 	bic.w	r3, r3, #7
 800f316:	3308      	adds	r3, #8
 800f318:	9303      	str	r3, [sp, #12]
 800f31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f31c:	443b      	add	r3, r7
 800f31e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f320:	e76a      	b.n	800f1f8 <_vfiprintf_r+0x78>
 800f322:	fb0c 3202 	mla	r2, ip, r2, r3
 800f326:	460c      	mov	r4, r1
 800f328:	2001      	movs	r0, #1
 800f32a:	e7a8      	b.n	800f27e <_vfiprintf_r+0xfe>
 800f32c:	2300      	movs	r3, #0
 800f32e:	3401      	adds	r4, #1
 800f330:	9305      	str	r3, [sp, #20]
 800f332:	4619      	mov	r1, r3
 800f334:	f04f 0c0a 	mov.w	ip, #10
 800f338:	4620      	mov	r0, r4
 800f33a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f33e:	3a30      	subs	r2, #48	@ 0x30
 800f340:	2a09      	cmp	r2, #9
 800f342:	d903      	bls.n	800f34c <_vfiprintf_r+0x1cc>
 800f344:	2b00      	cmp	r3, #0
 800f346:	d0c6      	beq.n	800f2d6 <_vfiprintf_r+0x156>
 800f348:	9105      	str	r1, [sp, #20]
 800f34a:	e7c4      	b.n	800f2d6 <_vfiprintf_r+0x156>
 800f34c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f350:	4604      	mov	r4, r0
 800f352:	2301      	movs	r3, #1
 800f354:	e7f0      	b.n	800f338 <_vfiprintf_r+0x1b8>
 800f356:	ab03      	add	r3, sp, #12
 800f358:	9300      	str	r3, [sp, #0]
 800f35a:	462a      	mov	r2, r5
 800f35c:	4b12      	ldr	r3, [pc, #72]	@ (800f3a8 <_vfiprintf_r+0x228>)
 800f35e:	a904      	add	r1, sp, #16
 800f360:	4630      	mov	r0, r6
 800f362:	f7fd f921 	bl	800c5a8 <_printf_float>
 800f366:	4607      	mov	r7, r0
 800f368:	1c78      	adds	r0, r7, #1
 800f36a:	d1d6      	bne.n	800f31a <_vfiprintf_r+0x19a>
 800f36c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f36e:	07d9      	lsls	r1, r3, #31
 800f370:	d405      	bmi.n	800f37e <_vfiprintf_r+0x1fe>
 800f372:	89ab      	ldrh	r3, [r5, #12]
 800f374:	059a      	lsls	r2, r3, #22
 800f376:	d402      	bmi.n	800f37e <_vfiprintf_r+0x1fe>
 800f378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f37a:	f7fd ff65 	bl	800d248 <__retarget_lock_release_recursive>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	065b      	lsls	r3, r3, #25
 800f382:	f53f af1f 	bmi.w	800f1c4 <_vfiprintf_r+0x44>
 800f386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f388:	e71e      	b.n	800f1c8 <_vfiprintf_r+0x48>
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	462a      	mov	r2, r5
 800f390:	4b05      	ldr	r3, [pc, #20]	@ (800f3a8 <_vfiprintf_r+0x228>)
 800f392:	a904      	add	r1, sp, #16
 800f394:	4630      	mov	r0, r6
 800f396:	f7fd fb9f 	bl	800cad8 <_printf_i>
 800f39a:	e7e4      	b.n	800f366 <_vfiprintf_r+0x1e6>
 800f39c:	08010934 	.word	0x08010934
 800f3a0:	0801093e 	.word	0x0801093e
 800f3a4:	0800c5a9 	.word	0x0800c5a9
 800f3a8:	0800f15d 	.word	0x0800f15d
 800f3ac:	0801093a 	.word	0x0801093a

0800f3b0 <__sflush_r>:
 800f3b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b8:	0716      	lsls	r6, r2, #28
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	460c      	mov	r4, r1
 800f3be:	d454      	bmi.n	800f46a <__sflush_r+0xba>
 800f3c0:	684b      	ldr	r3, [r1, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	dc02      	bgt.n	800f3cc <__sflush_r+0x1c>
 800f3c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	dd48      	ble.n	800f45e <__sflush_r+0xae>
 800f3cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3ce:	2e00      	cmp	r6, #0
 800f3d0:	d045      	beq.n	800f45e <__sflush_r+0xae>
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f3d8:	682f      	ldr	r7, [r5, #0]
 800f3da:	6a21      	ldr	r1, [r4, #32]
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	d030      	beq.n	800f442 <__sflush_r+0x92>
 800f3e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3e2:	89a3      	ldrh	r3, [r4, #12]
 800f3e4:	0759      	lsls	r1, r3, #29
 800f3e6:	d505      	bpl.n	800f3f4 <__sflush_r+0x44>
 800f3e8:	6863      	ldr	r3, [r4, #4]
 800f3ea:	1ad2      	subs	r2, r2, r3
 800f3ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f3ee:	b10b      	cbz	r3, 800f3f4 <__sflush_r+0x44>
 800f3f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3f2:	1ad2      	subs	r2, r2, r3
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3f8:	6a21      	ldr	r1, [r4, #32]
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	47b0      	blx	r6
 800f3fe:	1c43      	adds	r3, r0, #1
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	d106      	bne.n	800f412 <__sflush_r+0x62>
 800f404:	6829      	ldr	r1, [r5, #0]
 800f406:	291d      	cmp	r1, #29
 800f408:	d82b      	bhi.n	800f462 <__sflush_r+0xb2>
 800f40a:	4a2a      	ldr	r2, [pc, #168]	@ (800f4b4 <__sflush_r+0x104>)
 800f40c:	40ca      	lsrs	r2, r1
 800f40e:	07d6      	lsls	r6, r2, #31
 800f410:	d527      	bpl.n	800f462 <__sflush_r+0xb2>
 800f412:	2200      	movs	r2, #0
 800f414:	6062      	str	r2, [r4, #4]
 800f416:	04d9      	lsls	r1, r3, #19
 800f418:	6922      	ldr	r2, [r4, #16]
 800f41a:	6022      	str	r2, [r4, #0]
 800f41c:	d504      	bpl.n	800f428 <__sflush_r+0x78>
 800f41e:	1c42      	adds	r2, r0, #1
 800f420:	d101      	bne.n	800f426 <__sflush_r+0x76>
 800f422:	682b      	ldr	r3, [r5, #0]
 800f424:	b903      	cbnz	r3, 800f428 <__sflush_r+0x78>
 800f426:	6560      	str	r0, [r4, #84]	@ 0x54
 800f428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f42a:	602f      	str	r7, [r5, #0]
 800f42c:	b1b9      	cbz	r1, 800f45e <__sflush_r+0xae>
 800f42e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f432:	4299      	cmp	r1, r3
 800f434:	d002      	beq.n	800f43c <__sflush_r+0x8c>
 800f436:	4628      	mov	r0, r5
 800f438:	f7fe fd76 	bl	800df28 <_free_r>
 800f43c:	2300      	movs	r3, #0
 800f43e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f440:	e00d      	b.n	800f45e <__sflush_r+0xae>
 800f442:	2301      	movs	r3, #1
 800f444:	4628      	mov	r0, r5
 800f446:	47b0      	blx	r6
 800f448:	4602      	mov	r2, r0
 800f44a:	1c50      	adds	r0, r2, #1
 800f44c:	d1c9      	bne.n	800f3e2 <__sflush_r+0x32>
 800f44e:	682b      	ldr	r3, [r5, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d0c6      	beq.n	800f3e2 <__sflush_r+0x32>
 800f454:	2b1d      	cmp	r3, #29
 800f456:	d001      	beq.n	800f45c <__sflush_r+0xac>
 800f458:	2b16      	cmp	r3, #22
 800f45a:	d11e      	bne.n	800f49a <__sflush_r+0xea>
 800f45c:	602f      	str	r7, [r5, #0]
 800f45e:	2000      	movs	r0, #0
 800f460:	e022      	b.n	800f4a8 <__sflush_r+0xf8>
 800f462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f466:	b21b      	sxth	r3, r3
 800f468:	e01b      	b.n	800f4a2 <__sflush_r+0xf2>
 800f46a:	690f      	ldr	r7, [r1, #16]
 800f46c:	2f00      	cmp	r7, #0
 800f46e:	d0f6      	beq.n	800f45e <__sflush_r+0xae>
 800f470:	0793      	lsls	r3, r2, #30
 800f472:	680e      	ldr	r6, [r1, #0]
 800f474:	bf08      	it	eq
 800f476:	694b      	ldreq	r3, [r1, #20]
 800f478:	600f      	str	r7, [r1, #0]
 800f47a:	bf18      	it	ne
 800f47c:	2300      	movne	r3, #0
 800f47e:	eba6 0807 	sub.w	r8, r6, r7
 800f482:	608b      	str	r3, [r1, #8]
 800f484:	f1b8 0f00 	cmp.w	r8, #0
 800f488:	dde9      	ble.n	800f45e <__sflush_r+0xae>
 800f48a:	6a21      	ldr	r1, [r4, #32]
 800f48c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f48e:	4643      	mov	r3, r8
 800f490:	463a      	mov	r2, r7
 800f492:	4628      	mov	r0, r5
 800f494:	47b0      	blx	r6
 800f496:	2800      	cmp	r0, #0
 800f498:	dc08      	bgt.n	800f4ac <__sflush_r+0xfc>
 800f49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4a2:	81a3      	strh	r3, [r4, #12]
 800f4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ac:	4407      	add	r7, r0
 800f4ae:	eba8 0800 	sub.w	r8, r8, r0
 800f4b2:	e7e7      	b.n	800f484 <__sflush_r+0xd4>
 800f4b4:	20400001 	.word	0x20400001

0800f4b8 <_fflush_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	690b      	ldr	r3, [r1, #16]
 800f4bc:	4605      	mov	r5, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	b913      	cbnz	r3, 800f4c8 <_fflush_r+0x10>
 800f4c2:	2500      	movs	r5, #0
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	bd38      	pop	{r3, r4, r5, pc}
 800f4c8:	b118      	cbz	r0, 800f4d2 <_fflush_r+0x1a>
 800f4ca:	6a03      	ldr	r3, [r0, #32]
 800f4cc:	b90b      	cbnz	r3, 800f4d2 <_fflush_r+0x1a>
 800f4ce:	f7fd fcad 	bl	800ce2c <__sinit>
 800f4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d0f3      	beq.n	800f4c2 <_fflush_r+0xa>
 800f4da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4dc:	07d0      	lsls	r0, r2, #31
 800f4de:	d404      	bmi.n	800f4ea <_fflush_r+0x32>
 800f4e0:	0599      	lsls	r1, r3, #22
 800f4e2:	d402      	bmi.n	800f4ea <_fflush_r+0x32>
 800f4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4e6:	f7fd feae 	bl	800d246 <__retarget_lock_acquire_recursive>
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	f7ff ff5f 	bl	800f3b0 <__sflush_r>
 800f4f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4f4:	07da      	lsls	r2, r3, #31
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	d4e4      	bmi.n	800f4c4 <_fflush_r+0xc>
 800f4fa:	89a3      	ldrh	r3, [r4, #12]
 800f4fc:	059b      	lsls	r3, r3, #22
 800f4fe:	d4e1      	bmi.n	800f4c4 <_fflush_r+0xc>
 800f500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f502:	f7fd fea1 	bl	800d248 <__retarget_lock_release_recursive>
 800f506:	e7dd      	b.n	800f4c4 <_fflush_r+0xc>

0800f508 <__swhatbuf_r>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	460c      	mov	r4, r1
 800f50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f510:	2900      	cmp	r1, #0
 800f512:	b096      	sub	sp, #88	@ 0x58
 800f514:	4615      	mov	r5, r2
 800f516:	461e      	mov	r6, r3
 800f518:	da0d      	bge.n	800f536 <__swhatbuf_r+0x2e>
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f520:	f04f 0100 	mov.w	r1, #0
 800f524:	bf14      	ite	ne
 800f526:	2340      	movne	r3, #64	@ 0x40
 800f528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f52c:	2000      	movs	r0, #0
 800f52e:	6031      	str	r1, [r6, #0]
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	b016      	add	sp, #88	@ 0x58
 800f534:	bd70      	pop	{r4, r5, r6, pc}
 800f536:	466a      	mov	r2, sp
 800f538:	f000 f848 	bl	800f5cc <_fstat_r>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	dbec      	blt.n	800f51a <__swhatbuf_r+0x12>
 800f540:	9901      	ldr	r1, [sp, #4]
 800f542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f54a:	4259      	negs	r1, r3
 800f54c:	4159      	adcs	r1, r3
 800f54e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f552:	e7eb      	b.n	800f52c <__swhatbuf_r+0x24>

0800f554 <__smakebuf_r>:
 800f554:	898b      	ldrh	r3, [r1, #12]
 800f556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f558:	079d      	lsls	r5, r3, #30
 800f55a:	4606      	mov	r6, r0
 800f55c:	460c      	mov	r4, r1
 800f55e:	d507      	bpl.n	800f570 <__smakebuf_r+0x1c>
 800f560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f564:	6023      	str	r3, [r4, #0]
 800f566:	6123      	str	r3, [r4, #16]
 800f568:	2301      	movs	r3, #1
 800f56a:	6163      	str	r3, [r4, #20]
 800f56c:	b003      	add	sp, #12
 800f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f570:	ab01      	add	r3, sp, #4
 800f572:	466a      	mov	r2, sp
 800f574:	f7ff ffc8 	bl	800f508 <__swhatbuf_r>
 800f578:	9f00      	ldr	r7, [sp, #0]
 800f57a:	4605      	mov	r5, r0
 800f57c:	4639      	mov	r1, r7
 800f57e:	4630      	mov	r0, r6
 800f580:	f7ff f880 	bl	800e684 <_malloc_r>
 800f584:	b948      	cbnz	r0, 800f59a <__smakebuf_r+0x46>
 800f586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58a:	059a      	lsls	r2, r3, #22
 800f58c:	d4ee      	bmi.n	800f56c <__smakebuf_r+0x18>
 800f58e:	f023 0303 	bic.w	r3, r3, #3
 800f592:	f043 0302 	orr.w	r3, r3, #2
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	e7e2      	b.n	800f560 <__smakebuf_r+0xc>
 800f59a:	89a3      	ldrh	r3, [r4, #12]
 800f59c:	6020      	str	r0, [r4, #0]
 800f59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5a2:	81a3      	strh	r3, [r4, #12]
 800f5a4:	9b01      	ldr	r3, [sp, #4]
 800f5a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f5aa:	b15b      	cbz	r3, 800f5c4 <__smakebuf_r+0x70>
 800f5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f000 f81d 	bl	800f5f0 <_isatty_r>
 800f5b6:	b128      	cbz	r0, 800f5c4 <__smakebuf_r+0x70>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f023 0303 	bic.w	r3, r3, #3
 800f5be:	f043 0301 	orr.w	r3, r3, #1
 800f5c2:	81a3      	strh	r3, [r4, #12]
 800f5c4:	89a3      	ldrh	r3, [r4, #12]
 800f5c6:	431d      	orrs	r5, r3
 800f5c8:	81a5      	strh	r5, [r4, #12]
 800f5ca:	e7cf      	b.n	800f56c <__smakebuf_r+0x18>

0800f5cc <_fstat_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d07      	ldr	r5, [pc, #28]	@ (800f5ec <_fstat_r+0x20>)
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	602b      	str	r3, [r5, #0]
 800f5da:	f7f6 fbcf 	bl	8005d7c <_fstat>
 800f5de:	1c43      	adds	r3, r0, #1
 800f5e0:	d102      	bne.n	800f5e8 <_fstat_r+0x1c>
 800f5e2:	682b      	ldr	r3, [r5, #0]
 800f5e4:	b103      	cbz	r3, 800f5e8 <_fstat_r+0x1c>
 800f5e6:	6023      	str	r3, [r4, #0]
 800f5e8:	bd38      	pop	{r3, r4, r5, pc}
 800f5ea:	bf00      	nop
 800f5ec:	20009644 	.word	0x20009644

0800f5f0 <_isatty_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4d06      	ldr	r5, [pc, #24]	@ (800f60c <_isatty_r+0x1c>)
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	4608      	mov	r0, r1
 800f5fa:	602b      	str	r3, [r5, #0]
 800f5fc:	f7f6 fbce 	bl	8005d9c <_isatty>
 800f600:	1c43      	adds	r3, r0, #1
 800f602:	d102      	bne.n	800f60a <_isatty_r+0x1a>
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	b103      	cbz	r3, 800f60a <_isatty_r+0x1a>
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	20009644 	.word	0x20009644

0800f610 <_sbrk_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d06      	ldr	r5, [pc, #24]	@ (800f62c <_sbrk_r+0x1c>)
 800f614:	2300      	movs	r3, #0
 800f616:	4604      	mov	r4, r0
 800f618:	4608      	mov	r0, r1
 800f61a:	602b      	str	r3, [r5, #0]
 800f61c:	f7f6 fbd6 	bl	8005dcc <_sbrk>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	d102      	bne.n	800f62a <_sbrk_r+0x1a>
 800f624:	682b      	ldr	r3, [r5, #0]
 800f626:	b103      	cbz	r3, 800f62a <_sbrk_r+0x1a>
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	20009644 	.word	0x20009644

0800f630 <__assert_func>:
 800f630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f632:	4614      	mov	r4, r2
 800f634:	461a      	mov	r2, r3
 800f636:	4b09      	ldr	r3, [pc, #36]	@ (800f65c <__assert_func+0x2c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4605      	mov	r5, r0
 800f63c:	68d8      	ldr	r0, [r3, #12]
 800f63e:	b14c      	cbz	r4, 800f654 <__assert_func+0x24>
 800f640:	4b07      	ldr	r3, [pc, #28]	@ (800f660 <__assert_func+0x30>)
 800f642:	9100      	str	r1, [sp, #0]
 800f644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f648:	4906      	ldr	r1, [pc, #24]	@ (800f664 <__assert_func+0x34>)
 800f64a:	462b      	mov	r3, r5
 800f64c:	f000 f822 	bl	800f694 <fiprintf>
 800f650:	f000 f832 	bl	800f6b8 <abort>
 800f654:	4b04      	ldr	r3, [pc, #16]	@ (800f668 <__assert_func+0x38>)
 800f656:	461c      	mov	r4, r3
 800f658:	e7f3      	b.n	800f642 <__assert_func+0x12>
 800f65a:	bf00      	nop
 800f65c:	200001c4 	.word	0x200001c4
 800f660:	08010945 	.word	0x08010945
 800f664:	08010952 	.word	0x08010952
 800f668:	08010980 	.word	0x08010980

0800f66c <_calloc_r>:
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	fba1 5402 	umull	r5, r4, r1, r2
 800f672:	b934      	cbnz	r4, 800f682 <_calloc_r+0x16>
 800f674:	4629      	mov	r1, r5
 800f676:	f7ff f805 	bl	800e684 <_malloc_r>
 800f67a:	4606      	mov	r6, r0
 800f67c:	b928      	cbnz	r0, 800f68a <_calloc_r+0x1e>
 800f67e:	4630      	mov	r0, r6
 800f680:	bd70      	pop	{r4, r5, r6, pc}
 800f682:	220c      	movs	r2, #12
 800f684:	6002      	str	r2, [r0, #0]
 800f686:	2600      	movs	r6, #0
 800f688:	e7f9      	b.n	800f67e <_calloc_r+0x12>
 800f68a:	462a      	mov	r2, r5
 800f68c:	4621      	mov	r1, r4
 800f68e:	f7fd fd4b 	bl	800d128 <memset>
 800f692:	e7f4      	b.n	800f67e <_calloc_r+0x12>

0800f694 <fiprintf>:
 800f694:	b40e      	push	{r1, r2, r3}
 800f696:	b503      	push	{r0, r1, lr}
 800f698:	4601      	mov	r1, r0
 800f69a:	ab03      	add	r3, sp, #12
 800f69c:	4805      	ldr	r0, [pc, #20]	@ (800f6b4 <fiprintf+0x20>)
 800f69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a2:	6800      	ldr	r0, [r0, #0]
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	f7ff fd6b 	bl	800f180 <_vfiprintf_r>
 800f6aa:	b002      	add	sp, #8
 800f6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6b0:	b003      	add	sp, #12
 800f6b2:	4770      	bx	lr
 800f6b4:	200001c4 	.word	0x200001c4

0800f6b8 <abort>:
 800f6b8:	b508      	push	{r3, lr}
 800f6ba:	2006      	movs	r0, #6
 800f6bc:	f000 f82c 	bl	800f718 <raise>
 800f6c0:	2001      	movs	r0, #1
 800f6c2:	f7f6 fb0b 	bl	8005cdc <_exit>

0800f6c6 <_raise_r>:
 800f6c6:	291f      	cmp	r1, #31
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4605      	mov	r5, r0
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	d904      	bls.n	800f6da <_raise_r+0x14>
 800f6d0:	2316      	movs	r3, #22
 800f6d2:	6003      	str	r3, [r0, #0]
 800f6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d8:	bd38      	pop	{r3, r4, r5, pc}
 800f6da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f6dc:	b112      	cbz	r2, 800f6e4 <_raise_r+0x1e>
 800f6de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6e2:	b94b      	cbnz	r3, 800f6f8 <_raise_r+0x32>
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f000 f831 	bl	800f74c <_getpid_r>
 800f6ea:	4622      	mov	r2, r4
 800f6ec:	4601      	mov	r1, r0
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6f4:	f000 b818 	b.w	800f728 <_kill_r>
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d00a      	beq.n	800f712 <_raise_r+0x4c>
 800f6fc:	1c59      	adds	r1, r3, #1
 800f6fe:	d103      	bne.n	800f708 <_raise_r+0x42>
 800f700:	2316      	movs	r3, #22
 800f702:	6003      	str	r3, [r0, #0]
 800f704:	2001      	movs	r0, #1
 800f706:	e7e7      	b.n	800f6d8 <_raise_r+0x12>
 800f708:	2100      	movs	r1, #0
 800f70a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f70e:	4620      	mov	r0, r4
 800f710:	4798      	blx	r3
 800f712:	2000      	movs	r0, #0
 800f714:	e7e0      	b.n	800f6d8 <_raise_r+0x12>
	...

0800f718 <raise>:
 800f718:	4b02      	ldr	r3, [pc, #8]	@ (800f724 <raise+0xc>)
 800f71a:	4601      	mov	r1, r0
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f7ff bfd2 	b.w	800f6c6 <_raise_r>
 800f722:	bf00      	nop
 800f724:	200001c4 	.word	0x200001c4

0800f728 <_kill_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	4d07      	ldr	r5, [pc, #28]	@ (800f748 <_kill_r+0x20>)
 800f72c:	2300      	movs	r3, #0
 800f72e:	4604      	mov	r4, r0
 800f730:	4608      	mov	r0, r1
 800f732:	4611      	mov	r1, r2
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	f7f6 fac1 	bl	8005cbc <_kill>
 800f73a:	1c43      	adds	r3, r0, #1
 800f73c:	d102      	bne.n	800f744 <_kill_r+0x1c>
 800f73e:	682b      	ldr	r3, [r5, #0]
 800f740:	b103      	cbz	r3, 800f744 <_kill_r+0x1c>
 800f742:	6023      	str	r3, [r4, #0]
 800f744:	bd38      	pop	{r3, r4, r5, pc}
 800f746:	bf00      	nop
 800f748:	20009644 	.word	0x20009644

0800f74c <_getpid_r>:
 800f74c:	f7f6 baae 	b.w	8005cac <_getpid>

0800f750 <_init>:
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	bf00      	nop
 800f754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f756:	bc08      	pop	{r3}
 800f758:	469e      	mov	lr, r3
 800f75a:	4770      	bx	lr

0800f75c <_fini>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	bf00      	nop
 800f760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f762:	bc08      	pop	{r3}
 800f764:	469e      	mov	lr, r3
 800f766:	4770      	bx	lr
