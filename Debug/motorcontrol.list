
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08008b98  08008b98  00018b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009188  08009188  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009190  08009190  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca0  20000200  08009394  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  08009394  00020ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186eb  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003762  00000000  00000000  00038917  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003d440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000738d  00000000  00000000  0003e628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012310  00000000  00000000  000459b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db474  00000000  00000000  00057cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef8  00000000  00000000  001331b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b7c 	.word	0x08008b7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08008b7c 	.word	0x08008b7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <MX_ADC1_Init+0xcc>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f58:	f001 fb38 	bl	80025cc <HAL_ADC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000f62:	f000 fe0d 	bl	8001b80 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8000f66:	2316      	movs	r3, #22
 8000f68:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f7a:	f001 fd99 	bl	8002ab0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000f84:	f000 fdfc 	bl	8001b80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f88:	230a      	movs	r3, #10
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_ADC1_Init+0xc8>)
 8000f9a:	f001 fb5b 	bl	8002654 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000fa4:	f000 fdec 	bl	8001b80 <Error_Handler>
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000270 	.word	0x20000270
 8000fb4:	40012000 	.word	0x40012000

08000fb8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <MX_ADC2_Init+0x90>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_ADC2_Init+0x8c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_ADC2_Init+0x8c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_ADC2_Init+0x8c>)
 8001008:	2201      	movs	r2, #1
 800100a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_ADC2_Init+0x8c>)
 800100e:	f001 fadd 	bl	80025cc <HAL_ADC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001018:	f000 fdb2 	bl	8001b80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800101c:	230b      	movs	r3, #11
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_ADC2_Init+0x8c>)
 800102e:	f001 fb11 	bl	8002654 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001038:	f000 fda2 	bl	8001b80 <Error_Handler>
  }

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000228 	.word	0x20000228
 8001048:	40012100 	.word	0x40012100

0800104c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC3_Init+0x8c>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <MX_ADC3_Init+0x90>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_ADC3_Init+0x8c>)
 8001066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ADC3_Init+0x8c>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_ADC3_Init+0x8c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_ADC3_Init+0x8c>)
 800107a:	2200      	movs	r2, #0
 800107c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_ADC3_Init+0x8c>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_ADC3_Init+0x8c>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_ADC3_Init+0x8c>)
 800108e:	2201      	movs	r2, #1
 8001090:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_ADC3_Init+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_ADC3_Init+0x8c>)
 800109c:	2201      	movs	r2, #1
 800109e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_ADC3_Init+0x8c>)
 80010a2:	f001 fa93 	bl	80025cc <HAL_ADC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80010ac:	f000 fd68 	bl	8001b80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010b0:	230c      	movs	r3, #12
 80010b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_ADC3_Init+0x8c>)
 80010c2:	f001 fac7 	bl	8002654 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80010cc:	f000 fd58 	bl	8001b80 <Error_Handler>
  }

}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002b8 	.word	0x200002b8
 80010dc:	40012200 	.word	0x40012200

080010e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a45      	ldr	r2, [pc, #276]	; (8001214 <HAL_ADC_MspInit+0x134>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	4b44      	ldr	r3, [pc, #272]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a43      	ldr	r2, [pc, #268]	; (8001218 <HAL_ADC_MspInit+0x138>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b41      	ldr	r3, [pc, #260]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a3c      	ldr	r2, [pc, #240]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113a:	2301      	movs	r3, #1
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4833      	ldr	r0, [pc, #204]	; (800121c <HAL_ADC_MspInit+0x13c>)
 800114e:	f002 f957 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001152:	e05a      	b.n	800120a <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a31      	ldr	r2, [pc, #196]	; (8001220 <HAL_ADC_MspInit+0x140>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_MspInit+0x138>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_ADC_MspInit+0x138>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001196:	2302      	movs	r3, #2
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	481c      	ldr	r0, [pc, #112]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011aa:	f002 f929 	bl	8003400 <HAL_GPIO_Init>
}
 80011ae:	e02c      	b.n	800120a <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0x144>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d127      	bne.n	800120a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_ADC_MspInit+0x138>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_ADC_MspInit+0x138>)
 80011c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_ADC_MspInit+0x138>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_ADC_MspInit+0x138>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_ADC_MspInit+0x138>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_ADC_MspInit+0x138>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f2:	2304      	movs	r3, #4
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_ADC_MspInit+0x13c>)
 8001206:	f002 f8fb 	bl	8003400 <HAL_GPIO_Init>
}
 800120a:	bf00      	nop
 800120c:	3738      	adds	r7, #56	; 0x38
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012000 	.word	0x40012000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800
 8001220:	40012100 	.word	0x40012100
 8001224:	40012200 	.word	0x40012200

08001228 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_CAN1_Init+0x64>)
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <MX_CAN1_Init+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_CAN1_Init+0x64>)
 8001234:	2205      	movs	r2, #5
 8001236:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_CAN1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_CAN1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_CAN1_Init+0x64>)
 8001246:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800124a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_CAN1_Init+0x64>)
 800124e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8001252:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <MX_CAN1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_CAN1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_CAN1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_CAN1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_CAN1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_CAN1_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_CAN1_Init+0x64>)
 800127a:	f001 fc5f 	bl	8002b3c <HAL_CAN_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001284:	f000 fc7c 	bl	8001b80 <Error_Handler>
  }

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000300 	.word	0x20000300
 8001290:	40006400 	.word	0x40006400

08001294 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_CAN_MspInit+0x94>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d134      	bne.n	8001320 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_CAN_MspInit+0x98>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_CAN_MspInit+0x98>)
 80012c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_CAN_MspInit+0x98>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_CAN_MspInit+0x98>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_CAN_MspInit+0x98>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_CAN_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001300:	2309      	movs	r3, #9
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_CAN_MspInit+0x9c>)
 800130c:	f002 f878 	bl	8003400 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2014      	movs	r0, #20
 8001316:	f002 f81a 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800131a:	2014      	movs	r0, #20
 800131c:	f002 f833 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40006400 	.word	0x40006400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020400 	.word	0x40020400

08001334 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b07      	cmp	r3, #7
 8001342:	d901      	bls.n	8001348 <flash_writer_init+0x14>
 8001344:	2307      	movs	r3, #7
 8001346:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <flash_writer_init+0x38>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000000 	.word	0x20000000

08001370 <flash_read_int>:
void flash_writer_close(FlashWriter * fw) {
    FLASH_Lock();
    fw->ready = false;
}

int flash_read_int(FlashWriter fw, uint32_t index) {
 8001370:	b490      	push	{r4, r7}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	1d3c      	adds	r4, r7, #4
 8001378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800137c:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <flash_read_int+0x28>)
 8001382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr
 8001398:	20000000 	.word	0x20000000

0800139c <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 800139c:	b490      	push	{r4, r7}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	1d3c      	adds	r4, r7, #4
 80013a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013a8:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <flash_read_float+0x30>)
 80013ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	ee07 3a90 	vmov	s15, r3
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc90      	pop	{r4, r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000

080013d0 <run_fsm>:
#include "usart.h"
#include <stdio.h>
//#include "PreferenceWriter.h"
#include "user_config.h"

 void run_fsm(FSMStruct * fsmstate){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	 /* run_smf is run every commutation interrupt cycle */
	 if(fsmstate->state_change){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <run_fsm+0x1c>
		 printf("FSM State %d\r\n", fsmstate->state);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	481b      	ldr	r0, [pc, #108]	; (8001454 <run_fsm+0x84>)
 80013e8:	f005 fd4a 	bl	8006e80 <iprintf>
	 }

	 switch(fsmstate->state){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d82a      	bhi.n	800144a <run_fsm+0x7a>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <run_fsm+0x2c>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	08001419 	.word	0x08001419
 8001400:	08001441 	.word	0x08001441
 8001404:	08001441 	.word	0x08001441
 8001408:	0800144b 	.word	0x0800144b
 800140c:	0800142d 	.word	0x0800142d
 8001410:	08001441 	.word	0x08001441
 8001414:	08001441 	.word	0x08001441
	 case MENU_MODE:
		 if(fsmstate->state_change){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d011      	beq.n	8001444 <run_fsm+0x74>
			 enter_menu_state();
 8001420:	f000 f8aa 	bl	8001578 <enter_menu_state>
		 	 fsmstate->state_change = 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	705a      	strb	r2, [r3, #1]
		 	 }
		 break;
 800142a:	e00b      	b.n	8001444 <run_fsm+0x74>
	 case CALIBRATION_MODE:
		 break;
	 case MOTOR_MODE:
		 break;
	 case SETUP_MODE:
		 if(fsmstate->state_change){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <run_fsm+0x78>
		 	enter_setup_state();
 8001434:	f000 f8cc 	bl	80015d0 <enter_setup_state>
		 	fsmstate->state_change = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	705a      	strb	r2, [r3, #1]
		 	 }
		 break;
 800143e:	e003      	b.n	8001448 <run_fsm+0x78>
		 break;
 8001440:	bf00      	nop
 8001442:	e002      	b.n	800144a <run_fsm+0x7a>
		 break;
 8001444:	bf00      	nop
 8001446:	e000      	b.n	800144a <run_fsm+0x7a>
		 break;
 8001448:	bf00      	nop
		 break;
	 case INIT_TEMP_MODE:
		 break;
	 }

 }
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08008b98 	.word	0x08008b98

08001458 <update_fsm>:



 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == 27){	// escape to exit do rest mode
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	2b1b      	cmp	r3, #27
 8001468:	d106      	bne.n	8001478 <update_fsm+0x20>
		fsmstate->state = MENU_MODE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
		fsmstate->state_change = 1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	705a      	strb	r2, [r3, #1]
		return;
 8001476:	e078      	b.n	800156a <update_fsm+0x112>
	}
	switch(fsmstate->state){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d874      	bhi.n	800156a <update_fsm+0x112>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <update_fsm+0x30>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	080014a1 	.word	0x080014a1
 800148c:	0800156b 	.word	0x0800156b
 8001490:	0800156b 	.word	0x0800156b
 8001494:	0800156b 	.word	0x0800156b
 8001498:	0800156b 	.word	0x0800156b
 800149c:	0800156b 	.word	0x0800156b
	case MENU_MODE:
        switch (fsm_input){
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	3b63      	subs	r3, #99	; 0x63
 80014a4:	2b17      	cmp	r3, #23
 80014a6:	d85f      	bhi.n	8001568 <update_fsm+0x110>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <update_fsm+0x58>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	08001511 	.word	0x08001511
 80014b4:	08001569 	.word	0x08001569
 80014b8:	0800152d 	.word	0x0800152d
 80014bc:	08001569 	.word	0x08001569
 80014c0:	08001569 	.word	0x08001569
 80014c4:	08001569 	.word	0x08001569
 80014c8:	08001569 	.word	0x08001569
 80014cc:	08001569 	.word	0x08001569
 80014d0:	08001569 	.word	0x08001569
 80014d4:	08001569 	.word	0x08001569
 80014d8:	0800151f 	.word	0x0800151f
 80014dc:	08001569 	.word	0x08001569
 80014e0:	08001569 	.word	0x08001569
 80014e4:	08001569 	.word	0x08001569
 80014e8:	08001569 	.word	0x08001569
 80014ec:	08001569 	.word	0x08001569
 80014f0:	0800153b 	.word	0x0800153b
 80014f4:	08001569 	.word	0x08001569
 80014f8:	08001569 	.word	0x08001569
 80014fc:	08001569 	.word	0x08001569
 8001500:	08001569 	.word	0x08001569
 8001504:	08001569 	.word	0x08001569
 8001508:	08001569 	.word	0x08001569
 800150c:	08001549 	.word	0x08001549
            case 'c':
            	fsmstate->state = CALIBRATION_MODE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
            	fsmstate->state_change = 1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	705a      	strb	r2, [r3, #1]
                break;
 800151c:	e024      	b.n	8001568 <update_fsm+0x110>
            case 'm':
            	fsmstate->state = MOTOR_MODE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
            	fsmstate->state_change = 1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	705a      	strb	r2, [r3, #1]
                break;
 800152a:	e01d      	b.n	8001568 <update_fsm+0x110>
            case 'e':
            	fsmstate->state = ENCODER_MODE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2205      	movs	r2, #5
 8001530:	701a      	strb	r2, [r3, #0]
            	fsmstate->state_change = 1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	705a      	strb	r2, [r3, #1]
                break;
 8001538:	e016      	b.n	8001568 <update_fsm+0x110>
            case 's':
            	fsmstate->state = SETUP_MODE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2204      	movs	r2, #4
 800153e:	701a      	strb	r2, [r3, #0]
            	fsmstate->state_change = 1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	705a      	strb	r2, [r3, #1]
                break;
 8001546:	e00f      	b.n	8001568 <update_fsm+0x110>
            case 'z':
                //spi.SetMechOffset(0);
                //spi.Sample(DT);
                HAL_Delay(20);
 8001548:	2014      	movs	r0, #20
 800154a:	f001 f81d 	bl	8002588 <HAL_Delay>
                //if (!prefs.ready()) prefs.open();
                //    prefs.flush();                                                  // Write new prefs to flash
                //    prefs.close();
                //    prefs.load();
                //spi.SetMechOffset(M_OFFSET);
                printf("\n\r  Saved new zero position:  %.4f\n\r\n\r", M_OFFSET);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <update_fsm+0x118>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f818 	bl	8000588 <__aeabi_f2d>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <update_fsm+0x11c>)
 8001562:	f005 fc8d 	bl	8006e80 <iprintf>
                break;
 8001566:	bf00      	nop
            }
		break;
 8001568:	bf00      	nop
		break;
	case MOTOR_MODE:
		break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	2000056c 	.word	0x2000056c
 8001574:	08008ba8 	.word	0x08008ba8

08001578 <enter_menu_state>:


 void enter_menu_state(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r\n\r");
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <enter_menu_state+0x38>)
 800157e:	f005 fc7f 	bl	8006e80 <iprintf>
	    printf(" Commands:\n\r");
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <enter_menu_state+0x3c>)
 8001584:	f005 fc7c 	bl	8006e80 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <enter_menu_state+0x40>)
 800158a:	f005 fc79 	bl	8006e80 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <enter_menu_state+0x44>)
 8001590:	f005 fc76 	bl	8006e80 <iprintf>
	    printf(" s - Setup\n\r");
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <enter_menu_state+0x48>)
 8001596:	f005 fc73 	bl	8006e80 <iprintf>
	    printf(" e - Display Encoder\n\r");
 800159a:	480a      	ldr	r0, [pc, #40]	; (80015c4 <enter_menu_state+0x4c>)
 800159c:	f005 fc70 	bl	8006e80 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <enter_menu_state+0x50>)
 80015a2:	f005 fc6d 	bl	8006e80 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <enter_menu_state+0x54>)
 80015a8:	f005 fc6a 	bl	8006e80 <iprintf>

	    //gpio.led->write(0);
 }
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08008bd0 	.word	0x08008bd0
 80015b4:	08008bd8 	.word	0x08008bd8
 80015b8:	08008be8 	.word	0x08008be8
 80015bc:	08008bfc 	.word	0x08008bfc
 80015c0:	08008c18 	.word	0x08008c18
 80015c4:	08008c28 	.word	0x08008c28
 80015c8:	08008c40 	.word	0x08008c40
 80015cc:	08008c5c 	.word	0x08008c5c

080015d0 <enter_setup_state>:

 void enter_setup_state(void){
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af04      	add	r7, sp, #16
	    printf("\n\r\n\r Configuration Options \n\r\n\n");
 80015d6:	4845      	ldr	r0, [pc, #276]	; (80016ec <enter_setup_state+0x11c>)
 80015d8:	f005 fcc6 	bl	8006f68 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-2s\n\r\n\r", "prefix", "parameter", "min", "max", "current value");
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <enter_setup_state+0x120>)
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <enter_setup_state+0x124>)
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <enter_setup_state+0x128>)
 80015e6:	4a45      	ldr	r2, [pc, #276]	; (80016fc <enter_setup_state+0x12c>)
 80015e8:	4945      	ldr	r1, [pc, #276]	; (8001700 <enter_setup_state+0x130>)
 80015ea:	4846      	ldr	r0, [pc, #280]	; (8001704 <enter_setup_state+0x134>)
 80015ec:	f005 fc48 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 80015f0:	4b45      	ldr	r3, [pc, #276]	; (8001708 <enter_setup_state+0x138>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffc7 	bl	8000588 <__aeabi_f2d>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <enter_setup_state+0x13c>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <enter_setup_state+0x140>)
 8001608:	4a42      	ldr	r2, [pc, #264]	; (8001714 <enter_setup_state+0x144>)
 800160a:	4943      	ldr	r1, [pc, #268]	; (8001718 <enter_setup_state+0x148>)
 800160c:	4843      	ldr	r0, [pc, #268]	; (800171c <enter_setup_state+0x14c>)
 800160e:	f005 fc37 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <enter_setup_state+0x150>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <enter_setup_state+0x154>)
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <enter_setup_state+0x158>)
 800161e:	4a43      	ldr	r2, [pc, #268]	; (800172c <enter_setup_state+0x15c>)
 8001620:	4943      	ldr	r1, [pc, #268]	; (8001730 <enter_setup_state+0x160>)
 8001622:	4844      	ldr	r0, [pc, #272]	; (8001734 <enter_setup_state+0x164>)
 8001624:	f005 fc2c 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8001628:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <enter_setup_state+0x150>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <enter_setup_state+0x154>)
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <enter_setup_state+0x158>)
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <enter_setup_state+0x168>)
 8001636:	4941      	ldr	r1, [pc, #260]	; (800173c <enter_setup_state+0x16c>)
 8001638:	483e      	ldr	r0, [pc, #248]	; (8001734 <enter_setup_state+0x164>)
 800163a:	f005 fc21 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <enter_setup_state+0x138>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ffa0 	bl	8000588 <__aeabi_f2d>
 8001648:	4603      	mov	r3, r0
 800164a:	460c      	mov	r4, r1
 800164c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <enter_setup_state+0x170>)
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <enter_setup_state+0x174>)
 8001656:	4a3c      	ldr	r2, [pc, #240]	; (8001748 <enter_setup_state+0x178>)
 8001658:	493c      	ldr	r1, [pc, #240]	; (800174c <enter_setup_state+0x17c>)
 800165a:	4830      	ldr	r0, [pc, #192]	; (800171c <enter_setup_state+0x14c>)
 800165c:	f005 fc10 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <enter_setup_state+0x138>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff8f 	bl	8000588 <__aeabi_f2d>
 800166a:	4603      	mov	r3, r0
 800166c:	460c      	mov	r4, r1
 800166e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <enter_setup_state+0x180>)
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <enter_setup_state+0x174>)
 8001678:	4a36      	ldr	r2, [pc, #216]	; (8001754 <enter_setup_state+0x184>)
 800167a:	4937      	ldr	r1, [pc, #220]	; (8001758 <enter_setup_state+0x188>)
 800167c:	4827      	ldr	r0, [pc, #156]	; (800171c <enter_setup_state+0x14c>)
 800167e:	f005 fbff 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <enter_setup_state+0x150>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <enter_setup_state+0x18c>)
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <enter_setup_state+0x158>)
 800168e:	4a34      	ldr	r2, [pc, #208]	; (8001760 <enter_setup_state+0x190>)
 8001690:	4934      	ldr	r1, [pc, #208]	; (8001764 <enter_setup_state+0x194>)
 8001692:	4835      	ldr	r0, [pc, #212]	; (8001768 <enter_setup_state+0x198>)
 8001694:	f005 fbf4 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <enter_setup_state+0x138>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff73 	bl	8000588 <__aeabi_f2d>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80016aa:	4b30      	ldr	r3, [pc, #192]	; (800176c <enter_setup_state+0x19c>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <enter_setup_state+0x158>)
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <enter_setup_state+0x1a0>)
 80016b2:	4930      	ldr	r1, [pc, #192]	; (8001774 <enter_setup_state+0x1a4>)
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <enter_setup_state+0x14c>)
 80016b6:	f005 fbe3 	bl	8006e80 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0", "40.0", I_MAX_CONT);
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <enter_setup_state+0x138>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff62 	bl	8000588 <__aeabi_f2d>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <enter_setup_state+0x170>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <enter_setup_state+0x158>)
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <enter_setup_state+0x1a8>)
 80016d4:	4929      	ldr	r1, [pc, #164]	; (800177c <enter_setup_state+0x1ac>)
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <enter_setup_state+0x14c>)
 80016d8:	f005 fbd2 	bl	8006e80 <iprintf>
	    printf("\n\r To change a value, type 'prefix''value''ENTER'\n\r i.e. 'b1000''ENTER'\n\r\n\r");
 80016dc:	4828      	ldr	r0, [pc, #160]	; (8001780 <enter_setup_state+0x1b0>)
 80016de:	f005 fbcf 	bl	8006e80 <iprintf>
 }
 80016e2:	bf00      	nop
 80016e4:	3704      	adds	r7, #4
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	08008c74 	.word	0x08008c74
 80016f0:	08008ccc 	.word	0x08008ccc
 80016f4:	08008cdc 	.word	0x08008cdc
 80016f8:	08008c94 	.word	0x08008c94
 80016fc:	08008c98 	.word	0x08008c98
 8001700:	08008ca4 	.word	0x08008ca4
 8001704:	08008cac 	.word	0x08008cac
 8001708:	2000056c 	.word	0x2000056c
 800170c:	08008d20 	.word	0x08008d20
 8001710:	08008ce0 	.word	0x08008ce0
 8001714:	08008ce4 	.word	0x08008ce4
 8001718:	08008cfc 	.word	0x08008cfc
 800171c:	08008d00 	.word	0x08008d00
 8001720:	20000940 	.word	0x20000940
 8001724:	08008d58 	.word	0x08008d58
 8001728:	08008d28 	.word	0x08008d28
 800172c:	08008d2c 	.word	0x08008d2c
 8001730:	08008d34 	.word	0x08008d34
 8001734:	08008d38 	.word	0x08008d38
 8001738:	08008d5c 	.word	0x08008d5c
 800173c:	08008d6c 	.word	0x08008d6c
 8001740:	08008d8c 	.word	0x08008d8c
 8001744:	08008d70 	.word	0x08008d70
 8001748:	08008d74 	.word	0x08008d74
 800174c:	08008d88 	.word	0x08008d88
 8001750:	08008db0 	.word	0x08008db0
 8001754:	08008d94 	.word	0x08008d94
 8001758:	08008dac 	.word	0x08008dac
 800175c:	08008df8 	.word	0x08008df8
 8001760:	08008db8 	.word	0x08008db8
 8001764:	08008dd8 	.word	0x08008dd8
 8001768:	08008ddc 	.word	0x08008ddc
 800176c:	08008e20 	.word	0x08008e20
 8001770:	08008e00 	.word	0x08008e00
 8001774:	08008e1c 	.word	0x08008e1c
 8001778:	08008e24 	.word	0x08008e24
 800177c:	08008e3c 	.word	0x08008e3c
 8001780:	08008e40 	.word	0x08008e40

08001784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <MX_GPIO_Init+0xf8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a36      	ldr	r2, [pc, #216]	; (800187c <MX_GPIO_Init+0xf8>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <MX_GPIO_Init+0xf8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <MX_GPIO_Init+0xf8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a2f      	ldr	r2, [pc, #188]	; (800187c <MX_GPIO_Init+0xf8>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <MX_GPIO_Init+0xf8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_GPIO_Init+0xf8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <MX_GPIO_Init+0xf8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <MX_GPIO_Init+0xf8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_GPIO_Init+0xf8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_GPIO_Init+0xf8>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_GPIO_Init+0xf8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f648 0110 	movw	r1, #34832	; 0x8810
 8001810:	481b      	ldr	r0, [pc, #108]	; (8001880 <MX_GPIO_Init+0xfc>)
 8001812:	f001 ff87 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2120      	movs	r1, #32
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <MX_GPIO_Init+0x100>)
 800181c:	f001 ff82 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_GPIO_Init+0x104>)
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_GPIO_Init+0x100>)
 8001836:	f001 fde3 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800183a:	f648 0310 	movw	r3, #34832	; 0x8810
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_GPIO_Init+0xfc>)
 8001854:	f001 fdd4 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001858:	2320      	movs	r3, #32
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_GPIO_Init+0x100>)
 8001870:	f001 fdc6 	bl	8003400 <HAL_GPIO_Init>

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020800 	.word	0x40020800
 8001888:	10210000 	.word	0x10210000

0800188c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001892:	f000 fe07 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001896:	f000 f901 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189a:	f7ff ff73 	bl	8001784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800189e:	f000 fd39 	bl	8002314 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018a2:	f000 fc1d 	bl	80020e0 <MX_TIM1_Init>
  MX_CAN1_Init();
 80018a6:	f7ff fcbf 	bl	8001228 <MX_CAN1_Init>
  MX_SPI1_Init();
 80018aa:	f000 f9c1 	bl	8001c30 <MX_SPI1_Init>
  MX_SPI3_Init();
 80018ae:	f000 f9f7 	bl	8001ca0 <MX_SPI3_Init>
  MX_ADC1_Init();
 80018b2:	f7ff fb19 	bl	8000ee8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018b6:	f7ff fb7f 	bl	8000fb8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80018ba:	f7ff fbc7 	bl	800104c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */



  preference_writer_init(&prefs, 6);
 80018be:	2106      	movs	r1, #6
 80018c0:	4868      	ldr	r0, [pc, #416]	; (8001a64 <main+0x1d8>)
 80018c2:	f000 f964 	bl	8001b8e <preference_writer_init>
  preference_writer_load(prefs);
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <main+0x1d8>)
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	9200      	str	r2, [sp, #0]
 80018cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ce:	f000 f96f 	bl	8001bb0 <preference_writer_load>
  /* Sanitize configs in case flash is empty*/
  if(isnan(E_OFFSET)){E_OFFSET = 0.0f;}
 80018d2:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <main+0x1dc>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eef4 7a67 	vcmp.f32	s15, s15
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d703      	bvc.n	80018ea <main+0x5e>
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <main+0x1dc>)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
  if(isnan(M_OFFSET)){M_OFFSET = 0.0f;}
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <main+0x1dc>)
 80018ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f0:	eef4 7a67 	vcmp.f32	s15, s15
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	d703      	bvc.n	8001902 <main+0x76>
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <main+0x1dc>)
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <main+0x1dc>)
 8001904:	edd3 7a02 	vldr	s15, [r3, #8]
 8001908:	eef4 7a67 	vcmp.f32	s15, s15
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d609      	bvs.n	8001926 <main+0x9a>
 8001912:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <main+0x1dc>)
 8001914:	edd3 7a02 	vldr	s15, [r3, #8]
 8001918:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800191c:	eef4 7a47 	vcmp.f32	s15, s14
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d102      	bne.n	800192c <main+0xa0>
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <main+0x1dc>)
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <main+0x1e0>)
 800192a:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <main+0x1dc>)
 800192e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001932:	eef4 7a67 	vcmp.f32	s15, s15
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	d609      	bvs.n	8001950 <main+0xc4>
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <main+0x1dc>)
 800193e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001942:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001946:	eef4 7a47 	vcmp.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d102      	bne.n	8001956 <main+0xca>
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <main+0x1dc>)
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <main+0x1e4>)
 8001954:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=12;}
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <main+0x1dc>)
 8001958:	edd3 7a06 	vldr	s15, [r3, #24]
 800195c:	eef4 7a67 	vcmp.f32	s15, s15
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	d609      	bvs.n	800197a <main+0xee>
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <main+0x1dc>)
 8001968:	edd3 7a06 	vldr	s15, [r3, #24]
 800196c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001970:	eef4 7a47 	vcmp.f32	s15, s14
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	d102      	bne.n	8001980 <main+0xf4>
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <main+0x1dc>)
 800197c:	4a3d      	ldr	r2, [pc, #244]	; (8001a74 <main+0x1e8>)
 800197e:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8001980:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <main+0x1ec>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d102      	bne.n	8001990 <main+0x104>
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <main+0x1ec>)
 800198c:	2201      	movs	r2, #1
 800198e:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <main+0x1ec>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d102      	bne.n	80019a0 <main+0x114>
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <main+0x1ec>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <main+0x1ec>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d103      	bne.n	80019b2 <main+0x126>
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <main+0x1ec>)
 80019ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b0:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <main+0x1dc>)
 80019b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80019b8:	eef4 7a67 	vcmp.f32	s15, s15
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	d609      	bvs.n	80019d6 <main+0x14a>
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <main+0x1dc>)
 80019c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80019c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019cc:	eef4 7a47 	vcmp.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d103      	bne.n	80019de <main+0x152>
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <main+0x1dc>)
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <main+0x1dc>)
 80019e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80019e4:	eef4 7a67 	vcmp.f32	s15, s15
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d609      	bvs.n	8001a02 <main+0x176>
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <main+0x1dc>)
 80019f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80019f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019f8:	eef4 7a47 	vcmp.f32	s15, s14
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	d102      	bne.n	8001a08 <main+0x17c>
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <main+0x1dc>)
 8001a04:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <main+0x1f0>)
 8001a06:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <main+0x1dc>)
 8001a0a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a0e:	eef4 7a67 	vcmp.f32	s15, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d609      	bvs.n	8001a2c <main+0x1a0>
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <main+0x1dc>)
 8001a1a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001a22:	eef4 7a47 	vcmp.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d102      	bne.n	8001a32 <main+0x1a6>
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <main+0x1dc>)
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <main+0x1f4>)
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

  printf("Version Number: %.2f\r\n", VERSION_NUM);
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <main+0x1f8>)
 8001a3c:	f005 fa20 	bl	8006e80 <iprintf>
  preference_writer_flush(&prefs);
  preference_writer_close(&prefs);

*/

  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8001a40:	2201      	movs	r2, #1
 8001a42:	4911      	ldr	r1, [pc, #68]	; (8001a88 <main+0x1fc>)
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <main+0x200>)
 8001a46:	f003 fe8b 	bl	8005760 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001a4a:	4811      	ldr	r0, [pc, #68]	; (8001a90 <main+0x204>)
 8001a4c:	f002 fec5 	bl	80047da <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(200);
 8001a50:	20c8      	movs	r0, #200	; 0xc8
 8001a52:	f000 fd99 	bl	8002588 <HAL_Delay>
	  //printf("hello\r\n");
	  printf("%d\r\n", comm_encoder.spi_rx_word);
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <main+0x208>)
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480e      	ldr	r0, [pc, #56]	; (8001a98 <main+0x20c>)
 8001a5e:	f005 fa0f 	bl	8006e80 <iprintf>
	  HAL_Delay(200);
 8001a62:	e7f5      	b.n	8001a50 <main+0x1c4>
 8001a64:	20000558 	.word	0x20000558
 8001a68:	2000056c 	.word	0x2000056c
 8001a6c:	447a0000 	.word	0x447a0000
 8001a70:	42200000 	.word	0x42200000
 8001a74:	41400000 	.word	0x41400000
 8001a78:	20000940 	.word	0x20000940
 8001a7c:	42fa0000 	.word	0x42fa0000
 8001a80:	41600000 	.word	0x41600000
 8001a84:	08008e8c 	.word	0x08008e8c
 8001a88:	20000550 	.word	0x20000550
 8001a8c:	20000e58 	.word	0x20000e58
 8001a90:	20000e18 	.word	0x20000e18
 8001a94:	20000328 	.word	0x20000328
 8001a98:	08008ea4 	.word	0x08008ea4

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	; 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2234      	movs	r2, #52	; 0x34
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fcdc 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <SystemClock_Config+0xdc>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <SystemClock_Config+0xdc>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <SystemClock_Config+0xdc>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001adc:	2300      	movs	r3, #0
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <SystemClock_Config+0xe0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <SystemClock_Config+0xe0>)
 8001ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <SystemClock_Config+0xe0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b00:	2310      	movs	r3, #16
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b04:	2302      	movs	r3, #2
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b10:	23b4      	movs	r3, #180	; 0xb4
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 f921 	bl	8003d6c <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b30:	f000 f826 	bl	8001b80 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b34:	f001 fe10 	bl	8003758 <HAL_PWREx_EnableOverDrive>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b3e:	f000 f81f 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	230f      	movs	r3, #15
 8001b44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b46:	2302      	movs	r3, #2
 8001b48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2105      	movs	r1, #5
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fe49 	bl	80037f8 <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b6c:	f000 f808 	bl	8001b80 <Error_Handler>
  }
}
 8001b70:	bf00      	nop
 8001b72:	3750      	adds	r7, #80	; 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fbc9 	bl	8001334 <flash_writer_init>
	pr->sector = sector;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	60da      	str	r2, [r3, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <preference_writer_load>:
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
    }
    pr->ready = false;
}

void preference_writer_load(PreferenceWriter pr) {
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	b590      	push	{r4, r7, lr}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	f107 0418 	add.w	r4, r7, #24
 8001bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	e00d      	b.n	8001be2 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f107 0218 	add.w	r2, r7, #24
 8001bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bce:	f7ff fbcf 	bl	8001370 <flash_read_int>
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <preference_writer_load+0x78>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2bff      	cmp	r3, #255	; 0xff
 8001be6:	ddee      	ble.n	8001bc6 <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8001be8:	e013      	b.n	8001c12 <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	f107 0218 	add.w	r2, r7, #24
 8001bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bfa:	f7ff fbcf 	bl	800139c <flash_read_float>
 8001bfe:	eef0 7a40 	vmov.f32	s15, s0
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <preference_writer_load+0x7c>)
 8001c04:	00a3      	lsls	r3, r4, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c18:	dbe7      	blt.n	8001bea <preference_writer_load+0x3a>
    }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c24:	b004      	add	sp, #16
 8001c26:	4770      	bx	lr
 8001c28:	20000940 	.word	0x20000940
 8001c2c:	2000056c 	.word	0x2000056c

08001c30 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <MX_SPI1_Init+0x6c>)
 8001c38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c7e:	220a      	movs	r2, #10
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_SPI1_Init+0x68>)
 8001c84:	f002 facc 	bl	8004220 <HAL_SPI_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001c8e:	f7ff ff77 	bl	8001b80 <Error_Handler>
  }

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000dc0 	.word	0x20000dc0
 8001c9c:	40013000 	.word	0x40013000

08001ca0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <MX_SPI3_Init+0x6c>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cee:	220a      	movs	r2, #10
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_SPI3_Init+0x68>)
 8001cf4:	f002 fa94 	bl	8004220 <HAL_SPI_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001cfe:	f7ff ff3f 	bl	8001b80 <Error_Handler>
  }

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000d68 	.word	0x20000d68
 8001d0c:	40003c00 	.word	0x40003c00

08001d10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_SPI_MspInit+0xe8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12c      	bne.n	8001d8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a30      	ldr	r2, [pc, #192]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d6a:	23e0      	movs	r3, #224	; 0xe0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <HAL_SPI_MspInit+0xf0>)
 8001d86:	f001 fb3b 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d8a:	e031      	b.n	8001df0 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_SPI_MspInit+0xf4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d12c      	bne.n	8001df0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_SPI_MspInit+0xec>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001de0:	2306      	movs	r3, #6
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4807      	ldr	r0, [pc, #28]	; (8001e08 <HAL_SPI_MspInit+0xf8>)
 8001dec:	f001 fb08 	bl	8003400 <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3730      	adds	r7, #48	; 0x30
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40013000 	.word	0x40013000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40003c00 	.word	0x40003c00
 8001e08:	40020800 	.word	0x40020800

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e4a:	2007      	movs	r0, #7
 8001e4c:	f001 fa74 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 fb4a 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <CAN1_RX0_IRQHandler+0x10>)
 8001ebe:	f000 ff38 	bl	8002d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000300 	.word	0x20000300

08001ecc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af02      	add	r7, sp, #8
	//ADC1->CR2  |= 0x40000000;
	//controller.adc2_raw = ADC2->DR;                                         // Read ADC Data Registers
	//controller.adc1_raw = ADC1->DR;
	//controller.adc3_raw = ADC3->DR;

	comm_encoder.spi_tx_word = 0x0000;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <TIM1_UP_TIM10_IRQHandler+0x60>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET ); // NSS1 low
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2110      	movs	r1, #16
 8001edc:	4814      	ldr	r0, [pc, #80]	; (8001f30 <TIM1_UP_TIM10_IRQHandler+0x64>)
 8001ede:	f001 fc21 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)comm_encoder.spi_tx_buff, (uint8_t *)comm_encoder.spi_rx_buff, 1, 100);
 8001ee2:	2364      	movs	r3, #100	; 0x64
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <TIM1_UP_TIM10_IRQHandler+0x68>)
 8001eea:	4910      	ldr	r1, [pc, #64]	; (8001f2c <TIM1_UP_TIM10_IRQHandler+0x60>)
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 8001eee:	f002 f9fb 	bl	80042e8 <HAL_SPI_TransmitReceive>
	while( hspi1.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8001ef2:	bf00      	nop
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 8001ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d0f9      	beq.n	8001ef4 <TIM1_UP_TIM10_IRQHandler+0x28>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET ); // NSS1 high
 8001f00:	2201      	movs	r2, #1
 8001f02:	2110      	movs	r1, #16
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <TIM1_UP_TIM10_IRQHandler+0x64>)
 8001f06:	f001 fc0d 	bl	8003724 <HAL_GPIO_WritePin>



	run_fsm(&state);
 8001f0a:	480c      	ldr	r0, [pc, #48]	; (8001f3c <TIM1_UP_TIM10_IRQHandler+0x70>)
 8001f0c:	f7ff fa60 	bl	80013d0 <run_fsm>
	//state.state_change = 0; //delete me later

	controller.loop_count++;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001f1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001f20:	f002 fcb4 	bl	800488c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000328 	.word	0x20000328
 8001f30:	40020000 	.word	0x40020000
 8001f34:	2000032a 	.word	0x2000032a
 8001f38:	20000dc0 	.word	0x20000dc0
 8001f3c:	20000554 	.word	0x20000554
 8001f40:	2000066c 	.word	0x2000066c
 8001f44:	20000e18 	.word	0x20000e18

08001f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <USART2_IRQHandler+0x2c>)
 8001f50:	f003 fc5c 	bl	800580c <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <USART2_IRQHandler+0x30>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	71fb      	strb	r3, [r7, #7]
	/* Escape to idle has top priority */
	update_fsm(&state, c);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <USART2_IRQHandler+0x34>)
 8001f60:	f7ff fa7a 	bl	8001458 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <USART2_IRQHandler+0x2c>)
 8001f66:	f003 fc51 	bl	800580c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000e58 	.word	0x20000e58
 8001f78:	20000550 	.word	0x20000550
 8001f7c:	20000554 	.word	0x20000554

08001f80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e00a      	b.n	8001fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f92:	f3af 8000 	nop.w
 8001f96:	4601      	mov	r1, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	b2ca      	uxtb	r2, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf0      	blt.n	8001f92 <_read+0x12>
	}

return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e009      	b.n	8001fe0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fa17 	bl	8002408 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf1      	blt.n	8001fcc <_write+0x12>
	}
	return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_close>:

int _close(int file)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201a:	605a      	str	r2, [r3, #4]
	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_isatty>:

int _isatty(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	return 1;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x50>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x16>
		heap_end = &end;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <_sbrk+0x50>)
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <_sbrk+0x54>)
 8002070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <_sbrk+0x50>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <_sbrk+0x50>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	466a      	mov	r2, sp
 8002082:	4293      	cmp	r3, r2
 8002084:	d907      	bls.n	8002096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002086:	f004 f9bd 	bl	8006404 <__errno>
 800208a:	4602      	mov	r2, r0
 800208c:	230c      	movs	r3, #12
 800208e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e006      	b.n	80020a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <_sbrk+0x50>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a03      	ldr	r2, [pc, #12]	; (80020ac <_sbrk+0x50>)
 80020a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000021c 	.word	0x2000021c
 80020b0:	20000ea0 	.word	0x20000ea0

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <SystemInit+0x28>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <SystemInit+0x28>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SystemInit+0x28>)
 80020ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ce:	609a      	str	r2, [r3, #8]
#endif
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b096      	sub	sp, #88	; 0x58
 80020e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2220      	movs	r2, #32
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f004 f9a5 	bl	8006468 <memset>

  htim1.Instance = TIM1;
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <MX_TIM1_Init+0x168>)
 8002120:	4a4a      	ldr	r2, [pc, #296]	; (800224c <MX_TIM1_Init+0x16c>)
 8002122:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <MX_TIM1_Init+0x168>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <MX_TIM1_Init+0x168>)
 800212c:	2240      	movs	r2, #64	; 0x40
 800212e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <MX_TIM1_Init+0x168>)
 8002132:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8002136:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b43      	ldr	r3, [pc, #268]	; (8002248 <MX_TIM1_Init+0x168>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <MX_TIM1_Init+0x168>)
 8002140:	2201      	movs	r2, #1
 8002142:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002144:	4b40      	ldr	r3, [pc, #256]	; (8002248 <MX_TIM1_Init+0x168>)
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800214a:	483f      	ldr	r0, [pc, #252]	; (8002248 <MX_TIM1_Init+0x168>)
 800214c:	f002 fb1a 	bl	8004784 <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002156:	f7ff fd13 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002164:	4619      	mov	r1, r3
 8002166:	4838      	ldr	r0, [pc, #224]	; (8002248 <MX_TIM1_Init+0x168>)
 8002168:	f002 fd5e 	bl	8004c28 <HAL_TIM_ConfigClockSource>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002172:	f7ff fd05 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002176:	4834      	ldr	r0, [pc, #208]	; (8002248 <MX_TIM1_Init+0x168>)
 8002178:	f002 fb53 	bl	8004822 <HAL_TIM_PWM_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002182:	f7ff fcfd 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800218e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002192:	4619      	mov	r1, r3
 8002194:	482c      	ldr	r0, [pc, #176]	; (8002248 <MX_TIM1_Init+0x168>)
 8002196:	f003 f91b 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021a0:	f7ff fcee 	bl	8001b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a4:	2360      	movs	r3, #96	; 0x60
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	2200      	movs	r2, #0
 80021c6:	4619      	mov	r1, r3
 80021c8:	481f      	ldr	r0, [pc, #124]	; (8002248 <MX_TIM1_Init+0x168>)
 80021ca:	f002 fc67 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80021d4:	f7ff fcd4 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021dc:	2204      	movs	r2, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4819      	ldr	r0, [pc, #100]	; (8002248 <MX_TIM1_Init+0x168>)
 80021e2:	f002 fc5b 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80021ec:	f7ff fcc8 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	2208      	movs	r2, #8
 80021f6:	4619      	mov	r1, r3
 80021f8:	4813      	ldr	r0, [pc, #76]	; (8002248 <MX_TIM1_Init+0x168>)
 80021fa:	f002 fc4f 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002204:	f7ff fcbc 	bl	8001b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800221c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002220:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <MX_TIM1_Init+0x168>)
 800222c:	f003 f94c 	bl	80054c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002236:	f7ff fca3 	bl	8001b80 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <MX_TIM1_Init+0x168>)
 800223c:	f000 f830 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 8002240:	bf00      	nop
 8002242:	3758      	adds	r7, #88	; 0x58
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000e18 	.word	0x20000e18
 800224c:	40010000 	.word	0x40010000

08002250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_TIM_Base_MspInit+0x48>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d115      	bne.n	800228e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_TIM_Base_MspInit+0x4c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_TIM_Base_MspInit+0x4c>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_TIM_Base_MspInit+0x4c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2019      	movs	r0, #25
 8002284:	f001 f863 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002288:	2019      	movs	r0, #25
 800228a:	f001 f87c 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11e      	bne.n	8002300 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80022de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4619      	mov	r1, r3
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0x70>)
 80022fc:	f001 f880 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010000 	.word	0x40010000
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000

08002314 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <MX_USART2_UART_Init+0x50>)
 800231c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800233a:	220c      	movs	r2, #12
 800233c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800234c:	f003 f922 	bl	8005594 <HAL_UART_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002356:	f7ff fc13 	bl	8001b80 <Error_Handler>
  }

}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000e58 	.word	0x20000e58
 8002364:	40004400 	.word	0x40004400

08002368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_UART_MspInit+0x94>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d133      	bne.n	80023f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_UART_MspInit+0x98>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <HAL_UART_MspInit+0x98>)
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_UART_MspInit+0x98>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0x98>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_UART_MspInit+0x98>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_UART_MspInit+0x98>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023c2:	230c      	movs	r3, #12
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d2:	2307      	movs	r3, #7
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <HAL_UART_MspInit+0x9c>)
 80023de:	f001 f80f 	bl	8003400 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2026      	movs	r0, #38	; 0x26
 80023e8:	f000 ffb1 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023ec:	2026      	movs	r0, #38	; 0x26
 80023ee:	f000 ffca 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	; 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40004400 	.word	0x40004400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020000 	.word	0x40020000

08002408 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8002410:	1d39      	adds	r1, r7, #4
 8002412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002416:	2201      	movs	r2, #1
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <__io_putchar+0x20>)
 800241a:	f003 f908 	bl	800562e <HAL_UART_Transmit>
return 0;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000e58 	.word	0x20000e58

0800242c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8002434:	2201      	movs	r2, #1
 8002436:	4904      	ldr	r1, [pc, #16]	; (8002448 <HAL_UART_RxCpltCallback+0x1c>)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <HAL_UART_RxCpltCallback+0x20>)
 800243a:	f003 f991 	bl	8005760 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000550 	.word	0x20000550
 800244c:	20000e58 	.word	0x20000e58

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
  ldr  r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800246e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002470:	f842 3b04 	str.w	r3, [r2], #4

08002474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800247a:	f7ff fe1b 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f003 ffc7 	bl	8006410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7ff fa03 	bl	800188c <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800248c:	08009198 	.word	0x08009198
  ldr  r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002494:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002498:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800249c:	20000ea0 	.word	0x20000ea0

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 ff33 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fc98 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 ff4b 	bl	80033a2 <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 ff13 	bl	800334e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000020 	.word	0x20000020
 8002540:	20000028 	.word	0x20000028
 8002544:	20000024 	.word	0x20000024

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000028 	.word	0x20000028
 800256c:	20000e98 	.word	0x20000e98

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000e98 	.word	0x20000e98

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_Delay+0x40>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000028 	.word	0x20000028

080025cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e033      	b.n	800264a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fd78 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002612:	f023 0302 	bic.w	r3, r3, #2
 8002616:	f043 0202 	orr.w	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f94a 	bl	80028b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
 800263a:	e001      	b.n	8002640 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e113      	b.n	8002898 <HAL_ADC_ConfigChannel+0x244>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b09      	cmp	r3, #9
 800267e:	d925      	bls.n	80026cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68d9      	ldr	r1, [r3, #12]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	3b1e      	subs	r3, #30
 8002696:	2207      	movs	r2, #7
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43da      	mvns	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	400a      	ands	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4403      	add	r3, r0
 80026be:	3b1e      	subs	r3, #30
 80026c0:	409a      	lsls	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	e022      	b.n	8002712 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	2207      	movs	r2, #7
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	400a      	ands	r2, r1
 80026ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	4603      	mov	r3, r0
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4403      	add	r3, r0
 8002708:	409a      	lsls	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b06      	cmp	r3, #6
 8002718:	d824      	bhi.n	8002764 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b05      	subs	r3, #5
 800272c:	221f      	movs	r2, #31
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b05      	subs	r3, #5
 8002756:	fa00 f203 	lsl.w	r2, r0, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
 8002762:	e04c      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d824      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3b23      	subs	r3, #35	; 0x23
 800277e:	221f      	movs	r2, #31
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43da      	mvns	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	400a      	ands	r2, r1
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b23      	subs	r3, #35	; 0x23
 80027a8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
 80027b4:	e023      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b41      	subs	r3, #65	; 0x41
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b41      	subs	r3, #65	; 0x41
 80027f2:	fa00 f203 	lsl.w	r2, r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fe:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <HAL_ADC_ConfigChannel+0x250>)
 8002800:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <HAL_ADC_ConfigChannel+0x254>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10f      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1d8>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b12      	cmp	r3, #18
 8002812:	d10b      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_ADC_ConfigChannel+0x254>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12b      	bne.n	800288e <HAL_ADC_ConfigChannel+0x23a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_ADC_ConfigChannel+0x258>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x1f4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b11      	cmp	r3, #17
 8002846:	d122      	bne.n	800288e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_ADC_ConfigChannel+0x258>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d111      	bne.n	800288e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_ADC_ConfigChannel+0x25c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ADC_ConfigChannel+0x260>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9a      	lsrs	r2, r3, #18
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002880:	e002      	b.n	8002888 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3b01      	subs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f9      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012300 	.word	0x40012300
 80028a8:	40012000 	.word	0x40012000
 80028ac:	10000012 	.word	0x10000012
 80028b0:	20000020 	.word	0x20000020
 80028b4:	431bde83 	.word	0x431bde83

080028b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <ADC_Init+0x1f0>)
 80028c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	021a      	lsls	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	4a58      	ldr	r2, [pc, #352]	; (8002aac <ADC_Init+0x1f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e00f      	b.n	80029b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0202 	bic.w	r2, r2, #2
 80029c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e1b      	ldrb	r3, [r3, #24]
 80029d0:	005a      	lsls	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	035a      	lsls	r2, r3, #13
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	e007      	b.n	8002a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	051a      	lsls	r2, r3, #20
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a6e:	025a      	lsls	r2, r3, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	029a      	lsls	r2, r3, #10
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40012300 	.word	0x40012300
 8002aac:	0f000001 	.word	0x0f000001

08002ab0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e031      	b.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 021f 	bic.w	r2, r3, #31
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40012300 	.word	0x40012300

08002b3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0ed      	b.n	8002d2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fb9a 	bl	8001294 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0202 	bic.w	r2, r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b70:	f7ff fcfe 	bl	8002570 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b76:	e012      	b.n	8002b9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b78:	f7ff fcfa 	bl	8002570 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b0a      	cmp	r3, #10
 8002b84:	d90b      	bls.n	8002b9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0c5      	b.n	8002d2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e5      	bne.n	8002b78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bbc:	f7ff fcd8 	bl	8002570 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc2:	e012      	b.n	8002bea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc4:	f7ff fcd4 	bl	8002570 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b0a      	cmp	r3, #10
 8002bd0:	d90b      	bls.n	8002bea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2205      	movs	r2, #5
 8002be2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e09f      	b.n	8002d2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0e5      	beq.n	8002bc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e007      	b.n	8002c22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7e5b      	ldrb	r3, [r3, #25]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7e9b      	ldrb	r3, [r3, #26]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0220 	orr.w	r2, r2, #32
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e007      	b.n	8002c76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0220 	bic.w	r2, r2, #32
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7edb      	ldrb	r3, [r3, #27]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0210 	orr.w	r2, r2, #16
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7f1b      	ldrb	r3, [r3, #28]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0208 	orr.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0208 	bic.w	r2, r2, #8
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7f5b      	ldrb	r3, [r3, #29]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0204 	orr.w	r2, r2, #4
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	ea42 0103 	orr.w	r1, r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b08a      	sub	sp, #40	; 0x28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d07c      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d023      	beq.n	8002dca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f97d 	bl	8003094 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d9a:	e016      	b.n	8002dca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	e00c      	b.n	8002dca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e002      	b.n	8002dca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f983 	bl	80030d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d024      	beq.n	8002e1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f95d 	bl	80030a8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dee:	e016      	b.n	8002e1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	e00c      	b.n	8002e1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	e002      	b.n	8002e1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f963 	bl	80030e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d024      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f93d 	bl	80030bc <HAL_CAN_TxMailbox2CompleteCallback>
 8002e42:	e016      	b.n	8002e72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	e00c      	b.n	8002e72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	e002      	b.n	8002e72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f943 	bl	80030f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2210      	movs	r2, #16
 8002e94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f934 	bl	8003120 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f91b 	bl	800310c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2208      	movs	r2, #8
 8002f14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f916 	bl	8003148 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8fd 	bl	8003134 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f900 	bl	800315c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2208      	movs	r2, #8
 8002f76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f8f9 	bl	8003170 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d075      	beq.n	8003074 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06c      	beq.n	800306c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03d      	beq.n	800306c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d038      	beq.n	800306c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003000:	2b30      	cmp	r3, #48	; 0x30
 8003002:	d017      	beq.n	8003034 <HAL_CAN_IRQHandler+0x302>
 8003004:	2b30      	cmp	r3, #48	; 0x30
 8003006:	d804      	bhi.n	8003012 <HAL_CAN_IRQHandler+0x2e0>
 8003008:	2b10      	cmp	r3, #16
 800300a:	d009      	beq.n	8003020 <HAL_CAN_IRQHandler+0x2ee>
 800300c:	2b20      	cmp	r3, #32
 800300e:	d00c      	beq.n	800302a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003010:	e024      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003012:	2b50      	cmp	r3, #80	; 0x50
 8003014:	d018      	beq.n	8003048 <HAL_CAN_IRQHandler+0x316>
 8003016:	2b60      	cmp	r3, #96	; 0x60
 8003018:	d01b      	beq.n	8003052 <HAL_CAN_IRQHandler+0x320>
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d00f      	beq.n	800303e <HAL_CAN_IRQHandler+0x30c>
            break;
 800301e:	e01d      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f043 0308 	orr.w	r3, r3, #8
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003028:	e018      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f043 0310 	orr.w	r3, r3, #16
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003032:	e013      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f043 0320 	orr.w	r3, r3, #32
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800303c:	e00e      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003046:	e009      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003050:	e004      	b.n	800305c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800305a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800306a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f87c 	bl	8003184 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800308c:	bf00      	nop
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	; (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	; (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
         );
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f7ff ff8e 	bl	8003238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff29 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff3e 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff8e 	bl	800328c <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5d 	bl	8003238 <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff31 	bl	80031fc <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa2 	bl	80032f4 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d004      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00c      	b.n	80033f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2205      	movs	r2, #5
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e165      	b.n	80036e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 8154 	bne.w	80036e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d00b      	beq.n	800345a <HAL_GPIO_Init+0x5a>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800344e:	2b11      	cmp	r3, #17
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b12      	cmp	r3, #18
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0xfc>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b12      	cmp	r3, #18
 80034fa:	d123      	bne.n	8003544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80ae 	beq.w	80036e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a2:	4a57      	ldr	r2, [pc, #348]	; (8003700 <HAL_GPIO_Init+0x300>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4e      	ldr	r2, [pc, #312]	; (8003704 <HAL_GPIO_Init+0x304>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d025      	beq.n	800361a <HAL_GPIO_Init+0x21a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_GPIO_Init+0x308>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <HAL_GPIO_Init+0x216>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4c      	ldr	r2, [pc, #304]	; (800370c <HAL_GPIO_Init+0x30c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d019      	beq.n	8003612 <HAL_GPIO_Init+0x212>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <HAL_GPIO_Init+0x310>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_Init+0x20e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4a      	ldr	r2, [pc, #296]	; (8003714 <HAL_GPIO_Init+0x314>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_GPIO_Init+0x20a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a49      	ldr	r2, [pc, #292]	; (8003718 <HAL_GPIO_Init+0x318>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <HAL_GPIO_Init+0x206>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a48      	ldr	r2, [pc, #288]	; (800371c <HAL_GPIO_Init+0x31c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_GPIO_Init+0x202>
 80035fe:	2306      	movs	r3, #6
 8003600:	e00c      	b.n	800361c <HAL_GPIO_Init+0x21c>
 8003602:	2307      	movs	r3, #7
 8003604:	e00a      	b.n	800361c <HAL_GPIO_Init+0x21c>
 8003606:	2305      	movs	r3, #5
 8003608:	e008      	b.n	800361c <HAL_GPIO_Init+0x21c>
 800360a:	2304      	movs	r3, #4
 800360c:	e006      	b.n	800361c <HAL_GPIO_Init+0x21c>
 800360e:	2303      	movs	r3, #3
 8003610:	e004      	b.n	800361c <HAL_GPIO_Init+0x21c>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <HAL_GPIO_Init+0x21c>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_GPIO_Init+0x21c>
 800361a:	2300      	movs	r3, #0
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f002 0203 	and.w	r2, r2, #3
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	4093      	lsls	r3, r2
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800362c:	4934      	ldr	r1, [pc, #208]	; (8003700 <HAL_GPIO_Init+0x300>)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_GPIO_Init+0x320>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003688:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_GPIO_Init+0x320>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_GPIO_Init+0x320>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_GPIO_Init+0x320>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036dc:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_GPIO_Init+0x320>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	f67f ae96 	bls.w	800341c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f0:	bf00      	nop
 80036f2:	3724      	adds	r7, #36	; 0x24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40023800 	.word	0x40023800
 8003700:	40013800 	.word	0x40013800
 8003704:	40020000 	.word	0x40020000
 8003708:	40020400 	.word	0x40020400
 800370c:	40020800 	.word	0x40020800
 8003710:	40020c00 	.word	0x40020c00
 8003714:	40021000 	.word	0x40021000
 8003718:	40021400 	.word	0x40021400
 800371c:	40021800 	.word	0x40021800
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_PWREx_EnableOverDrive+0x94>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003784:	f7fe fef4 	bl	8002570 <HAL_GetTick>
 8003788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800378a:	e009      	b.n	80037a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800378c:	f7fe fef0 	bl	8002570 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379a:	d901      	bls.n	80037a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e01f      	b.n	80037e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d1ee      	bne.n	800378c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037b4:	f7fe fedc 	bl	8002570 <HAL_GetTick>
 80037b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ba:	e009      	b.n	80037d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037bc:	f7fe fed8 	bl	8002570 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ca:	d901      	bls.n	80037d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e007      	b.n	80037e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037dc:	d1ee      	bne.n	80037bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	420e0040 	.word	0x420e0040
 80037f0:	40007000 	.word	0x40007000
 80037f4:	420e0044 	.word	0x420e0044

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fe42 	bl	8002570 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe fe3e 	bl	8002570 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f855 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 8003982:	4601      	mov	r1, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	fa21 f303 	lsr.w	r3, r1, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fda2 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08008eac 	.word	0x08008eac
 80039bc:	20000020 	.word	0x20000020
 80039c0:	20000024 	.word	0x20000024

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000020 	.word	0x20000020

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4601      	mov	r1, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4a03      	ldr	r2, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5cd3      	ldrb	r3, [r2, r3]
 80039f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08008ebc 	.word	0x08008ebc

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a08:	f7ff ffdc 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0b5b      	lsrs	r3, r3, #13
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	08008ebc 	.word	0x08008ebc

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a46:	4bc6      	ldr	r3, [pc, #792]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	f200 817e 	bhi.w	8003d50 <HAL_RCC_GetSysClockFreq+0x324>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_RCC_GetSysClockFreq+0x30>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003d51 	.word	0x08003d51
 8003a64:	08003d51 	.word	0x08003d51
 8003a68:	08003d51 	.word	0x08003d51
 8003a6c:	08003a97 	.word	0x08003a97
 8003a70:	08003d51 	.word	0x08003d51
 8003a74:	08003d51 	.word	0x08003d51
 8003a78:	08003d51 	.word	0x08003d51
 8003a7c:	08003a9d 	.word	0x08003a9d
 8003a80:	08003d51 	.word	0x08003d51
 8003a84:	08003d51 	.word	0x08003d51
 8003a88:	08003d51 	.word	0x08003d51
 8003a8c:	08003bf9 	.word	0x08003bf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4bb4      	ldr	r3, [pc, #720]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x338>)
 8003a92:	613b      	str	r3, [r7, #16]
       break;
 8003a94:	e15f      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a96:	4bb4      	ldr	r3, [pc, #720]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003a98:	613b      	str	r3, [r7, #16]
      break;
 8003a9a:	e15c      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a9c:	4bb0      	ldr	r3, [pc, #704]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa6:	4bae      	ldr	r3, [pc, #696]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04a      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab2:	4bab      	ldr	r3, [pc, #684]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	ea03 0501 	and.w	r5, r3, r1
 8003ac8:	ea04 0602 	and.w	r6, r4, r2
 8003acc:	4629      	mov	r1, r5
 8003ace:	4632      	mov	r2, r6
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	f04f 0400 	mov.w	r4, #0
 8003ad8:	0154      	lsls	r4, r2, #5
 8003ada:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ade:	014b      	lsls	r3, r1, #5
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	1b49      	subs	r1, r1, r5
 8003ae6:	eb62 0206 	sbc.w	r2, r2, r6
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f04f 0400 	mov.w	r4, #0
 8003af2:	0194      	lsls	r4, r2, #6
 8003af4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003af8:	018b      	lsls	r3, r1, #6
 8003afa:	1a5b      	subs	r3, r3, r1
 8003afc:	eb64 0402 	sbc.w	r4, r4, r2
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	00e2      	lsls	r2, r4, #3
 8003b0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b0e:	00d9      	lsls	r1, r3, #3
 8003b10:	460b      	mov	r3, r1
 8003b12:	4614      	mov	r4, r2
 8003b14:	195b      	adds	r3, r3, r5
 8003b16:	eb44 0406 	adc.w	r4, r4, r6
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	0262      	lsls	r2, r4, #9
 8003b24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b28:	0259      	lsls	r1, r3, #9
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	4621      	mov	r1, r4
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	f7fd f854 	bl	8000be8 <__aeabi_uldivmod>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e049      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b48:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	f04f 0400 	mov.w	r4, #0
 8003b52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	ea03 0501 	and.w	r5, r3, r1
 8003b5e:	ea04 0602 	and.w	r6, r4, r2
 8003b62:	4629      	mov	r1, r5
 8003b64:	4632      	mov	r2, r6
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	f04f 0400 	mov.w	r4, #0
 8003b6e:	0154      	lsls	r4, r2, #5
 8003b70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b74:	014b      	lsls	r3, r1, #5
 8003b76:	4619      	mov	r1, r3
 8003b78:	4622      	mov	r2, r4
 8003b7a:	1b49      	subs	r1, r1, r5
 8003b7c:	eb62 0206 	sbc.w	r2, r2, r6
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	0194      	lsls	r4, r2, #6
 8003b8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	1a5b      	subs	r3, r3, r1
 8003b92:	eb64 0402 	sbc.w	r4, r4, r2
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	00e2      	lsls	r2, r4, #3
 8003ba0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ba4:	00d9      	lsls	r1, r3, #3
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	195b      	adds	r3, r3, r5
 8003bac:	eb44 0406 	adc.w	r4, r4, r6
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	02a2      	lsls	r2, r4, #10
 8003bba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bbe:	0299      	lsls	r1, r3, #10
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	f7fd f809 	bl	8000be8 <__aeabi_uldivmod>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	613b      	str	r3, [r7, #16]
      break;
 8003bf6:	e0ae      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf8:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c00:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c02:	4b57      	ldr	r3, [pc, #348]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04a      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0e:	4b54      	ldr	r3, [pc, #336]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	f04f 0400 	mov.w	r4, #0
 8003c18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	ea03 0501 	and.w	r5, r3, r1
 8003c24:	ea04 0602 	and.w	r6, r4, r2
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4632      	mov	r2, r6
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	0154      	lsls	r4, r2, #5
 8003c36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c3a:	014b      	lsls	r3, r1, #5
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4622      	mov	r2, r4
 8003c40:	1b49      	subs	r1, r1, r5
 8003c42:	eb62 0206 	sbc.w	r2, r2, r6
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	f04f 0400 	mov.w	r4, #0
 8003c4e:	0194      	lsls	r4, r2, #6
 8003c50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c54:	018b      	lsls	r3, r1, #6
 8003c56:	1a5b      	subs	r3, r3, r1
 8003c58:	eb64 0402 	sbc.w	r4, r4, r2
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	00e2      	lsls	r2, r4, #3
 8003c66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c6a:	00d9      	lsls	r1, r3, #3
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4614      	mov	r4, r2
 8003c70:	195b      	adds	r3, r3, r5
 8003c72:	eb44 0406 	adc.w	r4, r4, r6
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	0262      	lsls	r2, r4, #9
 8003c80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c84:	0259      	lsls	r1, r3, #9
 8003c86:	460b      	mov	r3, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	f7fc ffa6 	bl	8000be8 <__aeabi_uldivmod>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e049      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	f04f 0400 	mov.w	r4, #0
 8003cae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	ea03 0501 	and.w	r5, r3, r1
 8003cba:	ea04 0602 	and.w	r6, r4, r2
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	f04f 0400 	mov.w	r4, #0
 8003cca:	0154      	lsls	r4, r2, #5
 8003ccc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cd0:	014b      	lsls	r3, r1, #5
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	1b49      	subs	r1, r1, r5
 8003cd8:	eb62 0206 	sbc.w	r2, r2, r6
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	0194      	lsls	r4, r2, #6
 8003ce6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cea:	018b      	lsls	r3, r1, #6
 8003cec:	1a5b      	subs	r3, r3, r1
 8003cee:	eb64 0402 	sbc.w	r4, r4, r2
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	00e2      	lsls	r2, r4, #3
 8003cfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d00:	00d9      	lsls	r1, r3, #3
 8003d02:	460b      	mov	r3, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	195b      	adds	r3, r3, r5
 8003d08:	eb44 0406 	adc.w	r4, r4, r6
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	02a2      	lsls	r2, r4, #10
 8003d16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d1a:	0299      	lsls	r1, r3, #10
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4614      	mov	r4, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	4621      	mov	r1, r4
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f04f 0400 	mov.w	r4, #0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	f7fc ff5b 	bl	8000be8 <__aeabi_uldivmod>
 8003d32:	4603      	mov	r3, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0f1b      	lsrs	r3, r3, #28
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	613b      	str	r3, [r7, #16]
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x338>)
 8003d52:	613b      	str	r3, [r7, #16]
      break;
 8003d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d56:	693b      	ldr	r3, [r7, #16]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	007a1200 	.word	0x007a1200

08003d6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8083 	beq.w	8003e8c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d86:	4b95      	ldr	r3, [pc, #596]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d019      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d92:	4b92      	ldr	r3, [pc, #584]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d9e:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003daa:	d00c      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dac:	4b8b      	ldr	r3, [pc, #556]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d112      	bne.n	8003dde <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db8:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc4:	d10b      	bne.n	8003dde <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc6:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d05b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x11e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d157      	bne.n	8003e8a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e216      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x8a>
 8003de8:	4b7c      	ldr	r3, [pc, #496]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a7b      	ldr	r2, [pc, #492]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e01d      	b.n	8003e32 <HAL_RCC_OscConfig+0xc6>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCC_OscConfig+0xae>
 8003e00:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a75      	ldr	r2, [pc, #468]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b73      	ldr	r3, [pc, #460]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a72      	ldr	r2, [pc, #456]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e00b      	b.n	8003e32 <HAL_RCC_OscConfig+0xc6>
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6f      	ldr	r2, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6c      	ldr	r2, [pc, #432]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d013      	beq.n	8003e62 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fb99 	bl	8002570 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e42:	f7fe fb95 	bl	8002570 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1db      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0xd6>
 8003e60:	e014      	b.n	8003e8c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7fe fb85 	bl	8002570 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fb81 	bl	8002570 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	; 0x64
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e1c7      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7c:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0xfe>
 8003e88:	e000      	b.n	8003e8c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d06f      	beq.n	8003f78 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ea4:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebc:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d11c      	bne.n	8003f02 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec8:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed4:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_OscConfig+0x180>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e18f      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4938      	ldr	r1, [pc, #224]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f00:	e03a      	b.n	8003f78 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d020      	beq.n	8003f4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe fb2e 	bl	8002570 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fe fb2a 	bl	8002570 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e170      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4925      	ldr	r1, [pc, #148]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
 8003f4a:	e015      	b.n	8003f78 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x274>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe fb0d 	bl	8002570 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fb09 	bl	8002570 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e14f      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d037      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d016      	beq.n	8003fba <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x278>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fe faed 	bl	8002570 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fae9 	bl	8002570 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e12f      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x22e>
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCC_OscConfig+0x278>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fe fad6 	bl	8002570 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fad2 	bl	8002570 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e118      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	42470000 	.word	0x42470000
 8003fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b8a      	ldr	r3, [pc, #552]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e9      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8097 	beq.w	8004130 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b7f      	ldr	r3, [pc, #508]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a7e      	ldr	r2, [pc, #504]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b7c      	ldr	r3, [pc, #496]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004032:	4b79      	ldr	r3, [pc, #484]	; (8004218 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a75      	ldr	r2, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0x4ac>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fe fa91 	bl	8002570 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fe fa8d 	bl	8002570 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0d3      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <HAL_RCC_OscConfig+0x4ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x31a>
 8004078:	4b66      	ldr	r3, [pc, #408]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a65      	ldr	r2, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x354>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x33c>
 800408e:	4b61      	ldr	r3, [pc, #388]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a60      	ldr	r2, [pc, #384]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0x354>
 80040a8:	4b5a      	ldr	r3, [pc, #360]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a59      	ldr	r2, [pc, #356]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b57      	ldr	r3, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a56      	ldr	r2, [pc, #344]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80040ba:	f023 0304 	bic.w	r3, r3, #4
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fe fa52 	bl	8002570 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fe fa4e 	bl	8002570 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e092      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	4b4b      	ldr	r3, [pc, #300]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ee      	beq.n	80040d0 <HAL_RCC_OscConfig+0x364>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe fa3c 	bl	8002570 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fe fa38 	bl	8002570 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e07c      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ee      	bne.n	80040fc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a3a      	ldr	r2, [pc, #232]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d068      	beq.n	800420a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d060      	beq.n	8004206 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d145      	bne.n	80041d8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_RCC_OscConfig+0x4b0>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe fa0d 	bl	8002570 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe fa09 	bl	8002570 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e04f      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416c:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	019b      	lsls	r3, r3, #6
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	3b01      	subs	r3, #1
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	061b      	lsls	r3, r3, #24
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	071b      	lsls	r3, r3, #28
 80041a4:	491b      	ldr	r1, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_RCC_OscConfig+0x4b0>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe f9de 	bl	8002570 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fe f9da 	bl	8002570 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e020      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44c>
 80041d6:	e018      	b.n	800420a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCC_OscConfig+0x4b0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fe f9c7 	bl	8002570 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fe f9c3 	bl	8002570 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e009      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_OscConfig+0x4a8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x47a>
 8004204:	e001      	b.n	800420a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	40007000 	.word	0x40007000
 800421c:	42470060 	.word	0x42470060

08004220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e056      	b.n	80042e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fd fd5f 	bl	8001d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004268:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	ea42 0103 	orr.w	r1, r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 0104 	and.w	r1, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042f6:	2301      	movs	r3, #1
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_SPI_TransmitReceive+0x26>
 800430a:	2302      	movs	r3, #2
 800430c:	e18a      	b.n	8004624 <HAL_SPI_TransmitReceive+0x33c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004316:	f7fe f92b 	bl	8002570 <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004334:	2b01      	cmp	r3, #1
 8004336:	d00f      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x70>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433e:	d107      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x68>
 8004348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800434c:	2b04      	cmp	r3, #4
 800434e:	d003      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004350:	2302      	movs	r3, #2
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004356:	e15b      	b.n	8004610 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_SPI_TransmitReceive+0x82>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_TransmitReceive+0x82>
 8004364:	887b      	ldrh	r3, [r7, #2]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004370:	e14e      	b.n	8004610 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b04      	cmp	r3, #4
 800437c:	d003      	beq.n	8004386 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2205      	movs	r2, #5
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	887a      	ldrh	r2, [r7, #2]
 8004396:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	887a      	ldrh	r2, [r7, #2]
 80043ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d007      	beq.n	80043da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e2:	d178      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x10a>
 80043ec:	8b7b      	ldrh	r3, [r7, #26]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d166      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004416:	e053      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d11b      	bne.n	800445e <HAL_SPI_TransmitReceive+0x176>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d016      	beq.n	800445e <HAL_SPI_TransmitReceive+0x176>
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d113      	bne.n	800445e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	1c9a      	adds	r2, r3, #2
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d119      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x1b8>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d014      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	b292      	uxth	r2, r2
 8004482:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800449c:	2301      	movs	r3, #1
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044a0:	f7fe f866 	bl	8002570 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d807      	bhi.n	80044c0 <HAL_SPI_TransmitReceive+0x1d8>
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d003      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044be:	e0a7      	b.n	8004610 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1a6      	bne.n	8004418 <HAL_SPI_TransmitReceive+0x130>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1a1      	bne.n	8004418 <HAL_SPI_TransmitReceive+0x130>
 80044d4:	e07c      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x1fc>
 80044de:	8b7b      	ldrh	r3, [r7, #26]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d16b      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	7812      	ldrb	r2, [r2, #0]
 80044f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450a:	e057      	b.n	80045bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d11c      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x26c>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x26c>
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d114      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d119      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x2ae>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d014      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004592:	2301      	movs	r3, #1
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004596:	f7fd ffeb 	bl	8002570 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d803      	bhi.n	80045ae <HAL_SPI_TransmitReceive+0x2c6>
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x2cc>
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045ba:	e029      	b.n	8004610 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1a2      	bne.n	800450c <HAL_SPI_TransmitReceive+0x224>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d19d      	bne.n	800450c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f893 	bl	8004700 <SPI_EndRxTxTransaction>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045ec:	e010      	b.n	8004610 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	e000      	b.n	8004610 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800460e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004624:	4618      	mov	r0, r3
 8004626:	3730      	adds	r7, #48	; 0x30
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800463c:	e04c      	b.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d048      	beq.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004646:	f7fd ff93 	bl	8002570 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d902      	bls.n	800465c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d13d      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800466a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004674:	d111      	bne.n	800469a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d004      	beq.n	800468a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004688:	d107      	bne.n	800469a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004698:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a2:	d10f      	bne.n	80046c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e00f      	b.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d1a3      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <SPI_EndRxTxTransaction+0x7c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <SPI_EndRxTxTransaction+0x80>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0d5b      	lsrs	r3, r3, #21
 8004718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472a:	d112      	bne.n	8004752 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff ff78 	bl	800462c <SPI_WaitFlagStateUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e00f      	b.n	8004772 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	3b01      	subs	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d0f2      	beq.n	8004752 <SPI_EndRxTxTransaction+0x52>
 800476c:	e000      	b.n	8004770 <SPI_EndRxTxTransaction+0x70>
        break;
 800476e:	bf00      	nop
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000020 	.word	0x20000020
 8004780:	165e9f81 	.word	0x165e9f81

08004784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e01d      	b.n	80047d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fd fd50 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 fb1a 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d007      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e01d      	b.n	8004870 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f815 	bl	8004878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 facb 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0202 	mvn.w	r2, #2
 80048b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa75 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa67 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa78 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0204 	mvn.w	r2, #4
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa4b 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa3d 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa4e 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b08      	cmp	r3, #8
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0208 	mvn.w	r2, #8
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2204      	movs	r2, #4
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa21 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa13 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa24 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b10      	cmp	r3, #16
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9f7 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9e9 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9fa 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0201 	mvn.w	r2, #1
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9c3 	bl	8004d96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fda2 	bl	8005580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9bf 	bl	8004de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0220 	mvn.w	r2, #32
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fd6c 	bl	800556c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0b4      	b.n	8004c20 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	f200 809f 	bhi.w	8004c0c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b09 	.word	0x08004b09
 8004ad8:	08004c0d 	.word	0x08004c0d
 8004adc:	08004c0d 	.word	0x08004c0d
 8004ae0:	08004c0d 	.word	0x08004c0d
 8004ae4:	08004b49 	.word	0x08004b49
 8004ae8:	08004c0d 	.word	0x08004c0d
 8004aec:	08004c0d 	.word	0x08004c0d
 8004af0:	08004c0d 	.word	0x08004c0d
 8004af4:	08004b8b 	.word	0x08004b8b
 8004af8:	08004c0d 	.word	0x08004c0d
 8004afc:	08004c0d 	.word	0x08004c0d
 8004b00:	08004c0d 	.word	0x08004c0d
 8004b04:	08004bcb 	.word	0x08004bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa14 	bl	8004f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6999      	ldr	r1, [r3, #24]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
      break;
 8004b46:	e062      	b.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa64 	bl	800501c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]
      break;
 8004b88:	e041      	b.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fab9 	bl	8005108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]
      break;
 8004bc8:	e021      	b.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb0d 	bl	80051f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	61da      	str	r2, [r3, #28]
      break;
 8004c0a:	e000      	b.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0x18>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e0a6      	b.n	8004d8e <HAL_TIM_ConfigClockSource+0x166>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d067      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0x120>
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d80b      	bhi.n	8004c94 <HAL_TIM_ConfigClockSource+0x6c>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d073      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0x140>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d802      	bhi.n	8004c8a <HAL_TIM_ConfigClockSource+0x62>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d06f      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c88:	e078      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d06c      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0x140>
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	d06a      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c92:	e073      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c94:	2b70      	cmp	r3, #112	; 0x70
 8004c96:	d00d      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0x8c>
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d804      	bhi.n	8004ca6 <HAL_TIM_ConfigClockSource+0x7e>
 8004c9c:	2b50      	cmp	r3, #80	; 0x50
 8004c9e:	d033      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0xe0>
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d041      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ca4:	e06a      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d066      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x152>
 8004cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb0:	d017      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004cb2:	e063      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6899      	ldr	r1, [r3, #8]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f000 fb64 	bl	8005390 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e04c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f000 fb4d 	bl	8005390 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d04:	609a      	str	r2, [r3, #8]
      break;
 8004d06:	e039      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f000 fac1 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2150      	movs	r1, #80	; 0x50
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fb1a 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d26:	e029      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	461a      	mov	r2, r3
 8004d36:	f000 fae0 	bl	80052fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2160      	movs	r1, #96	; 0x60
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fb0a 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d46:	e019      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f000 faa1 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2140      	movs	r1, #64	; 0x40
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fafa 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d66:	e009      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 faf1 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d00f      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3d      	ldr	r2, [pc, #244]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3a      	ldr	r2, [pc, #232]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d02b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d027      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d023      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01f      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d017      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00f      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <TIM_Base_SetConfig+0x130>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <TIM_Base_SetConfig+0x134>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <TIM_Base_SetConfig+0x138>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <TIM_Base_SetConfig+0x13c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	615a      	str	r2, [r3, #20]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40001800 	.word	0x40001800
 8004f34:	40001c00 	.word	0x40001c00
 8004f38:	40002000 	.word	0x40002000

08004f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0302 	bic.w	r3, r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_OC1_SetConfig+0xd8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC1_SetConfig+0x64>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <TIM_OC1_SetConfig+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10c      	bne.n	8004fba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0308 	bic.w	r3, r3, #8
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 0304 	bic.w	r3, r3, #4
 8004fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <TIM_OC1_SetConfig+0xd8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_OC1_SetConfig+0x8e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <TIM_OC1_SetConfig+0xdc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010000 	.word	0x40010000
 8005018:	40010400 	.word	0x40010400

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a22      	ldr	r2, [pc, #136]	; (8005100 <TIM_OC2_SetConfig+0xe4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC2_SetConfig+0x68>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a21      	ldr	r2, [pc, #132]	; (8005104 <TIM_OC2_SetConfig+0xe8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <TIM_OC2_SetConfig+0xe4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC2_SetConfig+0x94>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC2_SetConfig+0xe8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d113      	bne.n	80050d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <TIM_OC3_SetConfig+0xe0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0x66>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <TIM_OC3_SetConfig+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10d      	bne.n	800518a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_OC3_SetConfig+0xe0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC3_SetConfig+0x92>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <TIM_OC3_SetConfig+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010400 	.word	0x40010400

080051f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800523a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <TIM_OC4_SetConfig+0xa4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC4_SetConfig+0x68>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a11      	ldr	r2, [pc, #68]	; (8005298 <TIM_OC4_SetConfig+0xa8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d109      	bne.n	800526c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 030a 	bic.w	r3, r3, #10
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b087      	sub	sp, #28
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	f043 0307 	orr.w	r3, r3, #7
 800537c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e05a      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d01d      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800

080054c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e03d      	b.n	8005560 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e03f      	b.n	8005626 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc fed4 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb97 	bl	8005d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af02      	add	r7, sp, #8
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b20      	cmp	r3, #32
 800564c:	f040 8083 	bne.w	8005756 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Transmit+0x2e>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e07b      	b.n	8005758 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_UART_Transmit+0x40>
 800566a:	2302      	movs	r3, #2
 800566c:	e074      	b.n	8005758 <HAL_UART_Transmit+0x12a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2221      	movs	r2, #33	; 0x21
 8005680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005684:	f7fc ff74 	bl	8002570 <HAL_GetTick>
 8005688:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800569e:	e042      	b.n	8005726 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d122      	bne.n	80056fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f9b6 	bl	8005a34 <UART_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e042      	b.n	8005758 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d103      	bne.n	80056f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3302      	adds	r3, #2
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	e017      	b.n	8005726 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	e013      	b.n	8005726 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f993 	bl	8005a34 <UART_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e01f      	b.n	8005758 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	60ba      	str	r2, [r7, #8]
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1b7      	bne.n	80056a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2200      	movs	r2, #0
 8005738:	2140      	movs	r1, #64	; 0x40
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f97a 	bl	8005a34 <UART_WaitOnFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e006      	b.n	8005758 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b20      	cmp	r3, #32
 8005778:	d140      	bne.n	80057fc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_UART_Receive_IT+0x26>
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e039      	b.n	80057fe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UART_Receive_IT+0x38>
 8005794:	2302      	movs	r3, #2
 8005796:	e032      	b.n	80057fe <HAL_UART_Receive_IT+0x9e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2222      	movs	r2, #34	; 0x22
 80057bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0220 	orr.w	r2, r2, #32
 80057f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10d      	bne.n	800585e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_UART_IRQHandler+0x52>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9d6 	bl	8005c08 <UART_Receive_IT>
      return;
 800585c:	e0d1      	b.n	8005a02 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80b0 	beq.w	80059c6 <HAL_UART_IRQHandler+0x1ba>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <HAL_UART_IRQHandler+0x70>
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 80a5 	beq.w	80059c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_UART_IRQHandler+0x90>
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_UART_IRQHandler+0xb0>
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	f043 0202 	orr.w	r2, r3, #2
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_UART_IRQHandler+0xd0>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	f043 0204 	orr.w	r2, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00f      	beq.n	8005906 <HAL_UART_IRQHandler+0xfa>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_UART_IRQHandler+0xee>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	f043 0208 	orr.w	r2, r3, #8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d078      	beq.n	8005a00 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <HAL_UART_IRQHandler+0x11c>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f970 	bl	8005c08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	bf0c      	ite	eq
 8005936:	2301      	moveq	r3, #1
 8005938:	2300      	movne	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_UART_IRQHandler+0x144>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d031      	beq.n	80059b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8b9 	bl	8005ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d123      	bne.n	80059ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005972:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <HAL_UART_IRQHandler+0x1fc>)
 8005982:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd fd16 	bl	80033ba <HAL_DMA_Abort_IT>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d016      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800599e:	4610      	mov	r0, r2
 80059a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	e00e      	b.n	80059c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f83b 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059aa:	e00a      	b.n	80059c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f837 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b2:	e006      	b.n	80059c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f833 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80059c0:	e01e      	b.n	8005a00 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c2:	bf00      	nop
    return;
 80059c4:	e01c      	b.n	8005a00 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1d6>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8a6 	bl	8005b2c <UART_Transmit_IT>
    return;
 80059e0:	e00f      	b.n	8005a02 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_UART_IRQHandler+0x1f6>
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8ee 	bl	8005bd8 <UART_EndTransmit_IT>
    return;
 80059fc:	bf00      	nop
 80059fe:	e000      	b.n	8005a02 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a00:	bf00      	nop
  }
}
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	08005b05 	.word	0x08005b05

08005a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a44:	e02c      	b.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d028      	beq.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a54:	f7fc fd8c 	bl	8002570 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d21d      	bcs.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e00f      	b.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d0c3      	beq.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ade:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff ff7e 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b21      	cmp	r3, #33	; 0x21
 8005b3e:	d144      	bne.n	8005bca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d11a      	bne.n	8005b80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]
 8005b72:	e00e      	b.n	8005b92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	621a      	str	r2, [r3, #32]
 8005b7e:	e008      	b.n	8005b92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	1c59      	adds	r1, r3, #1
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6211      	str	r1, [r2, #32]
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10f      	bne.n	8005bc6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e000      	b.n	8005bcc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff07 	bl	8005a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b22      	cmp	r3, #34	; 0x22
 8005c1a:	d171      	bne.n	8005d00 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c24:	d123      	bne.n	8005c6e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10e      	bne.n	8005c52 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c50:	e029      	b.n	8005ca6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c6c:	e01b      	b.n	8005ca6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6858      	ldr	r0, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	1c59      	adds	r1, r3, #1
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6291      	str	r1, [r2, #40]	; 0x28
 8005c86:	b2c2      	uxtb	r2, r0
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e00c      	b.n	8005ca6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	1c58      	adds	r0, r3, #1
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	6288      	str	r0, [r1, #40]	; 0x28
 8005c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d120      	bne.n	8005cfc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0220 	bic.w	r2, r2, #32
 8005cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc fb9a 	bl	800242c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e002      	b.n	8005d02 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d4e:	f023 030c 	bic.w	r3, r3, #12
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7a:	f040 818b 	bne.w	8006094 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4ac1      	ldr	r2, [pc, #772]	; (8006088 <UART_SetConfig+0x37c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d005      	beq.n	8005d94 <UART_SetConfig+0x88>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4abf      	ldr	r2, [pc, #764]	; (800608c <UART_SetConfig+0x380>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f040 80bd 	bne.w	8005f0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7fd fe36 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8005d98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	461d      	mov	r5, r3
 8005d9e:	f04f 0600 	mov.w	r6, #0
 8005da2:	46a8      	mov	r8, r5
 8005da4:	46b1      	mov	r9, r6
 8005da6:	eb18 0308 	adds.w	r3, r8, r8
 8005daa:	eb49 0409 	adc.w	r4, r9, r9
 8005dae:	4698      	mov	r8, r3
 8005db0:	46a1      	mov	r9, r4
 8005db2:	eb18 0805 	adds.w	r8, r8, r5
 8005db6:	eb49 0906 	adc.w	r9, r9, r6
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dce:	4688      	mov	r8, r1
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	eb18 0005 	adds.w	r0, r8, r5
 8005dd6:	eb49 0106 	adc.w	r1, r9, r6
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	461d      	mov	r5, r3
 8005de0:	f04f 0600 	mov.w	r6, #0
 8005de4:	196b      	adds	r3, r5, r5
 8005de6:	eb46 0406 	adc.w	r4, r6, r6
 8005dea:	461a      	mov	r2, r3
 8005dec:	4623      	mov	r3, r4
 8005dee:	f7fa fefb 	bl	8000be8 <__aeabi_uldivmod>
 8005df2:	4603      	mov	r3, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	461a      	mov	r2, r3
 8005df8:	4ba5      	ldr	r3, [pc, #660]	; (8006090 <UART_SetConfig+0x384>)
 8005dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	461d      	mov	r5, r3
 8005e08:	f04f 0600 	mov.w	r6, #0
 8005e0c:	46a9      	mov	r9, r5
 8005e0e:	46b2      	mov	sl, r6
 8005e10:	eb19 0309 	adds.w	r3, r9, r9
 8005e14:	eb4a 040a 	adc.w	r4, sl, sl
 8005e18:	4699      	mov	r9, r3
 8005e1a:	46a2      	mov	sl, r4
 8005e1c:	eb19 0905 	adds.w	r9, r9, r5
 8005e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4692      	mov	sl, r2
 8005e3c:	eb19 0005 	adds.w	r0, r9, r5
 8005e40:	eb4a 0106 	adc.w	r1, sl, r6
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	461d      	mov	r5, r3
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	196b      	adds	r3, r5, r5
 8005e50:	eb46 0406 	adc.w	r4, r6, r6
 8005e54:	461a      	mov	r2, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7fa fec6 	bl	8000be8 <__aeabi_uldivmod>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b8b      	ldr	r3, [pc, #556]	; (8006090 <UART_SetConfig+0x384>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	3332      	adds	r3, #50	; 0x32
 8005e76:	4a86      	ldr	r2, [pc, #536]	; (8006090 <UART_SetConfig+0x384>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e84:	4498      	add	r8, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	461d      	mov	r5, r3
 8005e8a:	f04f 0600 	mov.w	r6, #0
 8005e8e:	46a9      	mov	r9, r5
 8005e90:	46b2      	mov	sl, r6
 8005e92:	eb19 0309 	adds.w	r3, r9, r9
 8005e96:	eb4a 040a 	adc.w	r4, sl, sl
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	46a2      	mov	sl, r4
 8005e9e:	eb19 0905 	adds.w	r9, r9, r5
 8005ea2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eba:	4689      	mov	r9, r1
 8005ebc:	4692      	mov	sl, r2
 8005ebe:	eb19 0005 	adds.w	r0, r9, r5
 8005ec2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	461d      	mov	r5, r3
 8005ecc:	f04f 0600 	mov.w	r6, #0
 8005ed0:	196b      	adds	r3, r5, r5
 8005ed2:	eb46 0406 	adc.w	r4, r6, r6
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4623      	mov	r3, r4
 8005eda:	f7fa fe85 	bl	8000be8 <__aeabi_uldivmod>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b6a      	ldr	r3, [pc, #424]	; (8006090 <UART_SetConfig+0x384>)
 8005ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2164      	movs	r1, #100	; 0x64
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	3332      	adds	r3, #50	; 0x32
 8005ef8:	4a65      	ldr	r2, [pc, #404]	; (8006090 <UART_SetConfig+0x384>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 0207 	and.w	r2, r3, #7
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4442      	add	r2, r8
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	e26f      	b.n	80063ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7fd fd65 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8005f12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	461d      	mov	r5, r3
 8005f18:	f04f 0600 	mov.w	r6, #0
 8005f1c:	46a8      	mov	r8, r5
 8005f1e:	46b1      	mov	r9, r6
 8005f20:	eb18 0308 	adds.w	r3, r8, r8
 8005f24:	eb49 0409 	adc.w	r4, r9, r9
 8005f28:	4698      	mov	r8, r3
 8005f2a:	46a1      	mov	r9, r4
 8005f2c:	eb18 0805 	adds.w	r8, r8, r5
 8005f30:	eb49 0906 	adc.w	r9, r9, r6
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f48:	4688      	mov	r8, r1
 8005f4a:	4691      	mov	r9, r2
 8005f4c:	eb18 0005 	adds.w	r0, r8, r5
 8005f50:	eb49 0106 	adc.w	r1, r9, r6
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	461d      	mov	r5, r3
 8005f5a:	f04f 0600 	mov.w	r6, #0
 8005f5e:	196b      	adds	r3, r5, r5
 8005f60:	eb46 0406 	adc.w	r4, r6, r6
 8005f64:	461a      	mov	r2, r3
 8005f66:	4623      	mov	r3, r4
 8005f68:	f7fa fe3e 	bl	8000be8 <__aeabi_uldivmod>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	461a      	mov	r2, r3
 8005f72:	4b47      	ldr	r3, [pc, #284]	; (8006090 <UART_SetConfig+0x384>)
 8005f74:	fba3 2302 	umull	r2, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	461d      	mov	r5, r3
 8005f82:	f04f 0600 	mov.w	r6, #0
 8005f86:	46a9      	mov	r9, r5
 8005f88:	46b2      	mov	sl, r6
 8005f8a:	eb19 0309 	adds.w	r3, r9, r9
 8005f8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f92:	4699      	mov	r9, r3
 8005f94:	46a2      	mov	sl, r4
 8005f96:	eb19 0905 	adds.w	r9, r9, r5
 8005f9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005faa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fb2:	4689      	mov	r9, r1
 8005fb4:	4692      	mov	sl, r2
 8005fb6:	eb19 0005 	adds.w	r0, r9, r5
 8005fba:	eb4a 0106 	adc.w	r1, sl, r6
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	f04f 0600 	mov.w	r6, #0
 8005fc8:	196b      	adds	r3, r5, r5
 8005fca:	eb46 0406 	adc.w	r4, r6, r6
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	f7fa fe09 	bl	8000be8 <__aeabi_uldivmod>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <UART_SetConfig+0x384>)
 8005fde:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2164      	movs	r1, #100	; 0x64
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <UART_SetConfig+0x384>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ffe:	4498      	add	r8, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	461d      	mov	r5, r3
 8006004:	f04f 0600 	mov.w	r6, #0
 8006008:	46a9      	mov	r9, r5
 800600a:	46b2      	mov	sl, r6
 800600c:	eb19 0309 	adds.w	r3, r9, r9
 8006010:	eb4a 040a 	adc.w	r4, sl, sl
 8006014:	4699      	mov	r9, r3
 8006016:	46a2      	mov	sl, r4
 8006018:	eb19 0905 	adds.w	r9, r9, r5
 800601c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006020:	f04f 0100 	mov.w	r1, #0
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006034:	4689      	mov	r9, r1
 8006036:	4692      	mov	sl, r2
 8006038:	eb19 0005 	adds.w	r0, r9, r5
 800603c:	eb4a 0106 	adc.w	r1, sl, r6
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	461d      	mov	r5, r3
 8006046:	f04f 0600 	mov.w	r6, #0
 800604a:	196b      	adds	r3, r5, r5
 800604c:	eb46 0406 	adc.w	r4, r6, r6
 8006050:	461a      	mov	r2, r3
 8006052:	4623      	mov	r3, r4
 8006054:	f7fa fdc8 	bl	8000be8 <__aeabi_uldivmod>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	461a      	mov	r2, r3
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <UART_SetConfig+0x384>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	; 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	3332      	adds	r3, #50	; 0x32
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <UART_SetConfig+0x384>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 0207 	and.w	r2, r3, #7
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4442      	add	r2, r8
 8006084:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006086:	e1b2      	b.n	80063ee <UART_SetConfig+0x6e2>
 8006088:	40011000 	.word	0x40011000
 800608c:	40011400 	.word	0x40011400
 8006090:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4ad7      	ldr	r2, [pc, #860]	; (80063f8 <UART_SetConfig+0x6ec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d005      	beq.n	80060aa <UART_SetConfig+0x39e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4ad6      	ldr	r2, [pc, #856]	; (80063fc <UART_SetConfig+0x6f0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f040 80d1 	bne.w	800624c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060aa:	f7fd fcab 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 80060ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	469a      	mov	sl, r3
 80060b4:	f04f 0b00 	mov.w	fp, #0
 80060b8:	46d0      	mov	r8, sl
 80060ba:	46d9      	mov	r9, fp
 80060bc:	eb18 0308 	adds.w	r3, r8, r8
 80060c0:	eb49 0409 	adc.w	r4, r9, r9
 80060c4:	4698      	mov	r8, r3
 80060c6:	46a1      	mov	r9, r4
 80060c8:	eb18 080a 	adds.w	r8, r8, sl
 80060cc:	eb49 090b 	adc.w	r9, r9, fp
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060e4:	4688      	mov	r8, r1
 80060e6:	4691      	mov	r9, r2
 80060e8:	eb1a 0508 	adds.w	r5, sl, r8
 80060ec:	eb4b 0609 	adc.w	r6, fp, r9
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4619      	mov	r1, r3
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	f04f 0400 	mov.w	r4, #0
 8006102:	0094      	lsls	r4, r2, #2
 8006104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006108:	008b      	lsls	r3, r1, #2
 800610a:	461a      	mov	r2, r3
 800610c:	4623      	mov	r3, r4
 800610e:	4628      	mov	r0, r5
 8006110:	4631      	mov	r1, r6
 8006112:	f7fa fd69 	bl	8000be8 <__aeabi_uldivmod>
 8006116:	4603      	mov	r3, r0
 8006118:	460c      	mov	r4, r1
 800611a:	461a      	mov	r2, r3
 800611c:	4bb8      	ldr	r3, [pc, #736]	; (8006400 <UART_SetConfig+0x6f4>)
 800611e:	fba3 2302 	umull	r2, r3, r3, r2
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	469b      	mov	fp, r3
 800612c:	f04f 0c00 	mov.w	ip, #0
 8006130:	46d9      	mov	r9, fp
 8006132:	46e2      	mov	sl, ip
 8006134:	eb19 0309 	adds.w	r3, r9, r9
 8006138:	eb4a 040a 	adc.w	r4, sl, sl
 800613c:	4699      	mov	r9, r3
 800613e:	46a2      	mov	sl, r4
 8006140:	eb19 090b 	adds.w	r9, r9, fp
 8006144:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800615c:	4689      	mov	r9, r1
 800615e:	4692      	mov	sl, r2
 8006160:	eb1b 0509 	adds.w	r5, fp, r9
 8006164:	eb4c 060a 	adc.w	r6, ip, sl
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4619      	mov	r1, r3
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	f04f 0400 	mov.w	r4, #0
 800617a:	0094      	lsls	r4, r2, #2
 800617c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006180:	008b      	lsls	r3, r1, #2
 8006182:	461a      	mov	r2, r3
 8006184:	4623      	mov	r3, r4
 8006186:	4628      	mov	r0, r5
 8006188:	4631      	mov	r1, r6
 800618a:	f7fa fd2d 	bl	8000be8 <__aeabi_uldivmod>
 800618e:	4603      	mov	r3, r0
 8006190:	460c      	mov	r4, r1
 8006192:	461a      	mov	r2, r3
 8006194:	4b9a      	ldr	r3, [pc, #616]	; (8006400 <UART_SetConfig+0x6f4>)
 8006196:	fba3 1302 	umull	r1, r3, r3, r2
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2164      	movs	r1, #100	; 0x64
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	3332      	adds	r3, #50	; 0x32
 80061a8:	4a95      	ldr	r2, [pc, #596]	; (8006400 <UART_SetConfig+0x6f4>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b4:	4498      	add	r8, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	469b      	mov	fp, r3
 80061ba:	f04f 0c00 	mov.w	ip, #0
 80061be:	46d9      	mov	r9, fp
 80061c0:	46e2      	mov	sl, ip
 80061c2:	eb19 0309 	adds.w	r3, r9, r9
 80061c6:	eb4a 040a 	adc.w	r4, sl, sl
 80061ca:	4699      	mov	r9, r3
 80061cc:	46a2      	mov	sl, r4
 80061ce:	eb19 090b 	adds.w	r9, r9, fp
 80061d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ea:	4689      	mov	r9, r1
 80061ec:	4692      	mov	sl, r2
 80061ee:	eb1b 0509 	adds.w	r5, fp, r9
 80061f2:	eb4c 060a 	adc.w	r6, ip, sl
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4619      	mov	r1, r3
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	f04f 0400 	mov.w	r4, #0
 8006208:	0094      	lsls	r4, r2, #2
 800620a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800620e:	008b      	lsls	r3, r1, #2
 8006210:	461a      	mov	r2, r3
 8006212:	4623      	mov	r3, r4
 8006214:	4628      	mov	r0, r5
 8006216:	4631      	mov	r1, r6
 8006218:	f7fa fce6 	bl	8000be8 <__aeabi_uldivmod>
 800621c:	4603      	mov	r3, r0
 800621e:	460c      	mov	r4, r1
 8006220:	461a      	mov	r2, r3
 8006222:	4b77      	ldr	r3, [pc, #476]	; (8006400 <UART_SetConfig+0x6f4>)
 8006224:	fba3 1302 	umull	r1, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	2164      	movs	r1, #100	; 0x64
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	3332      	adds	r3, #50	; 0x32
 8006236:	4a72      	ldr	r2, [pc, #456]	; (8006400 <UART_SetConfig+0x6f4>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f003 020f 	and.w	r2, r3, #15
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4442      	add	r2, r8
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	e0d0      	b.n	80063ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fd fbc6 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8006250:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	469a      	mov	sl, r3
 8006256:	f04f 0b00 	mov.w	fp, #0
 800625a:	46d0      	mov	r8, sl
 800625c:	46d9      	mov	r9, fp
 800625e:	eb18 0308 	adds.w	r3, r8, r8
 8006262:	eb49 0409 	adc.w	r4, r9, r9
 8006266:	4698      	mov	r8, r3
 8006268:	46a1      	mov	r9, r4
 800626a:	eb18 080a 	adds.w	r8, r8, sl
 800626e:	eb49 090b 	adc.w	r9, r9, fp
 8006272:	f04f 0100 	mov.w	r1, #0
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800627e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006282:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006286:	4688      	mov	r8, r1
 8006288:	4691      	mov	r9, r2
 800628a:	eb1a 0508 	adds.w	r5, sl, r8
 800628e:	eb4b 0609 	adc.w	r6, fp, r9
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	f04f 0400 	mov.w	r4, #0
 80062a4:	0094      	lsls	r4, r2, #2
 80062a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062aa:	008b      	lsls	r3, r1, #2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4623      	mov	r3, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	4631      	mov	r1, r6
 80062b4:	f7fa fc98 	bl	8000be8 <__aeabi_uldivmod>
 80062b8:	4603      	mov	r3, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	461a      	mov	r2, r3
 80062be:	4b50      	ldr	r3, [pc, #320]	; (8006400 <UART_SetConfig+0x6f4>)
 80062c0:	fba3 2302 	umull	r2, r3, r3, r2
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	469b      	mov	fp, r3
 80062ce:	f04f 0c00 	mov.w	ip, #0
 80062d2:	46d9      	mov	r9, fp
 80062d4:	46e2      	mov	sl, ip
 80062d6:	eb19 0309 	adds.w	r3, r9, r9
 80062da:	eb4a 040a 	adc.w	r4, sl, sl
 80062de:	4699      	mov	r9, r3
 80062e0:	46a2      	mov	sl, r4
 80062e2:	eb19 090b 	adds.w	r9, r9, fp
 80062e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062ea:	f04f 0100 	mov.w	r1, #0
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062fe:	4689      	mov	r9, r1
 8006300:	4692      	mov	sl, r2
 8006302:	eb1b 0509 	adds.w	r5, fp, r9
 8006306:	eb4c 060a 	adc.w	r6, ip, sl
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4619      	mov	r1, r3
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	f04f 0400 	mov.w	r4, #0
 800631c:	0094      	lsls	r4, r2, #2
 800631e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006322:	008b      	lsls	r3, r1, #2
 8006324:	461a      	mov	r2, r3
 8006326:	4623      	mov	r3, r4
 8006328:	4628      	mov	r0, r5
 800632a:	4631      	mov	r1, r6
 800632c:	f7fa fc5c 	bl	8000be8 <__aeabi_uldivmod>
 8006330:	4603      	mov	r3, r0
 8006332:	460c      	mov	r4, r1
 8006334:	461a      	mov	r2, r3
 8006336:	4b32      	ldr	r3, [pc, #200]	; (8006400 <UART_SetConfig+0x6f4>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	; 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	3332      	adds	r3, #50	; 0x32
 800634a:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <UART_SetConfig+0x6f4>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006356:	4498      	add	r8, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	469b      	mov	fp, r3
 800635c:	f04f 0c00 	mov.w	ip, #0
 8006360:	46d9      	mov	r9, fp
 8006362:	46e2      	mov	sl, ip
 8006364:	eb19 0309 	adds.w	r3, r9, r9
 8006368:	eb4a 040a 	adc.w	r4, sl, sl
 800636c:	4699      	mov	r9, r3
 800636e:	46a2      	mov	sl, r4
 8006370:	eb19 090b 	adds.w	r9, r9, fp
 8006374:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800638c:	4689      	mov	r9, r1
 800638e:	4692      	mov	sl, r2
 8006390:	eb1b 0509 	adds.w	r5, fp, r9
 8006394:	eb4c 060a 	adc.w	r6, ip, sl
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4619      	mov	r1, r3
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f04f 0400 	mov.w	r4, #0
 80063aa:	0094      	lsls	r4, r2, #2
 80063ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	461a      	mov	r2, r3
 80063b4:	4623      	mov	r3, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	4631      	mov	r1, r6
 80063ba:	f7fa fc15 	bl	8000be8 <__aeabi_uldivmod>
 80063be:	4603      	mov	r3, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <UART_SetConfig+0x6f4>)
 80063c6:	fba3 1302 	umull	r1, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2164      	movs	r1, #100	; 0x64
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	3332      	adds	r3, #50	; 0x32
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <UART_SetConfig+0x6f4>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4442      	add	r2, r8
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	e7ff      	b.n	80063ee <UART_SetConfig+0x6e2>
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f8:	40011000 	.word	0x40011000
 80063fc:	40011400 	.word	0x40011400
 8006400:	51eb851f 	.word	0x51eb851f

08006404 <__errno>:
 8006404:	4b01      	ldr	r3, [pc, #4]	; (800640c <__errno+0x8>)
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	2000002c 	.word	0x2000002c

08006410 <__libc_init_array>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4e0d      	ldr	r6, [pc, #52]	; (8006448 <__libc_init_array+0x38>)
 8006414:	4c0d      	ldr	r4, [pc, #52]	; (800644c <__libc_init_array+0x3c>)
 8006416:	1ba4      	subs	r4, r4, r6
 8006418:	10a4      	asrs	r4, r4, #2
 800641a:	2500      	movs	r5, #0
 800641c:	42a5      	cmp	r5, r4
 800641e:	d109      	bne.n	8006434 <__libc_init_array+0x24>
 8006420:	4e0b      	ldr	r6, [pc, #44]	; (8006450 <__libc_init_array+0x40>)
 8006422:	4c0c      	ldr	r4, [pc, #48]	; (8006454 <__libc_init_array+0x44>)
 8006424:	f002 fbaa 	bl	8008b7c <_init>
 8006428:	1ba4      	subs	r4, r4, r6
 800642a:	10a4      	asrs	r4, r4, #2
 800642c:	2500      	movs	r5, #0
 800642e:	42a5      	cmp	r5, r4
 8006430:	d105      	bne.n	800643e <__libc_init_array+0x2e>
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006438:	4798      	blx	r3
 800643a:	3501      	adds	r5, #1
 800643c:	e7ee      	b.n	800641c <__libc_init_array+0xc>
 800643e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006442:	4798      	blx	r3
 8006444:	3501      	adds	r5, #1
 8006446:	e7f2      	b.n	800642e <__libc_init_array+0x1e>
 8006448:	08009190 	.word	0x08009190
 800644c:	08009190 	.word	0x08009190
 8006450:	08009190 	.word	0x08009190
 8006454:	08009194 	.word	0x08009194

08006458 <malloc>:
 8006458:	4b02      	ldr	r3, [pc, #8]	; (8006464 <malloc+0xc>)
 800645a:	4601      	mov	r1, r0
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	f000 b859 	b.w	8006514 <_malloc_r>
 8006462:	bf00      	nop
 8006464:	2000002c 	.word	0x2000002c

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <_free_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4605      	mov	r5, r0
 800647c:	2900      	cmp	r1, #0
 800647e:	d045      	beq.n	800650c <_free_r+0x94>
 8006480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006484:	1f0c      	subs	r4, r1, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfb8      	it	lt
 800648a:	18e4      	addlt	r4, r4, r3
 800648c:	f001 fe7f 	bl	800818e <__malloc_lock>
 8006490:	4a1f      	ldr	r2, [pc, #124]	; (8006510 <_free_r+0x98>)
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	4610      	mov	r0, r2
 8006496:	b933      	cbnz	r3, 80064a6 <_free_r+0x2e>
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	6014      	str	r4, [r2, #0]
 800649c:	4628      	mov	r0, r5
 800649e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a2:	f001 be75 	b.w	8008190 <__malloc_unlock>
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	d90c      	bls.n	80064c4 <_free_r+0x4c>
 80064aa:	6821      	ldr	r1, [r4, #0]
 80064ac:	1862      	adds	r2, r4, r1
 80064ae:	4293      	cmp	r3, r2
 80064b0:	bf04      	itt	eq
 80064b2:	681a      	ldreq	r2, [r3, #0]
 80064b4:	685b      	ldreq	r3, [r3, #4]
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	bf04      	itt	eq
 80064ba:	1852      	addeq	r2, r2, r1
 80064bc:	6022      	streq	r2, [r4, #0]
 80064be:	6004      	str	r4, [r0, #0]
 80064c0:	e7ec      	b.n	800649c <_free_r+0x24>
 80064c2:	4613      	mov	r3, r2
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	b10a      	cbz	r2, 80064cc <_free_r+0x54>
 80064c8:	42a2      	cmp	r2, r4
 80064ca:	d9fa      	bls.n	80064c2 <_free_r+0x4a>
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	1858      	adds	r0, r3, r1
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d10b      	bne.n	80064ec <_free_r+0x74>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	4401      	add	r1, r0
 80064d8:	1858      	adds	r0, r3, r1
 80064da:	4282      	cmp	r2, r0
 80064dc:	6019      	str	r1, [r3, #0]
 80064de:	d1dd      	bne.n	800649c <_free_r+0x24>
 80064e0:	6810      	ldr	r0, [r2, #0]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	4401      	add	r1, r0
 80064e8:	6019      	str	r1, [r3, #0]
 80064ea:	e7d7      	b.n	800649c <_free_r+0x24>
 80064ec:	d902      	bls.n	80064f4 <_free_r+0x7c>
 80064ee:	230c      	movs	r3, #12
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	e7d3      	b.n	800649c <_free_r+0x24>
 80064f4:	6820      	ldr	r0, [r4, #0]
 80064f6:	1821      	adds	r1, r4, r0
 80064f8:	428a      	cmp	r2, r1
 80064fa:	bf04      	itt	eq
 80064fc:	6811      	ldreq	r1, [r2, #0]
 80064fe:	6852      	ldreq	r2, [r2, #4]
 8006500:	6062      	str	r2, [r4, #4]
 8006502:	bf04      	itt	eq
 8006504:	1809      	addeq	r1, r1, r0
 8006506:	6021      	streq	r1, [r4, #0]
 8006508:	605c      	str	r4, [r3, #4]
 800650a:	e7c7      	b.n	800649c <_free_r+0x24>
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	20000220 	.word	0x20000220

08006514 <_malloc_r>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	1ccd      	adds	r5, r1, #3
 8006518:	f025 0503 	bic.w	r5, r5, #3
 800651c:	3508      	adds	r5, #8
 800651e:	2d0c      	cmp	r5, #12
 8006520:	bf38      	it	cc
 8006522:	250c      	movcc	r5, #12
 8006524:	2d00      	cmp	r5, #0
 8006526:	4606      	mov	r6, r0
 8006528:	db01      	blt.n	800652e <_malloc_r+0x1a>
 800652a:	42a9      	cmp	r1, r5
 800652c:	d903      	bls.n	8006536 <_malloc_r+0x22>
 800652e:	230c      	movs	r3, #12
 8006530:	6033      	str	r3, [r6, #0]
 8006532:	2000      	movs	r0, #0
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	f001 fe2a 	bl	800818e <__malloc_lock>
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <_malloc_r+0xac>)
 800653c:	6814      	ldr	r4, [r2, #0]
 800653e:	4621      	mov	r1, r4
 8006540:	b991      	cbnz	r1, 8006568 <_malloc_r+0x54>
 8006542:	4c20      	ldr	r4, [pc, #128]	; (80065c4 <_malloc_r+0xb0>)
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	b91b      	cbnz	r3, 8006550 <_malloc_r+0x3c>
 8006548:	4630      	mov	r0, r6
 800654a:	f000 fd15 	bl	8006f78 <_sbrk_r>
 800654e:	6020      	str	r0, [r4, #0]
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f000 fd10 	bl	8006f78 <_sbrk_r>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d124      	bne.n	80065a6 <_malloc_r+0x92>
 800655c:	230c      	movs	r3, #12
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	4630      	mov	r0, r6
 8006562:	f001 fe15 	bl	8008190 <__malloc_unlock>
 8006566:	e7e4      	b.n	8006532 <_malloc_r+0x1e>
 8006568:	680b      	ldr	r3, [r1, #0]
 800656a:	1b5b      	subs	r3, r3, r5
 800656c:	d418      	bmi.n	80065a0 <_malloc_r+0x8c>
 800656e:	2b0b      	cmp	r3, #11
 8006570:	d90f      	bls.n	8006592 <_malloc_r+0x7e>
 8006572:	600b      	str	r3, [r1, #0]
 8006574:	50cd      	str	r5, [r1, r3]
 8006576:	18cc      	adds	r4, r1, r3
 8006578:	4630      	mov	r0, r6
 800657a:	f001 fe09 	bl	8008190 <__malloc_unlock>
 800657e:	f104 000b 	add.w	r0, r4, #11
 8006582:	1d23      	adds	r3, r4, #4
 8006584:	f020 0007 	bic.w	r0, r0, #7
 8006588:	1ac3      	subs	r3, r0, r3
 800658a:	d0d3      	beq.n	8006534 <_malloc_r+0x20>
 800658c:	425a      	negs	r2, r3
 800658e:	50e2      	str	r2, [r4, r3]
 8006590:	e7d0      	b.n	8006534 <_malloc_r+0x20>
 8006592:	428c      	cmp	r4, r1
 8006594:	684b      	ldr	r3, [r1, #4]
 8006596:	bf16      	itet	ne
 8006598:	6063      	strne	r3, [r4, #4]
 800659a:	6013      	streq	r3, [r2, #0]
 800659c:	460c      	movne	r4, r1
 800659e:	e7eb      	b.n	8006578 <_malloc_r+0x64>
 80065a0:	460c      	mov	r4, r1
 80065a2:	6849      	ldr	r1, [r1, #4]
 80065a4:	e7cc      	b.n	8006540 <_malloc_r+0x2c>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d005      	beq.n	80065bc <_malloc_r+0xa8>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4630      	mov	r0, r6
 80065b4:	f000 fce0 	bl	8006f78 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d0cf      	beq.n	800655c <_malloc_r+0x48>
 80065bc:	6025      	str	r5, [r4, #0]
 80065be:	e7db      	b.n	8006578 <_malloc_r+0x64>
 80065c0:	20000220 	.word	0x20000220
 80065c4:	20000224 	.word	0x20000224

080065c8 <__cvt>:
 80065c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	ec55 4b10 	vmov	r4, r5, d0
 80065d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80065d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	460e      	mov	r6, r1
 80065da:	4691      	mov	r9, r2
 80065dc:	4619      	mov	r1, r3
 80065de:	bfb8      	it	lt
 80065e0:	4622      	movlt	r2, r4
 80065e2:	462b      	mov	r3, r5
 80065e4:	f027 0720 	bic.w	r7, r7, #32
 80065e8:	bfbb      	ittet	lt
 80065ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065ee:	461d      	movlt	r5, r3
 80065f0:	2300      	movge	r3, #0
 80065f2:	232d      	movlt	r3, #45	; 0x2d
 80065f4:	bfb8      	it	lt
 80065f6:	4614      	movlt	r4, r2
 80065f8:	2f46      	cmp	r7, #70	; 0x46
 80065fa:	700b      	strb	r3, [r1, #0]
 80065fc:	d004      	beq.n	8006608 <__cvt+0x40>
 80065fe:	2f45      	cmp	r7, #69	; 0x45
 8006600:	d100      	bne.n	8006604 <__cvt+0x3c>
 8006602:	3601      	adds	r6, #1
 8006604:	2102      	movs	r1, #2
 8006606:	e000      	b.n	800660a <__cvt+0x42>
 8006608:	2103      	movs	r1, #3
 800660a:	ab03      	add	r3, sp, #12
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	ab02      	add	r3, sp, #8
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4632      	mov	r2, r6
 8006614:	4653      	mov	r3, sl
 8006616:	ec45 4b10 	vmov	d0, r4, r5
 800661a:	f000 fe09 	bl	8007230 <_dtoa_r>
 800661e:	2f47      	cmp	r7, #71	; 0x47
 8006620:	4680      	mov	r8, r0
 8006622:	d102      	bne.n	800662a <__cvt+0x62>
 8006624:	f019 0f01 	tst.w	r9, #1
 8006628:	d026      	beq.n	8006678 <__cvt+0xb0>
 800662a:	2f46      	cmp	r7, #70	; 0x46
 800662c:	eb08 0906 	add.w	r9, r8, r6
 8006630:	d111      	bne.n	8006656 <__cvt+0x8e>
 8006632:	f898 3000 	ldrb.w	r3, [r8]
 8006636:	2b30      	cmp	r3, #48	; 0x30
 8006638:	d10a      	bne.n	8006650 <__cvt+0x88>
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7fa fa61 	bl	8000b08 <__aeabi_dcmpeq>
 8006646:	b918      	cbnz	r0, 8006650 <__cvt+0x88>
 8006648:	f1c6 0601 	rsb	r6, r6, #1
 800664c:	f8ca 6000 	str.w	r6, [sl]
 8006650:	f8da 3000 	ldr.w	r3, [sl]
 8006654:	4499      	add	r9, r3
 8006656:	2200      	movs	r2, #0
 8006658:	2300      	movs	r3, #0
 800665a:	4620      	mov	r0, r4
 800665c:	4629      	mov	r1, r5
 800665e:	f7fa fa53 	bl	8000b08 <__aeabi_dcmpeq>
 8006662:	b938      	cbnz	r0, 8006674 <__cvt+0xac>
 8006664:	2230      	movs	r2, #48	; 0x30
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	454b      	cmp	r3, r9
 800666a:	d205      	bcs.n	8006678 <__cvt+0xb0>
 800666c:	1c59      	adds	r1, r3, #1
 800666e:	9103      	str	r1, [sp, #12]
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e7f8      	b.n	8006666 <__cvt+0x9e>
 8006674:	f8cd 900c 	str.w	r9, [sp, #12]
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800667c:	eba3 0308 	sub.w	r3, r3, r8
 8006680:	4640      	mov	r0, r8
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	b004      	add	sp, #16
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800668a <__exponent>:
 800668a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668c:	2900      	cmp	r1, #0
 800668e:	4604      	mov	r4, r0
 8006690:	bfba      	itte	lt
 8006692:	4249      	neglt	r1, r1
 8006694:	232d      	movlt	r3, #45	; 0x2d
 8006696:	232b      	movge	r3, #43	; 0x2b
 8006698:	2909      	cmp	r1, #9
 800669a:	f804 2b02 	strb.w	r2, [r4], #2
 800669e:	7043      	strb	r3, [r0, #1]
 80066a0:	dd20      	ble.n	80066e4 <__exponent+0x5a>
 80066a2:	f10d 0307 	add.w	r3, sp, #7
 80066a6:	461f      	mov	r7, r3
 80066a8:	260a      	movs	r6, #10
 80066aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80066ae:	fb06 1115 	mls	r1, r6, r5, r1
 80066b2:	3130      	adds	r1, #48	; 0x30
 80066b4:	2d09      	cmp	r5, #9
 80066b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80066be:	4629      	mov	r1, r5
 80066c0:	dc09      	bgt.n	80066d6 <__exponent+0x4c>
 80066c2:	3130      	adds	r1, #48	; 0x30
 80066c4:	3b02      	subs	r3, #2
 80066c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066ca:	42bb      	cmp	r3, r7
 80066cc:	4622      	mov	r2, r4
 80066ce:	d304      	bcc.n	80066da <__exponent+0x50>
 80066d0:	1a10      	subs	r0, r2, r0
 80066d2:	b003      	add	sp, #12
 80066d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d6:	4613      	mov	r3, r2
 80066d8:	e7e7      	b.n	80066aa <__exponent+0x20>
 80066da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066de:	f804 2b01 	strb.w	r2, [r4], #1
 80066e2:	e7f2      	b.n	80066ca <__exponent+0x40>
 80066e4:	2330      	movs	r3, #48	; 0x30
 80066e6:	4419      	add	r1, r3
 80066e8:	7083      	strb	r3, [r0, #2]
 80066ea:	1d02      	adds	r2, r0, #4
 80066ec:	70c1      	strb	r1, [r0, #3]
 80066ee:	e7ef      	b.n	80066d0 <__exponent+0x46>

080066f0 <_printf_float>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	b08d      	sub	sp, #52	; 0x34
 80066f6:	460c      	mov	r4, r1
 80066f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80066fc:	4616      	mov	r6, r2
 80066fe:	461f      	mov	r7, r3
 8006700:	4605      	mov	r5, r0
 8006702:	f001 fcc7 	bl	8008094 <_localeconv_r>
 8006706:	6803      	ldr	r3, [r0, #0]
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	4618      	mov	r0, r3
 800670c:	f7f9 fd80 	bl	8000210 <strlen>
 8006710:	2300      	movs	r3, #0
 8006712:	930a      	str	r3, [sp, #40]	; 0x28
 8006714:	f8d8 3000 	ldr.w	r3, [r8]
 8006718:	9005      	str	r0, [sp, #20]
 800671a:	3307      	adds	r3, #7
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	f103 0208 	add.w	r2, r3, #8
 8006724:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006728:	f8d4 b000 	ldr.w	fp, [r4]
 800672c:	f8c8 2000 	str.w	r2, [r8]
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006738:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800673c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006740:	9307      	str	r3, [sp, #28]
 8006742:	f8cd 8018 	str.w	r8, [sp, #24]
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	4ba7      	ldr	r3, [pc, #668]	; (80069e8 <_printf_float+0x2f8>)
 800674c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006750:	f7fa fa0c 	bl	8000b6c <__aeabi_dcmpun>
 8006754:	bb70      	cbnz	r0, 80067b4 <_printf_float+0xc4>
 8006756:	f04f 32ff 	mov.w	r2, #4294967295
 800675a:	4ba3      	ldr	r3, [pc, #652]	; (80069e8 <_printf_float+0x2f8>)
 800675c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006760:	f7fa f9e6 	bl	8000b30 <__aeabi_dcmple>
 8006764:	bb30      	cbnz	r0, 80067b4 <_printf_float+0xc4>
 8006766:	2200      	movs	r2, #0
 8006768:	2300      	movs	r3, #0
 800676a:	4640      	mov	r0, r8
 800676c:	4649      	mov	r1, r9
 800676e:	f7fa f9d5 	bl	8000b1c <__aeabi_dcmplt>
 8006772:	b110      	cbz	r0, 800677a <_printf_float+0x8a>
 8006774:	232d      	movs	r3, #45	; 0x2d
 8006776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677a:	4a9c      	ldr	r2, [pc, #624]	; (80069ec <_printf_float+0x2fc>)
 800677c:	4b9c      	ldr	r3, [pc, #624]	; (80069f0 <_printf_float+0x300>)
 800677e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006782:	bf8c      	ite	hi
 8006784:	4690      	movhi	r8, r2
 8006786:	4698      	movls	r8, r3
 8006788:	2303      	movs	r3, #3
 800678a:	f02b 0204 	bic.w	r2, fp, #4
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	9700      	str	r7, [sp, #0]
 8006798:	4633      	mov	r3, r6
 800679a:	aa0b      	add	r2, sp, #44	; 0x2c
 800679c:	4621      	mov	r1, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f9e6 	bl	8006b70 <_printf_common>
 80067a4:	3001      	adds	r0, #1
 80067a6:	f040 808d 	bne.w	80068c4 <_printf_float+0x1d4>
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295
 80067ae:	b00d      	add	sp, #52	; 0x34
 80067b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7fa f9d6 	bl	8000b6c <__aeabi_dcmpun>
 80067c0:	b110      	cbz	r0, 80067c8 <_printf_float+0xd8>
 80067c2:	4a8c      	ldr	r2, [pc, #560]	; (80069f4 <_printf_float+0x304>)
 80067c4:	4b8c      	ldr	r3, [pc, #560]	; (80069f8 <_printf_float+0x308>)
 80067c6:	e7da      	b.n	800677e <_printf_float+0x8e>
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	1c4b      	adds	r3, r1, #1
 80067cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80067d0:	a80a      	add	r0, sp, #40	; 0x28
 80067d2:	d13e      	bne.n	8006852 <_printf_float+0x162>
 80067d4:	2306      	movs	r3, #6
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	2300      	movs	r3, #0
 80067da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80067de:	ab09      	add	r3, sp, #36	; 0x24
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	ec49 8b10 	vmov	d0, r8, r9
 80067e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067ea:	6022      	str	r2, [r4, #0]
 80067ec:	f8cd a004 	str.w	sl, [sp, #4]
 80067f0:	6861      	ldr	r1, [r4, #4]
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7ff fee8 	bl	80065c8 <__cvt>
 80067f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80067fc:	2b47      	cmp	r3, #71	; 0x47
 80067fe:	4680      	mov	r8, r0
 8006800:	d109      	bne.n	8006816 <_printf_float+0x126>
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	1cd8      	adds	r0, r3, #3
 8006806:	db02      	blt.n	800680e <_printf_float+0x11e>
 8006808:	6862      	ldr	r2, [r4, #4]
 800680a:	4293      	cmp	r3, r2
 800680c:	dd47      	ble.n	800689e <_printf_float+0x1ae>
 800680e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006812:	fa5f fa8a 	uxtb.w	sl, sl
 8006816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800681a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800681c:	d824      	bhi.n	8006868 <_printf_float+0x178>
 800681e:	3901      	subs	r1, #1
 8006820:	4652      	mov	r2, sl
 8006822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006826:	9109      	str	r1, [sp, #36]	; 0x24
 8006828:	f7ff ff2f 	bl	800668a <__exponent>
 800682c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800682e:	1813      	adds	r3, r2, r0
 8006830:	2a01      	cmp	r2, #1
 8006832:	4681      	mov	r9, r0
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	dc02      	bgt.n	800683e <_printf_float+0x14e>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	07d1      	lsls	r1, r2, #31
 800683c:	d501      	bpl.n	8006842 <_printf_float+0x152>
 800683e:	3301      	adds	r3, #1
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0a5      	beq.n	8006796 <_printf_float+0xa6>
 800684a:	232d      	movs	r3, #45	; 0x2d
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006850:	e7a1      	b.n	8006796 <_printf_float+0xa6>
 8006852:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006856:	f000 8177 	beq.w	8006b48 <_printf_float+0x458>
 800685a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800685e:	d1bb      	bne.n	80067d8 <_printf_float+0xe8>
 8006860:	2900      	cmp	r1, #0
 8006862:	d1b9      	bne.n	80067d8 <_printf_float+0xe8>
 8006864:	2301      	movs	r3, #1
 8006866:	e7b6      	b.n	80067d6 <_printf_float+0xe6>
 8006868:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800686c:	d119      	bne.n	80068a2 <_printf_float+0x1b2>
 800686e:	2900      	cmp	r1, #0
 8006870:	6863      	ldr	r3, [r4, #4]
 8006872:	dd0c      	ble.n	800688e <_printf_float+0x19e>
 8006874:	6121      	str	r1, [r4, #16]
 8006876:	b913      	cbnz	r3, 800687e <_printf_float+0x18e>
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	07d2      	lsls	r2, r2, #31
 800687c:	d502      	bpl.n	8006884 <_printf_float+0x194>
 800687e:	3301      	adds	r3, #1
 8006880:	440b      	add	r3, r1
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	65a3      	str	r3, [r4, #88]	; 0x58
 8006888:	f04f 0900 	mov.w	r9, #0
 800688c:	e7d9      	b.n	8006842 <_printf_float+0x152>
 800688e:	b913      	cbnz	r3, 8006896 <_printf_float+0x1a6>
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	07d0      	lsls	r0, r2, #31
 8006894:	d501      	bpl.n	800689a <_printf_float+0x1aa>
 8006896:	3302      	adds	r3, #2
 8006898:	e7f3      	b.n	8006882 <_printf_float+0x192>
 800689a:	2301      	movs	r3, #1
 800689c:	e7f1      	b.n	8006882 <_printf_float+0x192>
 800689e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80068a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068a6:	4293      	cmp	r3, r2
 80068a8:	db05      	blt.n	80068b6 <_printf_float+0x1c6>
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	07d1      	lsls	r1, r2, #31
 80068b0:	d5e8      	bpl.n	8006884 <_printf_float+0x194>
 80068b2:	3301      	adds	r3, #1
 80068b4:	e7e5      	b.n	8006882 <_printf_float+0x192>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfd4      	ite	le
 80068ba:	f1c3 0302 	rsble	r3, r3, #2
 80068be:	2301      	movgt	r3, #1
 80068c0:	4413      	add	r3, r2
 80068c2:	e7de      	b.n	8006882 <_printf_float+0x192>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	055a      	lsls	r2, r3, #21
 80068c8:	d407      	bmi.n	80068da <_printf_float+0x1ea>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	4642      	mov	r2, r8
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	d12b      	bne.n	8006930 <_printf_float+0x240>
 80068d8:	e767      	b.n	80067aa <_printf_float+0xba>
 80068da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068de:	f240 80dc 	bls.w	8006a9a <_printf_float+0x3aa>
 80068e2:	2200      	movs	r2, #0
 80068e4:	2300      	movs	r3, #0
 80068e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068ea:	f7fa f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d033      	beq.n	800695a <_printf_float+0x26a>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4a41      	ldr	r2, [pc, #260]	; (80069fc <_printf_float+0x30c>)
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f af54 	beq.w	80067aa <_printf_float+0xba>
 8006902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006906:	429a      	cmp	r2, r3
 8006908:	db02      	blt.n	8006910 <_printf_float+0x220>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	07d8      	lsls	r0, r3, #31
 800690e:	d50f      	bpl.n	8006930 <_printf_float+0x240>
 8006910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af45 	beq.w	80067aa <_printf_float+0xba>
 8006920:	f04f 0800 	mov.w	r8, #0
 8006924:	f104 091a 	add.w	r9, r4, #26
 8006928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692a:	3b01      	subs	r3, #1
 800692c:	4543      	cmp	r3, r8
 800692e:	dc09      	bgt.n	8006944 <_printf_float+0x254>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	079b      	lsls	r3, r3, #30
 8006934:	f100 8103 	bmi.w	8006b3e <_printf_float+0x44e>
 8006938:	68e0      	ldr	r0, [r4, #12]
 800693a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693c:	4298      	cmp	r0, r3
 800693e:	bfb8      	it	lt
 8006940:	4618      	movlt	r0, r3
 8006942:	e734      	b.n	80067ae <_printf_float+0xbe>
 8006944:	2301      	movs	r3, #1
 8006946:	464a      	mov	r2, r9
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f af2b 	beq.w	80067aa <_printf_float+0xba>
 8006954:	f108 0801 	add.w	r8, r8, #1
 8006958:	e7e6      	b.n	8006928 <_printf_float+0x238>
 800695a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc2b      	bgt.n	80069b8 <_printf_float+0x2c8>
 8006960:	2301      	movs	r3, #1
 8006962:	4a26      	ldr	r2, [pc, #152]	; (80069fc <_printf_float+0x30c>)
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f af1d 	beq.w	80067aa <_printf_float+0xba>
 8006970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006972:	b923      	cbnz	r3, 800697e <_printf_float+0x28e>
 8006974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006976:	b913      	cbnz	r3, 800697e <_printf_float+0x28e>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d5d8      	bpl.n	8006930 <_printf_float+0x240>
 800697e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	f43f af0e 	beq.w	80067aa <_printf_float+0xba>
 800698e:	f04f 0900 	mov.w	r9, #0
 8006992:	f104 0a1a 	add.w	sl, r4, #26
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	425b      	negs	r3, r3
 800699a:	454b      	cmp	r3, r9
 800699c:	dc01      	bgt.n	80069a2 <_printf_float+0x2b2>
 800699e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a0:	e794      	b.n	80068cc <_printf_float+0x1dc>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4652      	mov	r2, sl
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	f43f aefc 	beq.w	80067aa <_printf_float+0xba>
 80069b2:	f109 0901 	add.w	r9, r9, #1
 80069b6:	e7ee      	b.n	8006996 <_printf_float+0x2a6>
 80069b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069bc:	429a      	cmp	r2, r3
 80069be:	bfa8      	it	ge
 80069c0:	461a      	movge	r2, r3
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	4691      	mov	r9, r2
 80069c6:	dd07      	ble.n	80069d8 <_printf_float+0x2e8>
 80069c8:	4613      	mov	r3, r2
 80069ca:	4631      	mov	r1, r6
 80069cc:	4642      	mov	r2, r8
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	f43f aee9 	beq.w	80067aa <_printf_float+0xba>
 80069d8:	f104 031a 	add.w	r3, r4, #26
 80069dc:	f04f 0b00 	mov.w	fp, #0
 80069e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069e4:	9306      	str	r3, [sp, #24]
 80069e6:	e015      	b.n	8006a14 <_printf_float+0x324>
 80069e8:	7fefffff 	.word	0x7fefffff
 80069ec:	08008ecc 	.word	0x08008ecc
 80069f0:	08008ec8 	.word	0x08008ec8
 80069f4:	08008ed4 	.word	0x08008ed4
 80069f8:	08008ed0 	.word	0x08008ed0
 80069fc:	08008ed8 	.word	0x08008ed8
 8006a00:	2301      	movs	r3, #1
 8006a02:	9a06      	ldr	r2, [sp, #24]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	f43f aecd 	beq.w	80067aa <_printf_float+0xba>
 8006a10:	f10b 0b01 	add.w	fp, fp, #1
 8006a14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a18:	ebaa 0309 	sub.w	r3, sl, r9
 8006a1c:	455b      	cmp	r3, fp
 8006a1e:	dcef      	bgt.n	8006a00 <_printf_float+0x310>
 8006a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a24:	429a      	cmp	r2, r3
 8006a26:	44d0      	add	r8, sl
 8006a28:	db15      	blt.n	8006a56 <_printf_float+0x366>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	07da      	lsls	r2, r3, #31
 8006a2e:	d412      	bmi.n	8006a56 <_printf_float+0x366>
 8006a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a34:	eba3 020a 	sub.w	r2, r3, sl
 8006a38:	eba3 0a01 	sub.w	sl, r3, r1
 8006a3c:	4592      	cmp	sl, r2
 8006a3e:	bfa8      	it	ge
 8006a40:	4692      	movge	sl, r2
 8006a42:	f1ba 0f00 	cmp.w	sl, #0
 8006a46:	dc0e      	bgt.n	8006a66 <_printf_float+0x376>
 8006a48:	f04f 0800 	mov.w	r8, #0
 8006a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a50:	f104 091a 	add.w	r9, r4, #26
 8006a54:	e019      	b.n	8006a8a <_printf_float+0x39a>
 8006a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	d1e5      	bne.n	8006a30 <_printf_float+0x340>
 8006a64:	e6a1      	b.n	80067aa <_printf_float+0xba>
 8006a66:	4653      	mov	r3, sl
 8006a68:	4642      	mov	r2, r8
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	d1e9      	bne.n	8006a48 <_printf_float+0x358>
 8006a74:	e699      	b.n	80067aa <_printf_float+0xba>
 8006a76:	2301      	movs	r3, #1
 8006a78:	464a      	mov	r2, r9
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	f43f ae92 	beq.w	80067aa <_printf_float+0xba>
 8006a86:	f108 0801 	add.w	r8, r8, #1
 8006a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	eba3 030a 	sub.w	r3, r3, sl
 8006a94:	4543      	cmp	r3, r8
 8006a96:	dcee      	bgt.n	8006a76 <_printf_float+0x386>
 8006a98:	e74a      	b.n	8006930 <_printf_float+0x240>
 8006a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a9c:	2a01      	cmp	r2, #1
 8006a9e:	dc01      	bgt.n	8006aa4 <_printf_float+0x3b4>
 8006aa0:	07db      	lsls	r3, r3, #31
 8006aa2:	d53a      	bpl.n	8006b1a <_printf_float+0x42a>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f ae7b 	beq.w	80067aa <_printf_float+0xba>
 8006ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f108 0801 	add.w	r8, r8, #1
 8006ac4:	f43f ae71 	beq.w	80067aa <_printf_float+0xba>
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aca:	2200      	movs	r2, #0
 8006acc:	f103 3aff 	add.w	sl, r3, #4294967295
 8006ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f7fa f817 	bl	8000b08 <__aeabi_dcmpeq>
 8006ada:	b9c8      	cbnz	r0, 8006b10 <_printf_float+0x420>
 8006adc:	4653      	mov	r3, sl
 8006ade:	4642      	mov	r2, r8
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d10e      	bne.n	8006b08 <_printf_float+0x418>
 8006aea:	e65e      	b.n	80067aa <_printf_float+0xba>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4652      	mov	r2, sl
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f ae57 	beq.w	80067aa <_printf_float+0xba>
 8006afc:	f108 0801 	add.w	r8, r8, #1
 8006b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b02:	3b01      	subs	r3, #1
 8006b04:	4543      	cmp	r3, r8
 8006b06:	dcf1      	bgt.n	8006aec <_printf_float+0x3fc>
 8006b08:	464b      	mov	r3, r9
 8006b0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b0e:	e6de      	b.n	80068ce <_printf_float+0x1de>
 8006b10:	f04f 0800 	mov.w	r8, #0
 8006b14:	f104 0a1a 	add.w	sl, r4, #26
 8006b18:	e7f2      	b.n	8006b00 <_printf_float+0x410>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e7df      	b.n	8006ade <_printf_float+0x3ee>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	464a      	mov	r2, r9
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f43f ae3e 	beq.w	80067aa <_printf_float+0xba>
 8006b2e:	f108 0801 	add.w	r8, r8, #1
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	4543      	cmp	r3, r8
 8006b3a:	dcf0      	bgt.n	8006b1e <_printf_float+0x42e>
 8006b3c:	e6fc      	b.n	8006938 <_printf_float+0x248>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	f104 0919 	add.w	r9, r4, #25
 8006b46:	e7f4      	b.n	8006b32 <_printf_float+0x442>
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	f43f ae8b 	beq.w	8006864 <_printf_float+0x174>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006b54:	ab09      	add	r3, sp, #36	; 0x24
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	ec49 8b10 	vmov	d0, r8, r9
 8006b5c:	6022      	str	r2, [r4, #0]
 8006b5e:	f8cd a004 	str.w	sl, [sp, #4]
 8006b62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7ff fd2e 	bl	80065c8 <__cvt>
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	e648      	b.n	8006802 <_printf_float+0x112>

08006b70 <_printf_common>:
 8006b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	4691      	mov	r9, r2
 8006b76:	461f      	mov	r7, r3
 8006b78:	688a      	ldr	r2, [r1, #8]
 8006b7a:	690b      	ldr	r3, [r1, #16]
 8006b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b80:	4293      	cmp	r3, r2
 8006b82:	bfb8      	it	lt
 8006b84:	4613      	movlt	r3, r2
 8006b86:	f8c9 3000 	str.w	r3, [r9]
 8006b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	b112      	cbz	r2, 8006b9a <_printf_common+0x2a>
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c9 3000 	str.w	r3, [r9]
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	0699      	lsls	r1, r3, #26
 8006b9e:	bf42      	ittt	mi
 8006ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ba4:	3302      	addmi	r3, #2
 8006ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8006baa:	6825      	ldr	r5, [r4, #0]
 8006bac:	f015 0506 	ands.w	r5, r5, #6
 8006bb0:	d107      	bne.n	8006bc2 <_printf_common+0x52>
 8006bb2:	f104 0a19 	add.w	sl, r4, #25
 8006bb6:	68e3      	ldr	r3, [r4, #12]
 8006bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	42ab      	cmp	r3, r5
 8006bc0:	dc28      	bgt.n	8006c14 <_printf_common+0xa4>
 8006bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	3300      	adds	r3, #0
 8006bca:	bf18      	it	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	0692      	lsls	r2, r2, #26
 8006bd0:	d42d      	bmi.n	8006c2e <_printf_common+0xbe>
 8006bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4630      	mov	r0, r6
 8006bda:	47c0      	blx	r8
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d020      	beq.n	8006c22 <_printf_common+0xb2>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	68e5      	ldr	r5, [r4, #12]
 8006be4:	f8d9 2000 	ldr.w	r2, [r9]
 8006be8:	f003 0306 	and.w	r3, r3, #6
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	bf08      	it	eq
 8006bf0:	1aad      	subeq	r5, r5, r2
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	6922      	ldr	r2, [r4, #16]
 8006bf6:	bf0c      	ite	eq
 8006bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bfc:	2500      	movne	r5, #0
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	bfc4      	itt	gt
 8006c02:	1a9b      	subgt	r3, r3, r2
 8006c04:	18ed      	addgt	r5, r5, r3
 8006c06:	f04f 0900 	mov.w	r9, #0
 8006c0a:	341a      	adds	r4, #26
 8006c0c:	454d      	cmp	r5, r9
 8006c0e:	d11a      	bne.n	8006c46 <_printf_common+0xd6>
 8006c10:	2000      	movs	r0, #0
 8006c12:	e008      	b.n	8006c26 <_printf_common+0xb6>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4652      	mov	r2, sl
 8006c18:	4639      	mov	r1, r7
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	47c0      	blx	r8
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d103      	bne.n	8006c2a <_printf_common+0xba>
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	e7c3      	b.n	8006bb6 <_printf_common+0x46>
 8006c2e:	18e1      	adds	r1, r4, r3
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	2030      	movs	r0, #48	; 0x30
 8006c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c38:	4422      	add	r2, r4
 8006c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c42:	3302      	adds	r3, #2
 8006c44:	e7c5      	b.n	8006bd2 <_printf_common+0x62>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	47c0      	blx	r8
 8006c50:	3001      	adds	r0, #1
 8006c52:	d0e6      	beq.n	8006c22 <_printf_common+0xb2>
 8006c54:	f109 0901 	add.w	r9, r9, #1
 8006c58:	e7d8      	b.n	8006c0c <_printf_common+0x9c>
	...

08006c5c <_printf_i>:
 8006c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c64:	460c      	mov	r4, r1
 8006c66:	7e09      	ldrb	r1, [r1, #24]
 8006c68:	b085      	sub	sp, #20
 8006c6a:	296e      	cmp	r1, #110	; 0x6e
 8006c6c:	4617      	mov	r7, r2
 8006c6e:	4606      	mov	r6, r0
 8006c70:	4698      	mov	r8, r3
 8006c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c74:	f000 80b3 	beq.w	8006dde <_printf_i+0x182>
 8006c78:	d822      	bhi.n	8006cc0 <_printf_i+0x64>
 8006c7a:	2963      	cmp	r1, #99	; 0x63
 8006c7c:	d036      	beq.n	8006cec <_printf_i+0x90>
 8006c7e:	d80a      	bhi.n	8006c96 <_printf_i+0x3a>
 8006c80:	2900      	cmp	r1, #0
 8006c82:	f000 80b9 	beq.w	8006df8 <_printf_i+0x19c>
 8006c86:	2958      	cmp	r1, #88	; 0x58
 8006c88:	f000 8083 	beq.w	8006d92 <_printf_i+0x136>
 8006c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c94:	e032      	b.n	8006cfc <_printf_i+0xa0>
 8006c96:	2964      	cmp	r1, #100	; 0x64
 8006c98:	d001      	beq.n	8006c9e <_printf_i+0x42>
 8006c9a:	2969      	cmp	r1, #105	; 0x69
 8006c9c:	d1f6      	bne.n	8006c8c <_printf_i+0x30>
 8006c9e:	6820      	ldr	r0, [r4, #0]
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	0605      	lsls	r5, r0, #24
 8006ca4:	f103 0104 	add.w	r1, r3, #4
 8006ca8:	d52a      	bpl.n	8006d00 <_printf_i+0xa4>
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da03      	bge.n	8006cba <_printf_i+0x5e>
 8006cb2:	222d      	movs	r2, #45	; 0x2d
 8006cb4:	425b      	negs	r3, r3
 8006cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cba:	486f      	ldr	r0, [pc, #444]	; (8006e78 <_printf_i+0x21c>)
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	e039      	b.n	8006d34 <_printf_i+0xd8>
 8006cc0:	2973      	cmp	r1, #115	; 0x73
 8006cc2:	f000 809d 	beq.w	8006e00 <_printf_i+0x1a4>
 8006cc6:	d808      	bhi.n	8006cda <_printf_i+0x7e>
 8006cc8:	296f      	cmp	r1, #111	; 0x6f
 8006cca:	d020      	beq.n	8006d0e <_printf_i+0xb2>
 8006ccc:	2970      	cmp	r1, #112	; 0x70
 8006cce:	d1dd      	bne.n	8006c8c <_printf_i+0x30>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	f043 0320 	orr.w	r3, r3, #32
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	e003      	b.n	8006ce2 <_printf_i+0x86>
 8006cda:	2975      	cmp	r1, #117	; 0x75
 8006cdc:	d017      	beq.n	8006d0e <_printf_i+0xb2>
 8006cde:	2978      	cmp	r1, #120	; 0x78
 8006ce0:	d1d4      	bne.n	8006c8c <_printf_i+0x30>
 8006ce2:	2378      	movs	r3, #120	; 0x78
 8006ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ce8:	4864      	ldr	r0, [pc, #400]	; (8006e7c <_printf_i+0x220>)
 8006cea:	e055      	b.n	8006d98 <_printf_i+0x13c>
 8006cec:	6813      	ldr	r3, [r2, #0]
 8006cee:	1d19      	adds	r1, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6011      	str	r1, [r2, #0]
 8006cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e08c      	b.n	8006e1a <_printf_i+0x1be>
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6011      	str	r1, [r2, #0]
 8006d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d08:	bf18      	it	ne
 8006d0a:	b21b      	sxthne	r3, r3
 8006d0c:	e7cf      	b.n	8006cae <_printf_i+0x52>
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	6825      	ldr	r5, [r4, #0]
 8006d12:	1d18      	adds	r0, r3, #4
 8006d14:	6010      	str	r0, [r2, #0]
 8006d16:	0628      	lsls	r0, r5, #24
 8006d18:	d501      	bpl.n	8006d1e <_printf_i+0xc2>
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	e002      	b.n	8006d24 <_printf_i+0xc8>
 8006d1e:	0668      	lsls	r0, r5, #25
 8006d20:	d5fb      	bpl.n	8006d1a <_printf_i+0xbe>
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	4854      	ldr	r0, [pc, #336]	; (8006e78 <_printf_i+0x21c>)
 8006d26:	296f      	cmp	r1, #111	; 0x6f
 8006d28:	bf14      	ite	ne
 8006d2a:	220a      	movne	r2, #10
 8006d2c:	2208      	moveq	r2, #8
 8006d2e:	2100      	movs	r1, #0
 8006d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d34:	6865      	ldr	r5, [r4, #4]
 8006d36:	60a5      	str	r5, [r4, #8]
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	f2c0 8095 	blt.w	8006e68 <_printf_i+0x20c>
 8006d3e:	6821      	ldr	r1, [r4, #0]
 8006d40:	f021 0104 	bic.w	r1, r1, #4
 8006d44:	6021      	str	r1, [r4, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d13d      	bne.n	8006dc6 <_printf_i+0x16a>
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	f040 808e 	bne.w	8006e6c <_printf_i+0x210>
 8006d50:	4665      	mov	r5, ip
 8006d52:	2a08      	cmp	r2, #8
 8006d54:	d10b      	bne.n	8006d6e <_printf_i+0x112>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	07db      	lsls	r3, r3, #31
 8006d5a:	d508      	bpl.n	8006d6e <_printf_i+0x112>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bfde      	ittt	le
 8006d64:	2330      	movle	r3, #48	; 0x30
 8006d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d6e:	ebac 0305 	sub.w	r3, ip, r5
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	f8cd 8000 	str.w	r8, [sp]
 8006d78:	463b      	mov	r3, r7
 8006d7a:	aa03      	add	r2, sp, #12
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff fef6 	bl	8006b70 <_printf_common>
 8006d84:	3001      	adds	r0, #1
 8006d86:	d14d      	bne.n	8006e24 <_printf_i+0x1c8>
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	b005      	add	sp, #20
 8006d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d92:	4839      	ldr	r0, [pc, #228]	; (8006e78 <_printf_i+0x21c>)
 8006d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d98:	6813      	ldr	r3, [r2, #0]
 8006d9a:	6821      	ldr	r1, [r4, #0]
 8006d9c:	1d1d      	adds	r5, r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6015      	str	r5, [r2, #0]
 8006da2:	060a      	lsls	r2, r1, #24
 8006da4:	d50b      	bpl.n	8006dbe <_printf_i+0x162>
 8006da6:	07ca      	lsls	r2, r1, #31
 8006da8:	bf44      	itt	mi
 8006daa:	f041 0120 	orrmi.w	r1, r1, #32
 8006dae:	6021      	strmi	r1, [r4, #0]
 8006db0:	b91b      	cbnz	r3, 8006dba <_printf_i+0x15e>
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	f022 0220 	bic.w	r2, r2, #32
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	e7b7      	b.n	8006d2e <_printf_i+0xd2>
 8006dbe:	064d      	lsls	r5, r1, #25
 8006dc0:	bf48      	it	mi
 8006dc2:	b29b      	uxthmi	r3, r3
 8006dc4:	e7ef      	b.n	8006da6 <_printf_i+0x14a>
 8006dc6:	4665      	mov	r5, ip
 8006dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8006dd0:	5cc3      	ldrb	r3, [r0, r3]
 8006dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	d1f5      	bne.n	8006dc8 <_printf_i+0x16c>
 8006ddc:	e7b9      	b.n	8006d52 <_printf_i+0xf6>
 8006dde:	6813      	ldr	r3, [r2, #0]
 8006de0:	6825      	ldr	r5, [r4, #0]
 8006de2:	6961      	ldr	r1, [r4, #20]
 8006de4:	1d18      	adds	r0, r3, #4
 8006de6:	6010      	str	r0, [r2, #0]
 8006de8:	0628      	lsls	r0, r5, #24
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	d501      	bpl.n	8006df2 <_printf_i+0x196>
 8006dee:	6019      	str	r1, [r3, #0]
 8006df0:	e002      	b.n	8006df8 <_printf_i+0x19c>
 8006df2:	066a      	lsls	r2, r5, #25
 8006df4:	d5fb      	bpl.n	8006dee <_printf_i+0x192>
 8006df6:	8019      	strh	r1, [r3, #0]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	4665      	mov	r5, ip
 8006dfe:	e7b9      	b.n	8006d74 <_printf_i+0x118>
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	1d19      	adds	r1, r3, #4
 8006e04:	6011      	str	r1, [r2, #0]
 8006e06:	681d      	ldr	r5, [r3, #0]
 8006e08:	6862      	ldr	r2, [r4, #4]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f7f9 fa07 	bl	8000220 <memchr>
 8006e12:	b108      	cbz	r0, 8006e18 <_printf_i+0x1bc>
 8006e14:	1b40      	subs	r0, r0, r5
 8006e16:	6060      	str	r0, [r4, #4]
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	6123      	str	r3, [r4, #16]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e22:	e7a7      	b.n	8006d74 <_printf_i+0x118>
 8006e24:	6923      	ldr	r3, [r4, #16]
 8006e26:	462a      	mov	r2, r5
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	47c0      	blx	r8
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d0aa      	beq.n	8006d88 <_printf_i+0x12c>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	079b      	lsls	r3, r3, #30
 8006e36:	d413      	bmi.n	8006e60 <_printf_i+0x204>
 8006e38:	68e0      	ldr	r0, [r4, #12]
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	4298      	cmp	r0, r3
 8006e3e:	bfb8      	it	lt
 8006e40:	4618      	movlt	r0, r3
 8006e42:	e7a3      	b.n	8006d8c <_printf_i+0x130>
 8006e44:	2301      	movs	r3, #1
 8006e46:	464a      	mov	r2, r9
 8006e48:	4639      	mov	r1, r7
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d09a      	beq.n	8006d88 <_printf_i+0x12c>
 8006e52:	3501      	adds	r5, #1
 8006e54:	68e3      	ldr	r3, [r4, #12]
 8006e56:	9a03      	ldr	r2, [sp, #12]
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	42ab      	cmp	r3, r5
 8006e5c:	dcf2      	bgt.n	8006e44 <_printf_i+0x1e8>
 8006e5e:	e7eb      	b.n	8006e38 <_printf_i+0x1dc>
 8006e60:	2500      	movs	r5, #0
 8006e62:	f104 0919 	add.w	r9, r4, #25
 8006e66:	e7f5      	b.n	8006e54 <_printf_i+0x1f8>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1ac      	bne.n	8006dc6 <_printf_i+0x16a>
 8006e6c:	7803      	ldrb	r3, [r0, #0]
 8006e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e76:	e76c      	b.n	8006d52 <_printf_i+0xf6>
 8006e78:	08008eda 	.word	0x08008eda
 8006e7c:	08008eeb 	.word	0x08008eeb

08006e80 <iprintf>:
 8006e80:	b40f      	push	{r0, r1, r2, r3}
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <iprintf+0x2c>)
 8006e84:	b513      	push	{r0, r1, r4, lr}
 8006e86:	681c      	ldr	r4, [r3, #0]
 8006e88:	b124      	cbz	r4, 8006e94 <iprintf+0x14>
 8006e8a:	69a3      	ldr	r3, [r4, #24]
 8006e8c:	b913      	cbnz	r3, 8006e94 <iprintf+0x14>
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f001 f876 	bl	8007f80 <__sinit>
 8006e94:	ab05      	add	r3, sp, #20
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	68a1      	ldr	r1, [r4, #8]
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f001 fc8b 	bl	80087b8 <_vfiprintf_r>
 8006ea2:	b002      	add	sp, #8
 8006ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea8:	b004      	add	sp, #16
 8006eaa:	4770      	bx	lr
 8006eac:	2000002c 	.word	0x2000002c

08006eb0 <_puts_r>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	460e      	mov	r6, r1
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	b118      	cbz	r0, 8006ec0 <_puts_r+0x10>
 8006eb8:	6983      	ldr	r3, [r0, #24]
 8006eba:	b90b      	cbnz	r3, 8006ec0 <_puts_r+0x10>
 8006ebc:	f001 f860 	bl	8007f80 <__sinit>
 8006ec0:	69ab      	ldr	r3, [r5, #24]
 8006ec2:	68ac      	ldr	r4, [r5, #8]
 8006ec4:	b913      	cbnz	r3, 8006ecc <_puts_r+0x1c>
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f001 f85a 	bl	8007f80 <__sinit>
 8006ecc:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <_puts_r+0xac>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d117      	bne.n	8006f02 <_puts_r+0x52>
 8006ed2:	686c      	ldr	r4, [r5, #4]
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	071b      	lsls	r3, r3, #28
 8006ed8:	d51d      	bpl.n	8006f16 <_puts_r+0x66>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	b1db      	cbz	r3, 8006f16 <_puts_r+0x66>
 8006ede:	3e01      	subs	r6, #1
 8006ee0:	68a3      	ldr	r3, [r4, #8]
 8006ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	60a3      	str	r3, [r4, #8]
 8006eea:	b9e9      	cbnz	r1, 8006f28 <_puts_r+0x78>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	da2e      	bge.n	8006f4e <_puts_r+0x9e>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	210a      	movs	r1, #10
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 f84f 	bl	8006f98 <__swbuf_r>
 8006efa:	3001      	adds	r0, #1
 8006efc:	d011      	beq.n	8006f22 <_puts_r+0x72>
 8006efe:	200a      	movs	r0, #10
 8006f00:	e011      	b.n	8006f26 <_puts_r+0x76>
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <_puts_r+0xb0>)
 8006f04:	429c      	cmp	r4, r3
 8006f06:	d101      	bne.n	8006f0c <_puts_r+0x5c>
 8006f08:	68ac      	ldr	r4, [r5, #8]
 8006f0a:	e7e3      	b.n	8006ed4 <_puts_r+0x24>
 8006f0c:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <_puts_r+0xb4>)
 8006f0e:	429c      	cmp	r4, r3
 8006f10:	bf08      	it	eq
 8006f12:	68ec      	ldreq	r4, [r5, #12]
 8006f14:	e7de      	b.n	8006ed4 <_puts_r+0x24>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f88f 	bl	800703c <__swsetup_r>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0dd      	beq.n	8006ede <_puts_r+0x2e>
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da04      	bge.n	8006f36 <_puts_r+0x86>
 8006f2c:	69a2      	ldr	r2, [r4, #24]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	dc06      	bgt.n	8006f40 <_puts_r+0x90>
 8006f32:	290a      	cmp	r1, #10
 8006f34:	d004      	beq.n	8006f40 <_puts_r+0x90>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	6022      	str	r2, [r4, #0]
 8006f3c:	7019      	strb	r1, [r3, #0]
 8006f3e:	e7cf      	b.n	8006ee0 <_puts_r+0x30>
 8006f40:	4622      	mov	r2, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f828 	bl	8006f98 <__swbuf_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d1c9      	bne.n	8006ee0 <_puts_r+0x30>
 8006f4c:	e7e9      	b.n	8006f22 <_puts_r+0x72>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	200a      	movs	r0, #10
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	7018      	strb	r0, [r3, #0]
 8006f58:	e7e5      	b.n	8006f26 <_puts_r+0x76>
 8006f5a:	bf00      	nop
 8006f5c:	08008f2c 	.word	0x08008f2c
 8006f60:	08008f4c 	.word	0x08008f4c
 8006f64:	08008f0c 	.word	0x08008f0c

08006f68 <puts>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <puts+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f7ff bf9f 	b.w	8006eb0 <_puts_r>
 8006f72:	bf00      	nop
 8006f74:	2000002c 	.word	0x2000002c

08006f78 <_sbrk_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4c06      	ldr	r4, [pc, #24]	; (8006f94 <_sbrk_r+0x1c>)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4605      	mov	r5, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	f7fb f86a 	bl	800205c <_sbrk>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_sbrk_r+0x1a>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_sbrk_r+0x1a>
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	20000e9c 	.word	0x20000e9c

08006f98 <__swbuf_r>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b118      	cbz	r0, 8006faa <__swbuf_r+0x12>
 8006fa2:	6983      	ldr	r3, [r0, #24]
 8006fa4:	b90b      	cbnz	r3, 8006faa <__swbuf_r+0x12>
 8006fa6:	f000 ffeb 	bl	8007f80 <__sinit>
 8006faa:	4b21      	ldr	r3, [pc, #132]	; (8007030 <__swbuf_r+0x98>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d12a      	bne.n	8007006 <__swbuf_r+0x6e>
 8006fb0:	686c      	ldr	r4, [r5, #4]
 8006fb2:	69a3      	ldr	r3, [r4, #24]
 8006fb4:	60a3      	str	r3, [r4, #8]
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	071a      	lsls	r2, r3, #28
 8006fba:	d52e      	bpl.n	800701a <__swbuf_r+0x82>
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	b363      	cbz	r3, 800701a <__swbuf_r+0x82>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	1ac0      	subs	r0, r0, r3
 8006fc6:	6963      	ldr	r3, [r4, #20]
 8006fc8:	b2f6      	uxtb	r6, r6
 8006fca:	4283      	cmp	r3, r0
 8006fcc:	4637      	mov	r7, r6
 8006fce:	dc04      	bgt.n	8006fda <__swbuf_r+0x42>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 ff6a 	bl	8007eac <_fflush_r>
 8006fd8:	bb28      	cbnz	r0, 8007026 <__swbuf_r+0x8e>
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	6022      	str	r2, [r4, #0]
 8006fe6:	701e      	strb	r6, [r3, #0]
 8006fe8:	6963      	ldr	r3, [r4, #20]
 8006fea:	3001      	adds	r0, #1
 8006fec:	4283      	cmp	r3, r0
 8006fee:	d004      	beq.n	8006ffa <__swbuf_r+0x62>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	07db      	lsls	r3, r3, #31
 8006ff4:	d519      	bpl.n	800702a <__swbuf_r+0x92>
 8006ff6:	2e0a      	cmp	r6, #10
 8006ff8:	d117      	bne.n	800702a <__swbuf_r+0x92>
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 ff55 	bl	8007eac <_fflush_r>
 8007002:	b190      	cbz	r0, 800702a <__swbuf_r+0x92>
 8007004:	e00f      	b.n	8007026 <__swbuf_r+0x8e>
 8007006:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <__swbuf_r+0x9c>)
 8007008:	429c      	cmp	r4, r3
 800700a:	d101      	bne.n	8007010 <__swbuf_r+0x78>
 800700c:	68ac      	ldr	r4, [r5, #8]
 800700e:	e7d0      	b.n	8006fb2 <__swbuf_r+0x1a>
 8007010:	4b09      	ldr	r3, [pc, #36]	; (8007038 <__swbuf_r+0xa0>)
 8007012:	429c      	cmp	r4, r3
 8007014:	bf08      	it	eq
 8007016:	68ec      	ldreq	r4, [r5, #12]
 8007018:	e7cb      	b.n	8006fb2 <__swbuf_r+0x1a>
 800701a:	4621      	mov	r1, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f000 f80d 	bl	800703c <__swsetup_r>
 8007022:	2800      	cmp	r0, #0
 8007024:	d0cc      	beq.n	8006fc0 <__swbuf_r+0x28>
 8007026:	f04f 37ff 	mov.w	r7, #4294967295
 800702a:	4638      	mov	r0, r7
 800702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702e:	bf00      	nop
 8007030:	08008f2c 	.word	0x08008f2c
 8007034:	08008f4c 	.word	0x08008f4c
 8007038:	08008f0c 	.word	0x08008f0c

0800703c <__swsetup_r>:
 800703c:	4b32      	ldr	r3, [pc, #200]	; (8007108 <__swsetup_r+0xcc>)
 800703e:	b570      	push	{r4, r5, r6, lr}
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	4606      	mov	r6, r0
 8007044:	460c      	mov	r4, r1
 8007046:	b125      	cbz	r5, 8007052 <__swsetup_r+0x16>
 8007048:	69ab      	ldr	r3, [r5, #24]
 800704a:	b913      	cbnz	r3, 8007052 <__swsetup_r+0x16>
 800704c:	4628      	mov	r0, r5
 800704e:	f000 ff97 	bl	8007f80 <__sinit>
 8007052:	4b2e      	ldr	r3, [pc, #184]	; (800710c <__swsetup_r+0xd0>)
 8007054:	429c      	cmp	r4, r3
 8007056:	d10f      	bne.n	8007078 <__swsetup_r+0x3c>
 8007058:	686c      	ldr	r4, [r5, #4]
 800705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705e:	b29a      	uxth	r2, r3
 8007060:	0715      	lsls	r5, r2, #28
 8007062:	d42c      	bmi.n	80070be <__swsetup_r+0x82>
 8007064:	06d0      	lsls	r0, r2, #27
 8007066:	d411      	bmi.n	800708c <__swsetup_r+0x50>
 8007068:	2209      	movs	r2, #9
 800706a:	6032      	str	r2, [r6, #0]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	e03e      	b.n	80070f6 <__swsetup_r+0xba>
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <__swsetup_r+0xd4>)
 800707a:	429c      	cmp	r4, r3
 800707c:	d101      	bne.n	8007082 <__swsetup_r+0x46>
 800707e:	68ac      	ldr	r4, [r5, #8]
 8007080:	e7eb      	b.n	800705a <__swsetup_r+0x1e>
 8007082:	4b24      	ldr	r3, [pc, #144]	; (8007114 <__swsetup_r+0xd8>)
 8007084:	429c      	cmp	r4, r3
 8007086:	bf08      	it	eq
 8007088:	68ec      	ldreq	r4, [r5, #12]
 800708a:	e7e6      	b.n	800705a <__swsetup_r+0x1e>
 800708c:	0751      	lsls	r1, r2, #29
 800708e:	d512      	bpl.n	80070b6 <__swsetup_r+0x7a>
 8007090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007092:	b141      	cbz	r1, 80070a6 <__swsetup_r+0x6a>
 8007094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007098:	4299      	cmp	r1, r3
 800709a:	d002      	beq.n	80070a2 <__swsetup_r+0x66>
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff f9eb 	bl	8006478 <_free_r>
 80070a2:	2300      	movs	r3, #0
 80070a4:	6363      	str	r3, [r4, #52]	; 0x34
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	2300      	movs	r3, #0
 80070b0:	6063      	str	r3, [r4, #4]
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f043 0308 	orr.w	r3, r3, #8
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	b94b      	cbnz	r3, 80070d6 <__swsetup_r+0x9a>
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070cc:	d003      	beq.n	80070d6 <__swsetup_r+0x9a>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4630      	mov	r0, r6
 80070d2:	f001 f811 	bl	80080f8 <__smakebuf_r>
 80070d6:	89a2      	ldrh	r2, [r4, #12]
 80070d8:	f012 0301 	ands.w	r3, r2, #1
 80070dc:	d00c      	beq.n	80070f8 <__swsetup_r+0xbc>
 80070de:	2300      	movs	r3, #0
 80070e0:	60a3      	str	r3, [r4, #8]
 80070e2:	6963      	ldr	r3, [r4, #20]
 80070e4:	425b      	negs	r3, r3
 80070e6:	61a3      	str	r3, [r4, #24]
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	b953      	cbnz	r3, 8007102 <__swsetup_r+0xc6>
 80070ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80070f4:	d1ba      	bne.n	800706c <__swsetup_r+0x30>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	0792      	lsls	r2, r2, #30
 80070fa:	bf58      	it	pl
 80070fc:	6963      	ldrpl	r3, [r4, #20]
 80070fe:	60a3      	str	r3, [r4, #8]
 8007100:	e7f2      	b.n	80070e8 <__swsetup_r+0xac>
 8007102:	2000      	movs	r0, #0
 8007104:	e7f7      	b.n	80070f6 <__swsetup_r+0xba>
 8007106:	bf00      	nop
 8007108:	2000002c 	.word	0x2000002c
 800710c:	08008f2c 	.word	0x08008f2c
 8007110:	08008f4c 	.word	0x08008f4c
 8007114:	08008f0c 	.word	0x08008f0c

08007118 <quorem>:
 8007118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	6903      	ldr	r3, [r0, #16]
 800711e:	690c      	ldr	r4, [r1, #16]
 8007120:	42a3      	cmp	r3, r4
 8007122:	4680      	mov	r8, r0
 8007124:	f2c0 8082 	blt.w	800722c <quorem+0x114>
 8007128:	3c01      	subs	r4, #1
 800712a:	f101 0714 	add.w	r7, r1, #20
 800712e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007132:	f100 0614 	add.w	r6, r0, #20
 8007136:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800713a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800713e:	eb06 030c 	add.w	r3, r6, ip
 8007142:	3501      	adds	r5, #1
 8007144:	eb07 090c 	add.w	r9, r7, ip
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	fbb0 f5f5 	udiv	r5, r0, r5
 800714e:	b395      	cbz	r5, 80071b6 <quorem+0x9e>
 8007150:	f04f 0a00 	mov.w	sl, #0
 8007154:	4638      	mov	r0, r7
 8007156:	46b6      	mov	lr, r6
 8007158:	46d3      	mov	fp, sl
 800715a:	f850 2b04 	ldr.w	r2, [r0], #4
 800715e:	b293      	uxth	r3, r2
 8007160:	fb05 a303 	mla	r3, r5, r3, sl
 8007164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007168:	b29b      	uxth	r3, r3
 800716a:	ebab 0303 	sub.w	r3, fp, r3
 800716e:	0c12      	lsrs	r2, r2, #16
 8007170:	f8de b000 	ldr.w	fp, [lr]
 8007174:	fb05 a202 	mla	r2, r5, r2, sl
 8007178:	fa13 f38b 	uxtah	r3, r3, fp
 800717c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007180:	fa1f fb82 	uxth.w	fp, r2
 8007184:	f8de 2000 	ldr.w	r2, [lr]
 8007188:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800718c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007190:	b29b      	uxth	r3, r3
 8007192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007196:	4581      	cmp	r9, r0
 8007198:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800719c:	f84e 3b04 	str.w	r3, [lr], #4
 80071a0:	d2db      	bcs.n	800715a <quorem+0x42>
 80071a2:	f856 300c 	ldr.w	r3, [r6, ip]
 80071a6:	b933      	cbnz	r3, 80071b6 <quorem+0x9e>
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	3b04      	subs	r3, #4
 80071ac:	429e      	cmp	r6, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	d330      	bcc.n	8007214 <quorem+0xfc>
 80071b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80071b6:	4640      	mov	r0, r8
 80071b8:	f001 fa00 	bl	80085bc <__mcmp>
 80071bc:	2800      	cmp	r0, #0
 80071be:	db25      	blt.n	800720c <quorem+0xf4>
 80071c0:	3501      	adds	r5, #1
 80071c2:	4630      	mov	r0, r6
 80071c4:	f04f 0c00 	mov.w	ip, #0
 80071c8:	f857 2b04 	ldr.w	r2, [r7], #4
 80071cc:	f8d0 e000 	ldr.w	lr, [r0]
 80071d0:	b293      	uxth	r3, r2
 80071d2:	ebac 0303 	sub.w	r3, ip, r3
 80071d6:	0c12      	lsrs	r2, r2, #16
 80071d8:	fa13 f38e 	uxtah	r3, r3, lr
 80071dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ea:	45b9      	cmp	r9, r7
 80071ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071f0:	f840 3b04 	str.w	r3, [r0], #4
 80071f4:	d2e8      	bcs.n	80071c8 <quorem+0xb0>
 80071f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80071fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80071fe:	b92a      	cbnz	r2, 800720c <quorem+0xf4>
 8007200:	3b04      	subs	r3, #4
 8007202:	429e      	cmp	r6, r3
 8007204:	461a      	mov	r2, r3
 8007206:	d30b      	bcc.n	8007220 <quorem+0x108>
 8007208:	f8c8 4010 	str.w	r4, [r8, #16]
 800720c:	4628      	mov	r0, r5
 800720e:	b003      	add	sp, #12
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	3b04      	subs	r3, #4
 8007218:	2a00      	cmp	r2, #0
 800721a:	d1ca      	bne.n	80071b2 <quorem+0x9a>
 800721c:	3c01      	subs	r4, #1
 800721e:	e7c5      	b.n	80071ac <quorem+0x94>
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	3b04      	subs	r3, #4
 8007224:	2a00      	cmp	r2, #0
 8007226:	d1ef      	bne.n	8007208 <quorem+0xf0>
 8007228:	3c01      	subs	r4, #1
 800722a:	e7ea      	b.n	8007202 <quorem+0xea>
 800722c:	2000      	movs	r0, #0
 800722e:	e7ee      	b.n	800720e <quorem+0xf6>

08007230 <_dtoa_r>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	ec57 6b10 	vmov	r6, r7, d0
 8007238:	b097      	sub	sp, #92	; 0x5c
 800723a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800723c:	9106      	str	r1, [sp, #24]
 800723e:	4604      	mov	r4, r0
 8007240:	920b      	str	r2, [sp, #44]	; 0x2c
 8007242:	9312      	str	r3, [sp, #72]	; 0x48
 8007244:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007248:	e9cd 6700 	strd	r6, r7, [sp]
 800724c:	b93d      	cbnz	r5, 800725e <_dtoa_r+0x2e>
 800724e:	2010      	movs	r0, #16
 8007250:	f7ff f902 	bl	8006458 <malloc>
 8007254:	6260      	str	r0, [r4, #36]	; 0x24
 8007256:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800725a:	6005      	str	r5, [r0, #0]
 800725c:	60c5      	str	r5, [r0, #12]
 800725e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	b151      	cbz	r1, 800727a <_dtoa_r+0x4a>
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	604a      	str	r2, [r1, #4]
 8007268:	2301      	movs	r3, #1
 800726a:	4093      	lsls	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
 800726e:	4620      	mov	r0, r4
 8007270:	f000 ffc3 	bl	80081fa <_Bfree>
 8007274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	1e3b      	subs	r3, r7, #0
 800727c:	bfbb      	ittet	lt
 800727e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007282:	9301      	strlt	r3, [sp, #4]
 8007284:	2300      	movge	r3, #0
 8007286:	2201      	movlt	r2, #1
 8007288:	bfac      	ite	ge
 800728a:	f8c8 3000 	strge.w	r3, [r8]
 800728e:	f8c8 2000 	strlt.w	r2, [r8]
 8007292:	4baf      	ldr	r3, [pc, #700]	; (8007550 <_dtoa_r+0x320>)
 8007294:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007298:	ea33 0308 	bics.w	r3, r3, r8
 800729c:	d114      	bne.n	80072c8 <_dtoa_r+0x98>
 800729e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	b923      	cbnz	r3, 80072b4 <_dtoa_r+0x84>
 80072aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f000 8542 	beq.w	8007d38 <_dtoa_r+0xb08>
 80072b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007564 <_dtoa_r+0x334>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8544 	beq.w	8007d48 <_dtoa_r+0xb18>
 80072c0:	f10b 0303 	add.w	r3, fp, #3
 80072c4:	f000 bd3e 	b.w	8007d44 <_dtoa_r+0xb14>
 80072c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f9 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 80072d8:	4681      	mov	r9, r0
 80072da:	b168      	cbz	r0, 80072f8 <_dtoa_r+0xc8>
 80072dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072de:	2301      	movs	r3, #1
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8524 	beq.w	8007d32 <_dtoa_r+0xb02>
 80072ea:	4b9a      	ldr	r3, [pc, #616]	; (8007554 <_dtoa_r+0x324>)
 80072ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	f000 bd28 	b.w	8007d48 <_dtoa_r+0xb18>
 80072f8:	aa14      	add	r2, sp, #80	; 0x50
 80072fa:	a915      	add	r1, sp, #84	; 0x54
 80072fc:	ec47 6b10 	vmov	d0, r6, r7
 8007300:	4620      	mov	r0, r4
 8007302:	f001 f9d2 	bl	80086aa <__d2b>
 8007306:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800730a:	9004      	str	r0, [sp, #16]
 800730c:	2d00      	cmp	r5, #0
 800730e:	d07c      	beq.n	800740a <_dtoa_r+0x1da>
 8007310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007314:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007318:	46b2      	mov	sl, r6
 800731a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800731e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007322:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007326:	2200      	movs	r2, #0
 8007328:	4b8b      	ldr	r3, [pc, #556]	; (8007558 <_dtoa_r+0x328>)
 800732a:	4650      	mov	r0, sl
 800732c:	4659      	mov	r1, fp
 800732e:	f7f8 ffcb 	bl	80002c8 <__aeabi_dsub>
 8007332:	a381      	add	r3, pc, #516	; (adr r3, 8007538 <_dtoa_r+0x308>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f7f9 f97e 	bl	8000638 <__aeabi_dmul>
 800733c:	a380      	add	r3, pc, #512	; (adr r3, 8007540 <_dtoa_r+0x310>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ffc3 	bl	80002cc <__adddf3>
 8007346:	4606      	mov	r6, r0
 8007348:	4628      	mov	r0, r5
 800734a:	460f      	mov	r7, r1
 800734c:	f7f9 f90a 	bl	8000564 <__aeabi_i2d>
 8007350:	a37d      	add	r3, pc, #500	; (adr r3, 8007548 <_dtoa_r+0x318>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f9 f96f 	bl	8000638 <__aeabi_dmul>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f8 ffb3 	bl	80002cc <__adddf3>
 8007366:	4606      	mov	r6, r0
 8007368:	460f      	mov	r7, r1
 800736a:	f7f9 fc15 	bl	8000b98 <__aeabi_d2iz>
 800736e:	2200      	movs	r2, #0
 8007370:	4682      	mov	sl, r0
 8007372:	2300      	movs	r3, #0
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800737c:	b148      	cbz	r0, 8007392 <_dtoa_r+0x162>
 800737e:	4650      	mov	r0, sl
 8007380:	f7f9 f8f0 	bl	8000564 <__aeabi_i2d>
 8007384:	4632      	mov	r2, r6
 8007386:	463b      	mov	r3, r7
 8007388:	f7f9 fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800738c:	b908      	cbnz	r0, 8007392 <_dtoa_r+0x162>
 800738e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007392:	f1ba 0f16 	cmp.w	sl, #22
 8007396:	d859      	bhi.n	800744c <_dtoa_r+0x21c>
 8007398:	4970      	ldr	r1, [pc, #448]	; (800755c <_dtoa_r+0x32c>)
 800739a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800739e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a6:	f7f9 fbd7 	bl	8000b58 <__aeabi_dcmpgt>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d050      	beq.n	8007450 <_dtoa_r+0x220>
 80073ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073b2:	2300      	movs	r3, #0
 80073b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073b8:	1b5d      	subs	r5, r3, r5
 80073ba:	f1b5 0801 	subs.w	r8, r5, #1
 80073be:	bf49      	itett	mi
 80073c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80073c4:	2300      	movpl	r3, #0
 80073c6:	9305      	strmi	r3, [sp, #20]
 80073c8:	f04f 0800 	movmi.w	r8, #0
 80073cc:	bf58      	it	pl
 80073ce:	9305      	strpl	r3, [sp, #20]
 80073d0:	f1ba 0f00 	cmp.w	sl, #0
 80073d4:	db3e      	blt.n	8007454 <_dtoa_r+0x224>
 80073d6:	2300      	movs	r3, #0
 80073d8:	44d0      	add	r8, sl
 80073da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80073de:	9307      	str	r3, [sp, #28]
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	f200 8090 	bhi.w	8007508 <_dtoa_r+0x2d8>
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	bfc4      	itt	gt
 80073ec:	3b04      	subgt	r3, #4
 80073ee:	9306      	strgt	r3, [sp, #24]
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	f1a3 0302 	sub.w	r3, r3, #2
 80073f6:	bfcc      	ite	gt
 80073f8:	2500      	movgt	r5, #0
 80073fa:	2501      	movle	r5, #1
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	f200 808f 	bhi.w	8007520 <_dtoa_r+0x2f0>
 8007402:	e8df f003 	tbb	[pc, r3]
 8007406:	7f7d      	.short	0x7f7d
 8007408:	7131      	.short	0x7131
 800740a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800740e:	441d      	add	r5, r3
 8007410:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007414:	2820      	cmp	r0, #32
 8007416:	dd13      	ble.n	8007440 <_dtoa_r+0x210>
 8007418:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800741c:	9b00      	ldr	r3, [sp, #0]
 800741e:	fa08 f800 	lsl.w	r8, r8, r0
 8007422:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007426:	fa23 f000 	lsr.w	r0, r3, r0
 800742a:	ea48 0000 	orr.w	r0, r8, r0
 800742e:	f7f9 f889 	bl	8000544 <__aeabi_ui2d>
 8007432:	2301      	movs	r3, #1
 8007434:	4682      	mov	sl, r0
 8007436:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800743a:	3d01      	subs	r5, #1
 800743c:	9313      	str	r3, [sp, #76]	; 0x4c
 800743e:	e772      	b.n	8007326 <_dtoa_r+0xf6>
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	f1c0 0020 	rsb	r0, r0, #32
 8007446:	fa03 f000 	lsl.w	r0, r3, r0
 800744a:	e7f0      	b.n	800742e <_dtoa_r+0x1fe>
 800744c:	2301      	movs	r3, #1
 800744e:	e7b1      	b.n	80073b4 <_dtoa_r+0x184>
 8007450:	900f      	str	r0, [sp, #60]	; 0x3c
 8007452:	e7b0      	b.n	80073b6 <_dtoa_r+0x186>
 8007454:	9b05      	ldr	r3, [sp, #20]
 8007456:	eba3 030a 	sub.w	r3, r3, sl
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	f1ca 0300 	rsb	r3, sl, #0
 8007460:	9307      	str	r3, [sp, #28]
 8007462:	2300      	movs	r3, #0
 8007464:	930e      	str	r3, [sp, #56]	; 0x38
 8007466:	e7bb      	b.n	80073e0 <_dtoa_r+0x1b0>
 8007468:	2301      	movs	r3, #1
 800746a:	930a      	str	r3, [sp, #40]	; 0x28
 800746c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746e:	2b00      	cmp	r3, #0
 8007470:	dd59      	ble.n	8007526 <_dtoa_r+0x2f6>
 8007472:	9302      	str	r3, [sp, #8]
 8007474:	4699      	mov	r9, r3
 8007476:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007478:	2200      	movs	r2, #0
 800747a:	6072      	str	r2, [r6, #4]
 800747c:	2204      	movs	r2, #4
 800747e:	f102 0014 	add.w	r0, r2, #20
 8007482:	4298      	cmp	r0, r3
 8007484:	6871      	ldr	r1, [r6, #4]
 8007486:	d953      	bls.n	8007530 <_dtoa_r+0x300>
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fe82 	bl	8008192 <_Balloc>
 800748e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007490:	6030      	str	r0, [r6, #0]
 8007492:	f1b9 0f0e 	cmp.w	r9, #14
 8007496:	f8d3 b000 	ldr.w	fp, [r3]
 800749a:	f200 80e6 	bhi.w	800766a <_dtoa_r+0x43a>
 800749e:	2d00      	cmp	r5, #0
 80074a0:	f000 80e3 	beq.w	800766a <_dtoa_r+0x43a>
 80074a4:	ed9d 7b00 	vldr	d7, [sp]
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80074b0:	dd74      	ble.n	800759c <_dtoa_r+0x36c>
 80074b2:	4a2a      	ldr	r2, [pc, #168]	; (800755c <_dtoa_r+0x32c>)
 80074b4:	f00a 030f 	and.w	r3, sl, #15
 80074b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074bc:	ed93 7b00 	vldr	d7, [r3]
 80074c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80074c4:	06f0      	lsls	r0, r6, #27
 80074c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074ca:	d565      	bpl.n	8007598 <_dtoa_r+0x368>
 80074cc:	4b24      	ldr	r3, [pc, #144]	; (8007560 <_dtoa_r+0x330>)
 80074ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074d6:	f7f9 f9d9 	bl	800088c <__aeabi_ddiv>
 80074da:	e9cd 0100 	strd	r0, r1, [sp]
 80074de:	f006 060f 	and.w	r6, r6, #15
 80074e2:	2503      	movs	r5, #3
 80074e4:	4f1e      	ldr	r7, [pc, #120]	; (8007560 <_dtoa_r+0x330>)
 80074e6:	e04c      	b.n	8007582 <_dtoa_r+0x352>
 80074e8:	2301      	movs	r3, #1
 80074ea:	930a      	str	r3, [sp, #40]	; 0x28
 80074ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ee:	4453      	add	r3, sl
 80074f0:	f103 0901 	add.w	r9, r3, #1
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	464b      	mov	r3, r9
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	bfb8      	it	lt
 80074fc:	2301      	movlt	r3, #1
 80074fe:	e7ba      	b.n	8007476 <_dtoa_r+0x246>
 8007500:	2300      	movs	r3, #0
 8007502:	e7b2      	b.n	800746a <_dtoa_r+0x23a>
 8007504:	2300      	movs	r3, #0
 8007506:	e7f0      	b.n	80074ea <_dtoa_r+0x2ba>
 8007508:	2501      	movs	r5, #1
 800750a:	2300      	movs	r3, #0
 800750c:	9306      	str	r3, [sp, #24]
 800750e:	950a      	str	r5, [sp, #40]	; 0x28
 8007510:	f04f 33ff 	mov.w	r3, #4294967295
 8007514:	9302      	str	r3, [sp, #8]
 8007516:	4699      	mov	r9, r3
 8007518:	2200      	movs	r2, #0
 800751a:	2312      	movs	r3, #18
 800751c:	920b      	str	r2, [sp, #44]	; 0x2c
 800751e:	e7aa      	b.n	8007476 <_dtoa_r+0x246>
 8007520:	2301      	movs	r3, #1
 8007522:	930a      	str	r3, [sp, #40]	; 0x28
 8007524:	e7f4      	b.n	8007510 <_dtoa_r+0x2e0>
 8007526:	2301      	movs	r3, #1
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	4699      	mov	r9, r3
 800752c:	461a      	mov	r2, r3
 800752e:	e7f5      	b.n	800751c <_dtoa_r+0x2ec>
 8007530:	3101      	adds	r1, #1
 8007532:	6071      	str	r1, [r6, #4]
 8007534:	0052      	lsls	r2, r2, #1
 8007536:	e7a2      	b.n	800747e <_dtoa_r+0x24e>
 8007538:	636f4361 	.word	0x636f4361
 800753c:	3fd287a7 	.word	0x3fd287a7
 8007540:	8b60c8b3 	.word	0x8b60c8b3
 8007544:	3fc68a28 	.word	0x3fc68a28
 8007548:	509f79fb 	.word	0x509f79fb
 800754c:	3fd34413 	.word	0x3fd34413
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	08008ed9 	.word	0x08008ed9
 8007558:	3ff80000 	.word	0x3ff80000
 800755c:	08008f98 	.word	0x08008f98
 8007560:	08008f70 	.word	0x08008f70
 8007564:	08008f05 	.word	0x08008f05
 8007568:	07f1      	lsls	r1, r6, #31
 800756a:	d508      	bpl.n	800757e <_dtoa_r+0x34e>
 800756c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	f7f9 f860 	bl	8000638 <__aeabi_dmul>
 8007578:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800757c:	3501      	adds	r5, #1
 800757e:	1076      	asrs	r6, r6, #1
 8007580:	3708      	adds	r7, #8
 8007582:	2e00      	cmp	r6, #0
 8007584:	d1f0      	bne.n	8007568 <_dtoa_r+0x338>
 8007586:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800758a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800758e:	f7f9 f97d 	bl	800088c <__aeabi_ddiv>
 8007592:	e9cd 0100 	strd	r0, r1, [sp]
 8007596:	e01a      	b.n	80075ce <_dtoa_r+0x39e>
 8007598:	2502      	movs	r5, #2
 800759a:	e7a3      	b.n	80074e4 <_dtoa_r+0x2b4>
 800759c:	f000 80a0 	beq.w	80076e0 <_dtoa_r+0x4b0>
 80075a0:	f1ca 0600 	rsb	r6, sl, #0
 80075a4:	4b9f      	ldr	r3, [pc, #636]	; (8007824 <_dtoa_r+0x5f4>)
 80075a6:	4fa0      	ldr	r7, [pc, #640]	; (8007828 <_dtoa_r+0x5f8>)
 80075a8:	f006 020f 	and.w	r2, r6, #15
 80075ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075b8:	f7f9 f83e 	bl	8000638 <__aeabi_dmul>
 80075bc:	e9cd 0100 	strd	r0, r1, [sp]
 80075c0:	1136      	asrs	r6, r6, #4
 80075c2:	2300      	movs	r3, #0
 80075c4:	2502      	movs	r5, #2
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	d17f      	bne.n	80076ca <_dtoa_r+0x49a>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e1      	bne.n	8007592 <_dtoa_r+0x362>
 80075ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8087 	beq.w	80076e4 <_dtoa_r+0x4b4>
 80075d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075da:	2200      	movs	r2, #0
 80075dc:	4b93      	ldr	r3, [pc, #588]	; (800782c <_dtoa_r+0x5fc>)
 80075de:	4630      	mov	r0, r6
 80075e0:	4639      	mov	r1, r7
 80075e2:	f7f9 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d07c      	beq.n	80076e4 <_dtoa_r+0x4b4>
 80075ea:	f1b9 0f00 	cmp.w	r9, #0
 80075ee:	d079      	beq.n	80076e4 <_dtoa_r+0x4b4>
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dd35      	ble.n	8007662 <_dtoa_r+0x432>
 80075f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075fa:	9308      	str	r3, [sp, #32]
 80075fc:	4639      	mov	r1, r7
 80075fe:	2200      	movs	r2, #0
 8007600:	4b8b      	ldr	r3, [pc, #556]	; (8007830 <_dtoa_r+0x600>)
 8007602:	4630      	mov	r0, r6
 8007604:	f7f9 f818 	bl	8000638 <__aeabi_dmul>
 8007608:	e9cd 0100 	strd	r0, r1, [sp]
 800760c:	9f02      	ldr	r7, [sp, #8]
 800760e:	3501      	adds	r5, #1
 8007610:	4628      	mov	r0, r5
 8007612:	f7f8 ffa7 	bl	8000564 <__aeabi_i2d>
 8007616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800761a:	f7f9 f80d 	bl	8000638 <__aeabi_dmul>
 800761e:	2200      	movs	r2, #0
 8007620:	4b84      	ldr	r3, [pc, #528]	; (8007834 <_dtoa_r+0x604>)
 8007622:	f7f8 fe53 	bl	80002cc <__adddf3>
 8007626:	4605      	mov	r5, r0
 8007628:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800762c:	2f00      	cmp	r7, #0
 800762e:	d15d      	bne.n	80076ec <_dtoa_r+0x4bc>
 8007630:	2200      	movs	r2, #0
 8007632:	4b81      	ldr	r3, [pc, #516]	; (8007838 <_dtoa_r+0x608>)
 8007634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007638:	f7f8 fe46 	bl	80002c8 <__aeabi_dsub>
 800763c:	462a      	mov	r2, r5
 800763e:	4633      	mov	r3, r6
 8007640:	e9cd 0100 	strd	r0, r1, [sp]
 8007644:	f7f9 fa88 	bl	8000b58 <__aeabi_dcmpgt>
 8007648:	2800      	cmp	r0, #0
 800764a:	f040 8288 	bne.w	8007b5e <_dtoa_r+0x92e>
 800764e:	462a      	mov	r2, r5
 8007650:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007658:	f7f9 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800765c:	2800      	cmp	r0, #0
 800765e:	f040 827c 	bne.w	8007b5a <_dtoa_r+0x92a>
 8007662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007666:	e9cd 2300 	strd	r2, r3, [sp]
 800766a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800766c:	2b00      	cmp	r3, #0
 800766e:	f2c0 8150 	blt.w	8007912 <_dtoa_r+0x6e2>
 8007672:	f1ba 0f0e 	cmp.w	sl, #14
 8007676:	f300 814c 	bgt.w	8007912 <_dtoa_r+0x6e2>
 800767a:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <_dtoa_r+0x5f4>)
 800767c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007680:	ed93 7b00 	vldr	d7, [r3]
 8007684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800768c:	f280 80d8 	bge.w	8007840 <_dtoa_r+0x610>
 8007690:	f1b9 0f00 	cmp.w	r9, #0
 8007694:	f300 80d4 	bgt.w	8007840 <_dtoa_r+0x610>
 8007698:	f040 825e 	bne.w	8007b58 <_dtoa_r+0x928>
 800769c:	2200      	movs	r2, #0
 800769e:	4b66      	ldr	r3, [pc, #408]	; (8007838 <_dtoa_r+0x608>)
 80076a0:	ec51 0b17 	vmov	r0, r1, d7
 80076a4:	f7f8 ffc8 	bl	8000638 <__aeabi_dmul>
 80076a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ac:	f7f9 fa4a 	bl	8000b44 <__aeabi_dcmpge>
 80076b0:	464f      	mov	r7, r9
 80076b2:	464e      	mov	r6, r9
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 8234 	bne.w	8007b22 <_dtoa_r+0x8f2>
 80076ba:	2331      	movs	r3, #49	; 0x31
 80076bc:	f10b 0501 	add.w	r5, fp, #1
 80076c0:	f88b 3000 	strb.w	r3, [fp]
 80076c4:	f10a 0a01 	add.w	sl, sl, #1
 80076c8:	e22f      	b.n	8007b2a <_dtoa_r+0x8fa>
 80076ca:	07f2      	lsls	r2, r6, #31
 80076cc:	d505      	bpl.n	80076da <_dtoa_r+0x4aa>
 80076ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d2:	f7f8 ffb1 	bl	8000638 <__aeabi_dmul>
 80076d6:	3501      	adds	r5, #1
 80076d8:	2301      	movs	r3, #1
 80076da:	1076      	asrs	r6, r6, #1
 80076dc:	3708      	adds	r7, #8
 80076de:	e772      	b.n	80075c6 <_dtoa_r+0x396>
 80076e0:	2502      	movs	r5, #2
 80076e2:	e774      	b.n	80075ce <_dtoa_r+0x39e>
 80076e4:	f8cd a020 	str.w	sl, [sp, #32]
 80076e8:	464f      	mov	r7, r9
 80076ea:	e791      	b.n	8007610 <_dtoa_r+0x3e0>
 80076ec:	4b4d      	ldr	r3, [pc, #308]	; (8007824 <_dtoa_r+0x5f4>)
 80076ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80076f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d047      	beq.n	800778c <_dtoa_r+0x55c>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	2000      	movs	r0, #0
 8007702:	494e      	ldr	r1, [pc, #312]	; (800783c <_dtoa_r+0x60c>)
 8007704:	f7f9 f8c2 	bl	800088c <__aeabi_ddiv>
 8007708:	462a      	mov	r2, r5
 800770a:	4633      	mov	r3, r6
 800770c:	f7f8 fddc 	bl	80002c8 <__aeabi_dsub>
 8007710:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007714:	465d      	mov	r5, fp
 8007716:	e9dd 0100 	ldrd	r0, r1, [sp]
 800771a:	f7f9 fa3d 	bl	8000b98 <__aeabi_d2iz>
 800771e:	4606      	mov	r6, r0
 8007720:	f7f8 ff20 	bl	8000564 <__aeabi_i2d>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800772c:	f7f8 fdcc 	bl	80002c8 <__aeabi_dsub>
 8007730:	3630      	adds	r6, #48	; 0x30
 8007732:	f805 6b01 	strb.w	r6, [r5], #1
 8007736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800773a:	e9cd 0100 	strd	r0, r1, [sp]
 800773e:	f7f9 f9ed 	bl	8000b1c <__aeabi_dcmplt>
 8007742:	2800      	cmp	r0, #0
 8007744:	d163      	bne.n	800780e <_dtoa_r+0x5de>
 8007746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774a:	2000      	movs	r0, #0
 800774c:	4937      	ldr	r1, [pc, #220]	; (800782c <_dtoa_r+0x5fc>)
 800774e:	f7f8 fdbb 	bl	80002c8 <__aeabi_dsub>
 8007752:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007756:	f7f9 f9e1 	bl	8000b1c <__aeabi_dcmplt>
 800775a:	2800      	cmp	r0, #0
 800775c:	f040 80b7 	bne.w	80078ce <_dtoa_r+0x69e>
 8007760:	eba5 030b 	sub.w	r3, r5, fp
 8007764:	429f      	cmp	r7, r3
 8007766:	f77f af7c 	ble.w	8007662 <_dtoa_r+0x432>
 800776a:	2200      	movs	r2, #0
 800776c:	4b30      	ldr	r3, [pc, #192]	; (8007830 <_dtoa_r+0x600>)
 800776e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007772:	f7f8 ff61 	bl	8000638 <__aeabi_dmul>
 8007776:	2200      	movs	r2, #0
 8007778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800777c:	4b2c      	ldr	r3, [pc, #176]	; (8007830 <_dtoa_r+0x600>)
 800777e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007782:	f7f8 ff59 	bl	8000638 <__aeabi_dmul>
 8007786:	e9cd 0100 	strd	r0, r1, [sp]
 800778a:	e7c4      	b.n	8007716 <_dtoa_r+0x4e6>
 800778c:	462a      	mov	r2, r5
 800778e:	4633      	mov	r3, r6
 8007790:	f7f8 ff52 	bl	8000638 <__aeabi_dmul>
 8007794:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007798:	eb0b 0507 	add.w	r5, fp, r7
 800779c:	465e      	mov	r6, fp
 800779e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a2:	f7f9 f9f9 	bl	8000b98 <__aeabi_d2iz>
 80077a6:	4607      	mov	r7, r0
 80077a8:	f7f8 fedc 	bl	8000564 <__aeabi_i2d>
 80077ac:	3730      	adds	r7, #48	; 0x30
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b6:	f7f8 fd87 	bl	80002c8 <__aeabi_dsub>
 80077ba:	f806 7b01 	strb.w	r7, [r6], #1
 80077be:	42ae      	cmp	r6, r5
 80077c0:	e9cd 0100 	strd	r0, r1, [sp]
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	d126      	bne.n	8007818 <_dtoa_r+0x5e8>
 80077ca:	4b1c      	ldr	r3, [pc, #112]	; (800783c <_dtoa_r+0x60c>)
 80077cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077d0:	f7f8 fd7c 	bl	80002cc <__adddf3>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077dc:	f7f9 f9bc 	bl	8000b58 <__aeabi_dcmpgt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d174      	bne.n	80078ce <_dtoa_r+0x69e>
 80077e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077e8:	2000      	movs	r0, #0
 80077ea:	4914      	ldr	r1, [pc, #80]	; (800783c <_dtoa_r+0x60c>)
 80077ec:	f7f8 fd6c 	bl	80002c8 <__aeabi_dsub>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077f8:	f7f9 f990 	bl	8000b1c <__aeabi_dcmplt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f43f af30 	beq.w	8007662 <_dtoa_r+0x432>
 8007802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007806:	2b30      	cmp	r3, #48	; 0x30
 8007808:	f105 32ff 	add.w	r2, r5, #4294967295
 800780c:	d002      	beq.n	8007814 <_dtoa_r+0x5e4>
 800780e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007812:	e04a      	b.n	80078aa <_dtoa_r+0x67a>
 8007814:	4615      	mov	r5, r2
 8007816:	e7f4      	b.n	8007802 <_dtoa_r+0x5d2>
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <_dtoa_r+0x600>)
 800781a:	f7f8 ff0d 	bl	8000638 <__aeabi_dmul>
 800781e:	e9cd 0100 	strd	r0, r1, [sp]
 8007822:	e7bc      	b.n	800779e <_dtoa_r+0x56e>
 8007824:	08008f98 	.word	0x08008f98
 8007828:	08008f70 	.word	0x08008f70
 800782c:	3ff00000 	.word	0x3ff00000
 8007830:	40240000 	.word	0x40240000
 8007834:	401c0000 	.word	0x401c0000
 8007838:	40140000 	.word	0x40140000
 800783c:	3fe00000 	.word	0x3fe00000
 8007840:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007844:	465d      	mov	r5, fp
 8007846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800784a:	4630      	mov	r0, r6
 800784c:	4639      	mov	r1, r7
 800784e:	f7f9 f81d 	bl	800088c <__aeabi_ddiv>
 8007852:	f7f9 f9a1 	bl	8000b98 <__aeabi_d2iz>
 8007856:	4680      	mov	r8, r0
 8007858:	f7f8 fe84 	bl	8000564 <__aeabi_i2d>
 800785c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007860:	f7f8 feea 	bl	8000638 <__aeabi_dmul>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007870:	f7f8 fd2a 	bl	80002c8 <__aeabi_dsub>
 8007874:	f805 6b01 	strb.w	r6, [r5], #1
 8007878:	eba5 060b 	sub.w	r6, r5, fp
 800787c:	45b1      	cmp	r9, r6
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	d139      	bne.n	80078f8 <_dtoa_r+0x6c8>
 8007884:	f7f8 fd22 	bl	80002cc <__adddf3>
 8007888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	f7f9 f962 	bl	8000b58 <__aeabi_dcmpgt>
 8007894:	b9c8      	cbnz	r0, 80078ca <_dtoa_r+0x69a>
 8007896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f9 f933 	bl	8000b08 <__aeabi_dcmpeq>
 80078a2:	b110      	cbz	r0, 80078aa <_dtoa_r+0x67a>
 80078a4:	f018 0f01 	tst.w	r8, #1
 80078a8:	d10f      	bne.n	80078ca <_dtoa_r+0x69a>
 80078aa:	9904      	ldr	r1, [sp, #16]
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fca4 	bl	80081fa <_Bfree>
 80078b2:	2300      	movs	r3, #0
 80078b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078b6:	702b      	strb	r3, [r5, #0]
 80078b8:	f10a 0301 	add.w	r3, sl, #1
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8241 	beq.w	8007d48 <_dtoa_r+0xb18>
 80078c6:	601d      	str	r5, [r3, #0]
 80078c8:	e23e      	b.n	8007d48 <_dtoa_r+0xb18>
 80078ca:	f8cd a020 	str.w	sl, [sp, #32]
 80078ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078d2:	2a39      	cmp	r2, #57	; 0x39
 80078d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80078d8:	d108      	bne.n	80078ec <_dtoa_r+0x6bc>
 80078da:	459b      	cmp	fp, r3
 80078dc:	d10a      	bne.n	80078f4 <_dtoa_r+0x6c4>
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	3301      	adds	r3, #1
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	2330      	movs	r3, #48	; 0x30
 80078e6:	f88b 3000 	strb.w	r3, [fp]
 80078ea:	465b      	mov	r3, fp
 80078ec:	781a      	ldrb	r2, [r3, #0]
 80078ee:	3201      	adds	r2, #1
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	e78c      	b.n	800780e <_dtoa_r+0x5de>
 80078f4:	461d      	mov	r5, r3
 80078f6:	e7ea      	b.n	80078ce <_dtoa_r+0x69e>
 80078f8:	2200      	movs	r2, #0
 80078fa:	4b9b      	ldr	r3, [pc, #620]	; (8007b68 <_dtoa_r+0x938>)
 80078fc:	f7f8 fe9c 	bl	8000638 <__aeabi_dmul>
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	f7f9 f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800790c:	2800      	cmp	r0, #0
 800790e:	d09a      	beq.n	8007846 <_dtoa_r+0x616>
 8007910:	e7cb      	b.n	80078aa <_dtoa_r+0x67a>
 8007912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007914:	2a00      	cmp	r2, #0
 8007916:	f000 808b 	beq.w	8007a30 <_dtoa_r+0x800>
 800791a:	9a06      	ldr	r2, [sp, #24]
 800791c:	2a01      	cmp	r2, #1
 800791e:	dc6e      	bgt.n	80079fe <_dtoa_r+0x7ce>
 8007920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007922:	2a00      	cmp	r2, #0
 8007924:	d067      	beq.n	80079f6 <_dtoa_r+0x7c6>
 8007926:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800792a:	9f07      	ldr	r7, [sp, #28]
 800792c:	9d05      	ldr	r5, [sp, #20]
 800792e:	9a05      	ldr	r2, [sp, #20]
 8007930:	2101      	movs	r1, #1
 8007932:	441a      	add	r2, r3
 8007934:	4620      	mov	r0, r4
 8007936:	9205      	str	r2, [sp, #20]
 8007938:	4498      	add	r8, r3
 800793a:	f000 fcfe 	bl	800833a <__i2b>
 800793e:	4606      	mov	r6, r0
 8007940:	2d00      	cmp	r5, #0
 8007942:	dd0c      	ble.n	800795e <_dtoa_r+0x72e>
 8007944:	f1b8 0f00 	cmp.w	r8, #0
 8007948:	dd09      	ble.n	800795e <_dtoa_r+0x72e>
 800794a:	4545      	cmp	r5, r8
 800794c:	9a05      	ldr	r2, [sp, #20]
 800794e:	462b      	mov	r3, r5
 8007950:	bfa8      	it	ge
 8007952:	4643      	movge	r3, r8
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	9205      	str	r2, [sp, #20]
 8007958:	1aed      	subs	r5, r5, r3
 800795a:	eba8 0803 	sub.w	r8, r8, r3
 800795e:	9b07      	ldr	r3, [sp, #28]
 8007960:	b1eb      	cbz	r3, 800799e <_dtoa_r+0x76e>
 8007962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007964:	2b00      	cmp	r3, #0
 8007966:	d067      	beq.n	8007a38 <_dtoa_r+0x808>
 8007968:	b18f      	cbz	r7, 800798e <_dtoa_r+0x75e>
 800796a:	4631      	mov	r1, r6
 800796c:	463a      	mov	r2, r7
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fd82 	bl	8008478 <__pow5mult>
 8007974:	9a04      	ldr	r2, [sp, #16]
 8007976:	4601      	mov	r1, r0
 8007978:	4606      	mov	r6, r0
 800797a:	4620      	mov	r0, r4
 800797c:	f000 fce6 	bl	800834c <__multiply>
 8007980:	9904      	ldr	r1, [sp, #16]
 8007982:	9008      	str	r0, [sp, #32]
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fc38 	bl	80081fa <_Bfree>
 800798a:	9b08      	ldr	r3, [sp, #32]
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	9b07      	ldr	r3, [sp, #28]
 8007990:	1bda      	subs	r2, r3, r7
 8007992:	d004      	beq.n	800799e <_dtoa_r+0x76e>
 8007994:	9904      	ldr	r1, [sp, #16]
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fd6e 	bl	8008478 <__pow5mult>
 800799c:	9004      	str	r0, [sp, #16]
 800799e:	2101      	movs	r1, #1
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fcca 	bl	800833a <__i2b>
 80079a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a8:	4607      	mov	r7, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 81d0 	beq.w	8007d50 <_dtoa_r+0xb20>
 80079b0:	461a      	mov	r2, r3
 80079b2:	4601      	mov	r1, r0
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fd5f 	bl	8008478 <__pow5mult>
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	4607      	mov	r7, r0
 80079c0:	dc40      	bgt.n	8007a44 <_dtoa_r+0x814>
 80079c2:	9b00      	ldr	r3, [sp, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d139      	bne.n	8007a3c <_dtoa_r+0x80c>
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d136      	bne.n	8007a40 <_dtoa_r+0x810>
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079d8:	0d1b      	lsrs	r3, r3, #20
 80079da:	051b      	lsls	r3, r3, #20
 80079dc:	b12b      	cbz	r3, 80079ea <_dtoa_r+0x7ba>
 80079de:	9b05      	ldr	r3, [sp, #20]
 80079e0:	3301      	adds	r3, #1
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	f108 0801 	add.w	r8, r8, #1
 80079e8:	2301      	movs	r3, #1
 80079ea:	9307      	str	r3, [sp, #28]
 80079ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d12a      	bne.n	8007a48 <_dtoa_r+0x818>
 80079f2:	2001      	movs	r0, #1
 80079f4:	e030      	b.n	8007a58 <_dtoa_r+0x828>
 80079f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079fc:	e795      	b.n	800792a <_dtoa_r+0x6fa>
 80079fe:	9b07      	ldr	r3, [sp, #28]
 8007a00:	f109 37ff 	add.w	r7, r9, #4294967295
 8007a04:	42bb      	cmp	r3, r7
 8007a06:	bfbf      	itttt	lt
 8007a08:	9b07      	ldrlt	r3, [sp, #28]
 8007a0a:	9707      	strlt	r7, [sp, #28]
 8007a0c:	1afa      	sublt	r2, r7, r3
 8007a0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a10:	bfbb      	ittet	lt
 8007a12:	189b      	addlt	r3, r3, r2
 8007a14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a16:	1bdf      	subge	r7, r3, r7
 8007a18:	2700      	movlt	r7, #0
 8007a1a:	f1b9 0f00 	cmp.w	r9, #0
 8007a1e:	bfb5      	itete	lt
 8007a20:	9b05      	ldrlt	r3, [sp, #20]
 8007a22:	9d05      	ldrge	r5, [sp, #20]
 8007a24:	eba3 0509 	sublt.w	r5, r3, r9
 8007a28:	464b      	movge	r3, r9
 8007a2a:	bfb8      	it	lt
 8007a2c:	2300      	movlt	r3, #0
 8007a2e:	e77e      	b.n	800792e <_dtoa_r+0x6fe>
 8007a30:	9f07      	ldr	r7, [sp, #28]
 8007a32:	9d05      	ldr	r5, [sp, #20]
 8007a34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007a36:	e783      	b.n	8007940 <_dtoa_r+0x710>
 8007a38:	9a07      	ldr	r2, [sp, #28]
 8007a3a:	e7ab      	b.n	8007994 <_dtoa_r+0x764>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e7d4      	b.n	80079ea <_dtoa_r+0x7ba>
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	e7d2      	b.n	80079ea <_dtoa_r+0x7ba>
 8007a44:	2300      	movs	r3, #0
 8007a46:	9307      	str	r3, [sp, #28]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007a4e:	6918      	ldr	r0, [r3, #16]
 8007a50:	f000 fc25 	bl	800829e <__hi0bits>
 8007a54:	f1c0 0020 	rsb	r0, r0, #32
 8007a58:	4440      	add	r0, r8
 8007a5a:	f010 001f 	ands.w	r0, r0, #31
 8007a5e:	d047      	beq.n	8007af0 <_dtoa_r+0x8c0>
 8007a60:	f1c0 0320 	rsb	r3, r0, #32
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	dd3b      	ble.n	8007ae0 <_dtoa_r+0x8b0>
 8007a68:	9b05      	ldr	r3, [sp, #20]
 8007a6a:	f1c0 001c 	rsb	r0, r0, #28
 8007a6e:	4403      	add	r3, r0
 8007a70:	9305      	str	r3, [sp, #20]
 8007a72:	4405      	add	r5, r0
 8007a74:	4480      	add	r8, r0
 8007a76:	9b05      	ldr	r3, [sp, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dd05      	ble.n	8007a88 <_dtoa_r+0x858>
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	9904      	ldr	r1, [sp, #16]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fd47 	bl	8008514 <__lshift>
 8007a86:	9004      	str	r0, [sp, #16]
 8007a88:	f1b8 0f00 	cmp.w	r8, #0
 8007a8c:	dd05      	ble.n	8007a9a <_dtoa_r+0x86a>
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4642      	mov	r2, r8
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fd3e 	bl	8008514 <__lshift>
 8007a98:	4607      	mov	r7, r0
 8007a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a9c:	b353      	cbz	r3, 8007af4 <_dtoa_r+0x8c4>
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	9804      	ldr	r0, [sp, #16]
 8007aa2:	f000 fd8b 	bl	80085bc <__mcmp>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	da24      	bge.n	8007af4 <_dtoa_r+0x8c4>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	220a      	movs	r2, #10
 8007aae:	9904      	ldr	r1, [sp, #16]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fbb9 	bl	8008228 <__multadd>
 8007ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab8:	9004      	str	r0, [sp, #16]
 8007aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 814d 	beq.w	8007d5e <_dtoa_r+0xb2e>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	220a      	movs	r2, #10
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 fbac 	bl	8008228 <__multadd>
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	dc4f      	bgt.n	8007b78 <_dtoa_r+0x948>
 8007ad8:	9b06      	ldr	r3, [sp, #24]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	dd4c      	ble.n	8007b78 <_dtoa_r+0x948>
 8007ade:	e011      	b.n	8007b04 <_dtoa_r+0x8d4>
 8007ae0:	d0c9      	beq.n	8007a76 <_dtoa_r+0x846>
 8007ae2:	9a05      	ldr	r2, [sp, #20]
 8007ae4:	331c      	adds	r3, #28
 8007ae6:	441a      	add	r2, r3
 8007ae8:	9205      	str	r2, [sp, #20]
 8007aea:	441d      	add	r5, r3
 8007aec:	4498      	add	r8, r3
 8007aee:	e7c2      	b.n	8007a76 <_dtoa_r+0x846>
 8007af0:	4603      	mov	r3, r0
 8007af2:	e7f6      	b.n	8007ae2 <_dtoa_r+0x8b2>
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	dc38      	bgt.n	8007b6c <_dtoa_r+0x93c>
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	dd35      	ble.n	8007b6c <_dtoa_r+0x93c>
 8007b00:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	b963      	cbnz	r3, 8007b22 <_dtoa_r+0x8f2>
 8007b08:	4639      	mov	r1, r7
 8007b0a:	2205      	movs	r2, #5
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fb8b 	bl	8008228 <__multadd>
 8007b12:	4601      	mov	r1, r0
 8007b14:	4607      	mov	r7, r0
 8007b16:	9804      	ldr	r0, [sp, #16]
 8007b18:	f000 fd50 	bl	80085bc <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f73f adcc 	bgt.w	80076ba <_dtoa_r+0x48a>
 8007b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b24:	465d      	mov	r5, fp
 8007b26:	ea6f 0a03 	mvn.w	sl, r3
 8007b2a:	f04f 0900 	mov.w	r9, #0
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 fb62 	bl	80081fa <_Bfree>
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	f43f aeb7 	beq.w	80078aa <_dtoa_r+0x67a>
 8007b3c:	f1b9 0f00 	cmp.w	r9, #0
 8007b40:	d005      	beq.n	8007b4e <_dtoa_r+0x91e>
 8007b42:	45b1      	cmp	r9, r6
 8007b44:	d003      	beq.n	8007b4e <_dtoa_r+0x91e>
 8007b46:	4649      	mov	r1, r9
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fb56 	bl	80081fa <_Bfree>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 fb52 	bl	80081fa <_Bfree>
 8007b56:	e6a8      	b.n	80078aa <_dtoa_r+0x67a>
 8007b58:	2700      	movs	r7, #0
 8007b5a:	463e      	mov	r6, r7
 8007b5c:	e7e1      	b.n	8007b22 <_dtoa_r+0x8f2>
 8007b5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b62:	463e      	mov	r6, r7
 8007b64:	e5a9      	b.n	80076ba <_dtoa_r+0x48a>
 8007b66:	bf00      	nop
 8007b68:	40240000 	.word	0x40240000
 8007b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80fa 	beq.w	8007d6c <_dtoa_r+0xb3c>
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	dd05      	ble.n	8007b88 <_dtoa_r+0x958>
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fcc7 	bl	8008514 <__lshift>
 8007b86:	4606      	mov	r6, r0
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d04c      	beq.n	8007c28 <_dtoa_r+0x9f8>
 8007b8e:	6871      	ldr	r1, [r6, #4]
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fafe 	bl	8008192 <_Balloc>
 8007b96:	6932      	ldr	r2, [r6, #16]
 8007b98:	3202      	adds	r2, #2
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	0092      	lsls	r2, r2, #2
 8007b9e:	f106 010c 	add.w	r1, r6, #12
 8007ba2:	300c      	adds	r0, #12
 8007ba4:	f000 fae8 	bl	8008178 <memcpy>
 8007ba8:	2201      	movs	r2, #1
 8007baa:	4629      	mov	r1, r5
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 fcb1 	bl	8008514 <__lshift>
 8007bb2:	9b00      	ldr	r3, [sp, #0]
 8007bb4:	f8cd b014 	str.w	fp, [sp, #20]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	46b1      	mov	r9, r6
 8007bbe:	9307      	str	r3, [sp, #28]
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	9804      	ldr	r0, [sp, #16]
 8007bc6:	f7ff faa7 	bl	8007118 <quorem>
 8007bca:	4649      	mov	r1, r9
 8007bcc:	4605      	mov	r5, r0
 8007bce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007bd2:	9804      	ldr	r0, [sp, #16]
 8007bd4:	f000 fcf2 	bl	80085bc <__mcmp>
 8007bd8:	4632      	mov	r2, r6
 8007bda:	9000      	str	r0, [sp, #0]
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 fd06 	bl	80085f0 <__mdiff>
 8007be4:	68c3      	ldr	r3, [r0, #12]
 8007be6:	4602      	mov	r2, r0
 8007be8:	bb03      	cbnz	r3, 8007c2c <_dtoa_r+0x9fc>
 8007bea:	4601      	mov	r1, r0
 8007bec:	9008      	str	r0, [sp, #32]
 8007bee:	9804      	ldr	r0, [sp, #16]
 8007bf0:	f000 fce4 	bl	80085bc <__mcmp>
 8007bf4:	9a08      	ldr	r2, [sp, #32]
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	f000 fafc 	bl	80081fa <_Bfree>
 8007c02:	9b08      	ldr	r3, [sp, #32]
 8007c04:	b9a3      	cbnz	r3, 8007c30 <_dtoa_r+0xa00>
 8007c06:	9a06      	ldr	r2, [sp, #24]
 8007c08:	b992      	cbnz	r2, 8007c30 <_dtoa_r+0xa00>
 8007c0a:	9a07      	ldr	r2, [sp, #28]
 8007c0c:	b982      	cbnz	r2, 8007c30 <_dtoa_r+0xa00>
 8007c0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c12:	d029      	beq.n	8007c68 <_dtoa_r+0xa38>
 8007c14:	9b00      	ldr	r3, [sp, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dd01      	ble.n	8007c1e <_dtoa_r+0x9ee>
 8007c1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007c1e:	9b05      	ldr	r3, [sp, #20]
 8007c20:	1c5d      	adds	r5, r3, #1
 8007c22:	f883 8000 	strb.w	r8, [r3]
 8007c26:	e782      	b.n	8007b2e <_dtoa_r+0x8fe>
 8007c28:	4630      	mov	r0, r6
 8007c2a:	e7c2      	b.n	8007bb2 <_dtoa_r+0x982>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e7e3      	b.n	8007bf8 <_dtoa_r+0x9c8>
 8007c30:	9a00      	ldr	r2, [sp, #0]
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	db04      	blt.n	8007c40 <_dtoa_r+0xa10>
 8007c36:	d125      	bne.n	8007c84 <_dtoa_r+0xa54>
 8007c38:	9a06      	ldr	r2, [sp, #24]
 8007c3a:	bb1a      	cbnz	r2, 8007c84 <_dtoa_r+0xa54>
 8007c3c:	9a07      	ldr	r2, [sp, #28]
 8007c3e:	bb0a      	cbnz	r2, 8007c84 <_dtoa_r+0xa54>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	ddec      	ble.n	8007c1e <_dtoa_r+0x9ee>
 8007c44:	2201      	movs	r2, #1
 8007c46:	9904      	ldr	r1, [sp, #16]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fc63 	bl	8008514 <__lshift>
 8007c4e:	4639      	mov	r1, r7
 8007c50:	9004      	str	r0, [sp, #16]
 8007c52:	f000 fcb3 	bl	80085bc <__mcmp>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	dc03      	bgt.n	8007c62 <_dtoa_r+0xa32>
 8007c5a:	d1e0      	bne.n	8007c1e <_dtoa_r+0x9ee>
 8007c5c:	f018 0f01 	tst.w	r8, #1
 8007c60:	d0dd      	beq.n	8007c1e <_dtoa_r+0x9ee>
 8007c62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c66:	d1d8      	bne.n	8007c1a <_dtoa_r+0x9ea>
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	9a05      	ldr	r2, [sp, #20]
 8007c6c:	1c5d      	adds	r5, r3, #1
 8007c6e:	2339      	movs	r3, #57	; 0x39
 8007c70:	7013      	strb	r3, [r2, #0]
 8007c72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c76:	2b39      	cmp	r3, #57	; 0x39
 8007c78:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c7c:	d04f      	beq.n	8007d1e <_dtoa_r+0xaee>
 8007c7e:	3301      	adds	r3, #1
 8007c80:	7013      	strb	r3, [r2, #0]
 8007c82:	e754      	b.n	8007b2e <_dtoa_r+0x8fe>
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f102 0501 	add.w	r5, r2, #1
 8007c8c:	dd06      	ble.n	8007c9c <_dtoa_r+0xa6c>
 8007c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c92:	d0e9      	beq.n	8007c68 <_dtoa_r+0xa38>
 8007c94:	f108 0801 	add.w	r8, r8, #1
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	e7c2      	b.n	8007c22 <_dtoa_r+0x9f2>
 8007c9c:	9a02      	ldr	r2, [sp, #8]
 8007c9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007ca2:	eba5 030b 	sub.w	r3, r5, fp
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d021      	beq.n	8007cee <_dtoa_r+0xabe>
 8007caa:	2300      	movs	r3, #0
 8007cac:	220a      	movs	r2, #10
 8007cae:	9904      	ldr	r1, [sp, #16]
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f000 fab9 	bl	8008228 <__multadd>
 8007cb6:	45b1      	cmp	r9, r6
 8007cb8:	9004      	str	r0, [sp, #16]
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	f04f 020a 	mov.w	r2, #10
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	d105      	bne.n	8007cd4 <_dtoa_r+0xaa4>
 8007cc8:	f000 faae 	bl	8008228 <__multadd>
 8007ccc:	4681      	mov	r9, r0
 8007cce:	4606      	mov	r6, r0
 8007cd0:	9505      	str	r5, [sp, #20]
 8007cd2:	e776      	b.n	8007bc2 <_dtoa_r+0x992>
 8007cd4:	f000 faa8 	bl	8008228 <__multadd>
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4681      	mov	r9, r0
 8007cdc:	2300      	movs	r3, #0
 8007cde:	220a      	movs	r2, #10
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 faa1 	bl	8008228 <__multadd>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	e7f2      	b.n	8007cd0 <_dtoa_r+0xaa0>
 8007cea:	f04f 0900 	mov.w	r9, #0
 8007cee:	2201      	movs	r2, #1
 8007cf0:	9904      	ldr	r1, [sp, #16]
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fc0e 	bl	8008514 <__lshift>
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	9004      	str	r0, [sp, #16]
 8007cfc:	f000 fc5e 	bl	80085bc <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dcb6      	bgt.n	8007c72 <_dtoa_r+0xa42>
 8007d04:	d102      	bne.n	8007d0c <_dtoa_r+0xadc>
 8007d06:	f018 0f01 	tst.w	r8, #1
 8007d0a:	d1b2      	bne.n	8007c72 <_dtoa_r+0xa42>
 8007d0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d10:	2b30      	cmp	r3, #48	; 0x30
 8007d12:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d16:	f47f af0a 	bne.w	8007b2e <_dtoa_r+0x8fe>
 8007d1a:	4615      	mov	r5, r2
 8007d1c:	e7f6      	b.n	8007d0c <_dtoa_r+0xadc>
 8007d1e:	4593      	cmp	fp, r2
 8007d20:	d105      	bne.n	8007d2e <_dtoa_r+0xafe>
 8007d22:	2331      	movs	r3, #49	; 0x31
 8007d24:	f10a 0a01 	add.w	sl, sl, #1
 8007d28:	f88b 3000 	strb.w	r3, [fp]
 8007d2c:	e6ff      	b.n	8007b2e <_dtoa_r+0x8fe>
 8007d2e:	4615      	mov	r5, r2
 8007d30:	e79f      	b.n	8007c72 <_dtoa_r+0xa42>
 8007d32:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007d98 <_dtoa_r+0xb68>
 8007d36:	e007      	b.n	8007d48 <_dtoa_r+0xb18>
 8007d38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007d9c <_dtoa_r+0xb6c>
 8007d3e:	b11b      	cbz	r3, 8007d48 <_dtoa_r+0xb18>
 8007d40:	f10b 0308 	add.w	r3, fp, #8
 8007d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	4658      	mov	r0, fp
 8007d4a:	b017      	add	sp, #92	; 0x5c
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	9b06      	ldr	r3, [sp, #24]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	f77f ae35 	ble.w	80079c2 <_dtoa_r+0x792>
 8007d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	e649      	b.n	80079f2 <_dtoa_r+0x7c2>
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc03      	bgt.n	8007d6c <_dtoa_r+0xb3c>
 8007d64:	9b06      	ldr	r3, [sp, #24]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	f73f aecc 	bgt.w	8007b04 <_dtoa_r+0x8d4>
 8007d6c:	465d      	mov	r5, fp
 8007d6e:	4639      	mov	r1, r7
 8007d70:	9804      	ldr	r0, [sp, #16]
 8007d72:	f7ff f9d1 	bl	8007118 <quorem>
 8007d76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d7a:	f805 8b01 	strb.w	r8, [r5], #1
 8007d7e:	9a02      	ldr	r2, [sp, #8]
 8007d80:	eba5 030b 	sub.w	r3, r5, fp
 8007d84:	429a      	cmp	r2, r3
 8007d86:	ddb0      	ble.n	8007cea <_dtoa_r+0xaba>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	9904      	ldr	r1, [sp, #16]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fa4a 	bl	8008228 <__multadd>
 8007d94:	9004      	str	r0, [sp, #16]
 8007d96:	e7ea      	b.n	8007d6e <_dtoa_r+0xb3e>
 8007d98:	08008ed8 	.word	0x08008ed8
 8007d9c:	08008efc 	.word	0x08008efc

08007da0 <__sflush_r>:
 8007da0:	898a      	ldrh	r2, [r1, #12]
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	4605      	mov	r5, r0
 8007da8:	0710      	lsls	r0, r2, #28
 8007daa:	460c      	mov	r4, r1
 8007dac:	d458      	bmi.n	8007e60 <__sflush_r+0xc0>
 8007dae:	684b      	ldr	r3, [r1, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc05      	bgt.n	8007dc0 <__sflush_r+0x20>
 8007db4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc02      	bgt.n	8007dc0 <__sflush_r+0x20>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d0f9      	beq.n	8007dba <__sflush_r+0x1a>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dcc:	682f      	ldr	r7, [r5, #0]
 8007dce:	6a21      	ldr	r1, [r4, #32]
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	d032      	beq.n	8007e3a <__sflush_r+0x9a>
 8007dd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	075a      	lsls	r2, r3, #29
 8007dda:	d505      	bpl.n	8007de8 <__sflush_r+0x48>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	1ac0      	subs	r0, r0, r3
 8007de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007de2:	b10b      	cbz	r3, 8007de8 <__sflush_r+0x48>
 8007de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de6:	1ac0      	subs	r0, r0, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	4602      	mov	r2, r0
 8007dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dee:	6a21      	ldr	r1, [r4, #32]
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	d106      	bne.n	8007e08 <__sflush_r+0x68>
 8007dfa:	6829      	ldr	r1, [r5, #0]
 8007dfc:	291d      	cmp	r1, #29
 8007dfe:	d848      	bhi.n	8007e92 <__sflush_r+0xf2>
 8007e00:	4a29      	ldr	r2, [pc, #164]	; (8007ea8 <__sflush_r+0x108>)
 8007e02:	40ca      	lsrs	r2, r1
 8007e04:	07d6      	lsls	r6, r2, #31
 8007e06:	d544      	bpl.n	8007e92 <__sflush_r+0xf2>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6062      	str	r2, [r4, #4]
 8007e0c:	04d9      	lsls	r1, r3, #19
 8007e0e:	6922      	ldr	r2, [r4, #16]
 8007e10:	6022      	str	r2, [r4, #0]
 8007e12:	d504      	bpl.n	8007e1e <__sflush_r+0x7e>
 8007e14:	1c42      	adds	r2, r0, #1
 8007e16:	d101      	bne.n	8007e1c <__sflush_r+0x7c>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b903      	cbnz	r3, 8007e1e <__sflush_r+0x7e>
 8007e1c:	6560      	str	r0, [r4, #84]	; 0x54
 8007e1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e20:	602f      	str	r7, [r5, #0]
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d0c9      	beq.n	8007dba <__sflush_r+0x1a>
 8007e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	d002      	beq.n	8007e34 <__sflush_r+0x94>
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7fe fb22 	bl	8006478 <_free_r>
 8007e34:	2000      	movs	r0, #0
 8007e36:	6360      	str	r0, [r4, #52]	; 0x34
 8007e38:	e7c0      	b.n	8007dbc <__sflush_r+0x1c>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b0      	blx	r6
 8007e40:	1c41      	adds	r1, r0, #1
 8007e42:	d1c8      	bne.n	8007dd6 <__sflush_r+0x36>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0c5      	beq.n	8007dd6 <__sflush_r+0x36>
 8007e4a:	2b1d      	cmp	r3, #29
 8007e4c:	d001      	beq.n	8007e52 <__sflush_r+0xb2>
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	d101      	bne.n	8007e56 <__sflush_r+0xb6>
 8007e52:	602f      	str	r7, [r5, #0]
 8007e54:	e7b1      	b.n	8007dba <__sflush_r+0x1a>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	e7ad      	b.n	8007dbc <__sflush_r+0x1c>
 8007e60:	690f      	ldr	r7, [r1, #16]
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d0a9      	beq.n	8007dba <__sflush_r+0x1a>
 8007e66:	0793      	lsls	r3, r2, #30
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	bf08      	it	eq
 8007e6c:	694b      	ldreq	r3, [r1, #20]
 8007e6e:	600f      	str	r7, [r1, #0]
 8007e70:	bf18      	it	ne
 8007e72:	2300      	movne	r3, #0
 8007e74:	eba6 0807 	sub.w	r8, r6, r7
 8007e78:	608b      	str	r3, [r1, #8]
 8007e7a:	f1b8 0f00 	cmp.w	r8, #0
 8007e7e:	dd9c      	ble.n	8007dba <__sflush_r+0x1a>
 8007e80:	4643      	mov	r3, r8
 8007e82:	463a      	mov	r2, r7
 8007e84:	6a21      	ldr	r1, [r4, #32]
 8007e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b0      	blx	r6
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	dc06      	bgt.n	8007e9e <__sflush_r+0xfe>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e78e      	b.n	8007dbc <__sflush_r+0x1c>
 8007e9e:	4407      	add	r7, r0
 8007ea0:	eba8 0800 	sub.w	r8, r8, r0
 8007ea4:	e7e9      	b.n	8007e7a <__sflush_r+0xda>
 8007ea6:	bf00      	nop
 8007ea8:	20400001 	.word	0x20400001

08007eac <_fflush_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	b1db      	cbz	r3, 8007eee <_fflush_r+0x42>
 8007eb6:	b118      	cbz	r0, 8007ec0 <_fflush_r+0x14>
 8007eb8:	6983      	ldr	r3, [r0, #24]
 8007eba:	b90b      	cbnz	r3, 8007ec0 <_fflush_r+0x14>
 8007ebc:	f000 f860 	bl	8007f80 <__sinit>
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <_fflush_r+0x48>)
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d109      	bne.n	8007eda <_fflush_r+0x2e>
 8007ec6:	686c      	ldr	r4, [r5, #4]
 8007ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ecc:	b17b      	cbz	r3, 8007eee <_fflush_r+0x42>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed6:	f7ff bf63 	b.w	8007da0 <__sflush_r>
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <_fflush_r+0x4c>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	d101      	bne.n	8007ee4 <_fflush_r+0x38>
 8007ee0:	68ac      	ldr	r4, [r5, #8]
 8007ee2:	e7f1      	b.n	8007ec8 <_fflush_r+0x1c>
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <_fflush_r+0x50>)
 8007ee6:	429c      	cmp	r4, r3
 8007ee8:	bf08      	it	eq
 8007eea:	68ec      	ldreq	r4, [r5, #12]
 8007eec:	e7ec      	b.n	8007ec8 <_fflush_r+0x1c>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	08008f2c 	.word	0x08008f2c
 8007ef8:	08008f4c 	.word	0x08008f4c
 8007efc:	08008f0c 	.word	0x08008f0c

08007f00 <std>:
 8007f00:	2300      	movs	r3, #0
 8007f02:	b510      	push	{r4, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0a:	6083      	str	r3, [r0, #8]
 8007f0c:	8181      	strh	r1, [r0, #12]
 8007f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f10:	81c2      	strh	r2, [r0, #14]
 8007f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f16:	6183      	str	r3, [r0, #24]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	305c      	adds	r0, #92	; 0x5c
 8007f1e:	f7fe faa3 	bl	8006468 <memset>
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <std+0x38>)
 8007f24:	6263      	str	r3, [r4, #36]	; 0x24
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <std+0x3c>)
 8007f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <std+0x40>)
 8007f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f2e:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <std+0x44>)
 8007f30:	6224      	str	r4, [r4, #32]
 8007f32:	6323      	str	r3, [r4, #48]	; 0x30
 8007f34:	bd10      	pop	{r4, pc}
 8007f36:	bf00      	nop
 8007f38:	080089e5 	.word	0x080089e5
 8007f3c:	08008a07 	.word	0x08008a07
 8007f40:	08008a3f 	.word	0x08008a3f
 8007f44:	08008a63 	.word	0x08008a63

08007f48 <_cleanup_r>:
 8007f48:	4901      	ldr	r1, [pc, #4]	; (8007f50 <_cleanup_r+0x8>)
 8007f4a:	f000 b885 	b.w	8008058 <_fwalk_reent>
 8007f4e:	bf00      	nop
 8007f50:	08007ead 	.word	0x08007ead

08007f54 <__sfmoreglue>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	1e4a      	subs	r2, r1, #1
 8007f58:	2568      	movs	r5, #104	; 0x68
 8007f5a:	4355      	muls	r5, r2
 8007f5c:	460e      	mov	r6, r1
 8007f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f62:	f7fe fad7 	bl	8006514 <_malloc_r>
 8007f66:	4604      	mov	r4, r0
 8007f68:	b140      	cbz	r0, 8007f7c <__sfmoreglue+0x28>
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f70:	300c      	adds	r0, #12
 8007f72:	60a0      	str	r0, [r4, #8]
 8007f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f78:	f7fe fa76 	bl	8006468 <memset>
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}

08007f80 <__sinit>:
 8007f80:	6983      	ldr	r3, [r0, #24]
 8007f82:	b510      	push	{r4, lr}
 8007f84:	4604      	mov	r4, r0
 8007f86:	bb33      	cbnz	r3, 8007fd6 <__sinit+0x56>
 8007f88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007f8c:	6503      	str	r3, [r0, #80]	; 0x50
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <__sinit+0x58>)
 8007f90:	4a12      	ldr	r2, [pc, #72]	; (8007fdc <__sinit+0x5c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6282      	str	r2, [r0, #40]	; 0x28
 8007f96:	4298      	cmp	r0, r3
 8007f98:	bf04      	itt	eq
 8007f9a:	2301      	moveq	r3, #1
 8007f9c:	6183      	streq	r3, [r0, #24]
 8007f9e:	f000 f81f 	bl	8007fe0 <__sfp>
 8007fa2:	6060      	str	r0, [r4, #4]
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 f81b 	bl	8007fe0 <__sfp>
 8007faa:	60a0      	str	r0, [r4, #8]
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 f817 	bl	8007fe0 <__sfp>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	60e0      	str	r0, [r4, #12]
 8007fb6:	2104      	movs	r1, #4
 8007fb8:	6860      	ldr	r0, [r4, #4]
 8007fba:	f7ff ffa1 	bl	8007f00 <std>
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	2109      	movs	r1, #9
 8007fc2:	68a0      	ldr	r0, [r4, #8]
 8007fc4:	f7ff ff9c 	bl	8007f00 <std>
 8007fc8:	2202      	movs	r2, #2
 8007fca:	2112      	movs	r1, #18
 8007fcc:	68e0      	ldr	r0, [r4, #12]
 8007fce:	f7ff ff97 	bl	8007f00 <std>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	61a3      	str	r3, [r4, #24]
 8007fd6:	bd10      	pop	{r4, pc}
 8007fd8:	08008ec4 	.word	0x08008ec4
 8007fdc:	08007f49 	.word	0x08007f49

08007fe0 <__sfp>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <__sfp+0x70>)
 8007fe4:	681e      	ldr	r6, [r3, #0]
 8007fe6:	69b3      	ldr	r3, [r6, #24]
 8007fe8:	4607      	mov	r7, r0
 8007fea:	b913      	cbnz	r3, 8007ff2 <__sfp+0x12>
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff ffc7 	bl	8007f80 <__sinit>
 8007ff2:	3648      	adds	r6, #72	; 0x48
 8007ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	d503      	bpl.n	8008004 <__sfp+0x24>
 8007ffc:	6833      	ldr	r3, [r6, #0]
 8007ffe:	b133      	cbz	r3, 800800e <__sfp+0x2e>
 8008000:	6836      	ldr	r6, [r6, #0]
 8008002:	e7f7      	b.n	8007ff4 <__sfp+0x14>
 8008004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008008:	b16d      	cbz	r5, 8008026 <__sfp+0x46>
 800800a:	3468      	adds	r4, #104	; 0x68
 800800c:	e7f4      	b.n	8007ff8 <__sfp+0x18>
 800800e:	2104      	movs	r1, #4
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff ff9f 	bl	8007f54 <__sfmoreglue>
 8008016:	6030      	str	r0, [r6, #0]
 8008018:	2800      	cmp	r0, #0
 800801a:	d1f1      	bne.n	8008000 <__sfp+0x20>
 800801c:	230c      	movs	r3, #12
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	4604      	mov	r4, r0
 8008022:	4620      	mov	r0, r4
 8008024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <__sfp+0x74>)
 8008028:	6665      	str	r5, [r4, #100]	; 0x64
 800802a:	e9c4 5500 	strd	r5, r5, [r4]
 800802e:	60a5      	str	r5, [r4, #8]
 8008030:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008034:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008038:	2208      	movs	r2, #8
 800803a:	4629      	mov	r1, r5
 800803c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008040:	f7fe fa12 	bl	8006468 <memset>
 8008044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800804c:	e7e9      	b.n	8008022 <__sfp+0x42>
 800804e:	bf00      	nop
 8008050:	08008ec4 	.word	0x08008ec4
 8008054:	ffff0001 	.word	0xffff0001

08008058 <_fwalk_reent>:
 8008058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008064:	2600      	movs	r6, #0
 8008066:	b914      	cbnz	r4, 800806e <_fwalk_reent+0x16>
 8008068:	4630      	mov	r0, r6
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008072:	3f01      	subs	r7, #1
 8008074:	d501      	bpl.n	800807a <_fwalk_reent+0x22>
 8008076:	6824      	ldr	r4, [r4, #0]
 8008078:	e7f5      	b.n	8008066 <_fwalk_reent+0xe>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d907      	bls.n	8008090 <_fwalk_reent+0x38>
 8008080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008084:	3301      	adds	r3, #1
 8008086:	d003      	beq.n	8008090 <_fwalk_reent+0x38>
 8008088:	4629      	mov	r1, r5
 800808a:	4640      	mov	r0, r8
 800808c:	47c8      	blx	r9
 800808e:	4306      	orrs	r6, r0
 8008090:	3568      	adds	r5, #104	; 0x68
 8008092:	e7ee      	b.n	8008072 <_fwalk_reent+0x1a>

08008094 <_localeconv_r>:
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <_localeconv_r+0x14>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a18      	ldr	r0, [r3, #32]
 800809a:	4b04      	ldr	r3, [pc, #16]	; (80080ac <_localeconv_r+0x18>)
 800809c:	2800      	cmp	r0, #0
 800809e:	bf08      	it	eq
 80080a0:	4618      	moveq	r0, r3
 80080a2:	30f0      	adds	r0, #240	; 0xf0
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	2000002c 	.word	0x2000002c
 80080ac:	20000090 	.word	0x20000090

080080b0 <__swhatbuf_r>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	460e      	mov	r6, r1
 80080b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b8:	2900      	cmp	r1, #0
 80080ba:	b096      	sub	sp, #88	; 0x58
 80080bc:	4614      	mov	r4, r2
 80080be:	461d      	mov	r5, r3
 80080c0:	da07      	bge.n	80080d2 <__swhatbuf_r+0x22>
 80080c2:	2300      	movs	r3, #0
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	89b3      	ldrh	r3, [r6, #12]
 80080c8:	061a      	lsls	r2, r3, #24
 80080ca:	d410      	bmi.n	80080ee <__swhatbuf_r+0x3e>
 80080cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d0:	e00e      	b.n	80080f0 <__swhatbuf_r+0x40>
 80080d2:	466a      	mov	r2, sp
 80080d4:	f000 fcec 	bl	8008ab0 <_fstat_r>
 80080d8:	2800      	cmp	r0, #0
 80080da:	dbf2      	blt.n	80080c2 <__swhatbuf_r+0x12>
 80080dc:	9a01      	ldr	r2, [sp, #4]
 80080de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080e6:	425a      	negs	r2, r3
 80080e8:	415a      	adcs	r2, r3
 80080ea:	602a      	str	r2, [r5, #0]
 80080ec:	e7ee      	b.n	80080cc <__swhatbuf_r+0x1c>
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	2000      	movs	r0, #0
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	b016      	add	sp, #88	; 0x58
 80080f6:	bd70      	pop	{r4, r5, r6, pc}

080080f8 <__smakebuf_r>:
 80080f8:	898b      	ldrh	r3, [r1, #12]
 80080fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080fc:	079d      	lsls	r5, r3, #30
 80080fe:	4606      	mov	r6, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d507      	bpl.n	8008114 <__smakebuf_r+0x1c>
 8008104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	2301      	movs	r3, #1
 800810e:	6163      	str	r3, [r4, #20]
 8008110:	b002      	add	sp, #8
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	ab01      	add	r3, sp, #4
 8008116:	466a      	mov	r2, sp
 8008118:	f7ff ffca 	bl	80080b0 <__swhatbuf_r>
 800811c:	9900      	ldr	r1, [sp, #0]
 800811e:	4605      	mov	r5, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7fe f9f7 	bl	8006514 <_malloc_r>
 8008126:	b948      	cbnz	r0, 800813c <__smakebuf_r+0x44>
 8008128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812c:	059a      	lsls	r2, r3, #22
 800812e:	d4ef      	bmi.n	8008110 <__smakebuf_r+0x18>
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7e3      	b.n	8008104 <__smakebuf_r+0xc>
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <__smakebuf_r+0x7c>)
 800813e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	6020      	str	r0, [r4, #0]
 8008144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	9b00      	ldr	r3, [sp, #0]
 800814c:	6163      	str	r3, [r4, #20]
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	6120      	str	r0, [r4, #16]
 8008152:	b15b      	cbz	r3, 800816c <__smakebuf_r+0x74>
 8008154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008158:	4630      	mov	r0, r6
 800815a:	f000 fcbb 	bl	8008ad4 <_isatty_r>
 800815e:	b128      	cbz	r0, 800816c <__smakebuf_r+0x74>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	431d      	orrs	r5, r3
 8008170:	81a5      	strh	r5, [r4, #12]
 8008172:	e7cd      	b.n	8008110 <__smakebuf_r+0x18>
 8008174:	08007f49 	.word	0x08007f49

08008178 <memcpy>:
 8008178:	b510      	push	{r4, lr}
 800817a:	1e43      	subs	r3, r0, #1
 800817c:	440a      	add	r2, r1
 800817e:	4291      	cmp	r1, r2
 8008180:	d100      	bne.n	8008184 <memcpy+0xc>
 8008182:	bd10      	pop	{r4, pc}
 8008184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800818c:	e7f7      	b.n	800817e <memcpy+0x6>

0800818e <__malloc_lock>:
 800818e:	4770      	bx	lr

08008190 <__malloc_unlock>:
 8008190:	4770      	bx	lr

08008192 <_Balloc>:
 8008192:	b570      	push	{r4, r5, r6, lr}
 8008194:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008196:	4604      	mov	r4, r0
 8008198:	460e      	mov	r6, r1
 800819a:	b93d      	cbnz	r5, 80081ac <_Balloc+0x1a>
 800819c:	2010      	movs	r0, #16
 800819e:	f7fe f95b 	bl	8006458 <malloc>
 80081a2:	6260      	str	r0, [r4, #36]	; 0x24
 80081a4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081a8:	6005      	str	r5, [r0, #0]
 80081aa:	60c5      	str	r5, [r0, #12]
 80081ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80081ae:	68eb      	ldr	r3, [r5, #12]
 80081b0:	b183      	cbz	r3, 80081d4 <_Balloc+0x42>
 80081b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80081ba:	b9b8      	cbnz	r0, 80081ec <_Balloc+0x5a>
 80081bc:	2101      	movs	r1, #1
 80081be:	fa01 f506 	lsl.w	r5, r1, r6
 80081c2:	1d6a      	adds	r2, r5, #5
 80081c4:	0092      	lsls	r2, r2, #2
 80081c6:	4620      	mov	r0, r4
 80081c8:	f000 fabe 	bl	8008748 <_calloc_r>
 80081cc:	b160      	cbz	r0, 80081e8 <_Balloc+0x56>
 80081ce:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80081d2:	e00e      	b.n	80081f2 <_Balloc+0x60>
 80081d4:	2221      	movs	r2, #33	; 0x21
 80081d6:	2104      	movs	r1, #4
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fab5 	bl	8008748 <_calloc_r>
 80081de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e0:	60e8      	str	r0, [r5, #12]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e4      	bne.n	80081b2 <_Balloc+0x20>
 80081e8:	2000      	movs	r0, #0
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	6802      	ldr	r2, [r0, #0]
 80081ee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80081f2:	2300      	movs	r3, #0
 80081f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081f8:	e7f7      	b.n	80081ea <_Balloc+0x58>

080081fa <_Bfree>:
 80081fa:	b570      	push	{r4, r5, r6, lr}
 80081fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081fe:	4606      	mov	r6, r0
 8008200:	460d      	mov	r5, r1
 8008202:	b93c      	cbnz	r4, 8008214 <_Bfree+0x1a>
 8008204:	2010      	movs	r0, #16
 8008206:	f7fe f927 	bl	8006458 <malloc>
 800820a:	6270      	str	r0, [r6, #36]	; 0x24
 800820c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008210:	6004      	str	r4, [r0, #0]
 8008212:	60c4      	str	r4, [r0, #12]
 8008214:	b13d      	cbz	r5, 8008226 <_Bfree+0x2c>
 8008216:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008218:	686a      	ldr	r2, [r5, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008220:	6029      	str	r1, [r5, #0]
 8008222:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008226:	bd70      	pop	{r4, r5, r6, pc}

08008228 <__multadd>:
 8008228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822c:	690d      	ldr	r5, [r1, #16]
 800822e:	461f      	mov	r7, r3
 8008230:	4606      	mov	r6, r0
 8008232:	460c      	mov	r4, r1
 8008234:	f101 0c14 	add.w	ip, r1, #20
 8008238:	2300      	movs	r3, #0
 800823a:	f8dc 0000 	ldr.w	r0, [ip]
 800823e:	b281      	uxth	r1, r0
 8008240:	fb02 7101 	mla	r1, r2, r1, r7
 8008244:	0c0f      	lsrs	r7, r1, #16
 8008246:	0c00      	lsrs	r0, r0, #16
 8008248:	fb02 7000 	mla	r0, r2, r0, r7
 800824c:	b289      	uxth	r1, r1
 800824e:	3301      	adds	r3, #1
 8008250:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008254:	429d      	cmp	r5, r3
 8008256:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800825a:	f84c 1b04 	str.w	r1, [ip], #4
 800825e:	dcec      	bgt.n	800823a <__multadd+0x12>
 8008260:	b1d7      	cbz	r7, 8008298 <__multadd+0x70>
 8008262:	68a3      	ldr	r3, [r4, #8]
 8008264:	42ab      	cmp	r3, r5
 8008266:	dc12      	bgt.n	800828e <__multadd+0x66>
 8008268:	6861      	ldr	r1, [r4, #4]
 800826a:	4630      	mov	r0, r6
 800826c:	3101      	adds	r1, #1
 800826e:	f7ff ff90 	bl	8008192 <_Balloc>
 8008272:	6922      	ldr	r2, [r4, #16]
 8008274:	3202      	adds	r2, #2
 8008276:	f104 010c 	add.w	r1, r4, #12
 800827a:	4680      	mov	r8, r0
 800827c:	0092      	lsls	r2, r2, #2
 800827e:	300c      	adds	r0, #12
 8008280:	f7ff ff7a 	bl	8008178 <memcpy>
 8008284:	4621      	mov	r1, r4
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ffb7 	bl	80081fa <_Bfree>
 800828c:	4644      	mov	r4, r8
 800828e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008292:	3501      	adds	r5, #1
 8008294:	615f      	str	r7, [r3, #20]
 8008296:	6125      	str	r5, [r4, #16]
 8008298:	4620      	mov	r0, r4
 800829a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800829e <__hi0bits>:
 800829e:	0c02      	lsrs	r2, r0, #16
 80082a0:	0412      	lsls	r2, r2, #16
 80082a2:	4603      	mov	r3, r0
 80082a4:	b9b2      	cbnz	r2, 80082d4 <__hi0bits+0x36>
 80082a6:	0403      	lsls	r3, r0, #16
 80082a8:	2010      	movs	r0, #16
 80082aa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80082ae:	bf04      	itt	eq
 80082b0:	021b      	lsleq	r3, r3, #8
 80082b2:	3008      	addeq	r0, #8
 80082b4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80082b8:	bf04      	itt	eq
 80082ba:	011b      	lsleq	r3, r3, #4
 80082bc:	3004      	addeq	r0, #4
 80082be:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082c2:	bf04      	itt	eq
 80082c4:	009b      	lsleq	r3, r3, #2
 80082c6:	3002      	addeq	r0, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db06      	blt.n	80082da <__hi0bits+0x3c>
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	d503      	bpl.n	80082d8 <__hi0bits+0x3a>
 80082d0:	3001      	adds	r0, #1
 80082d2:	4770      	bx	lr
 80082d4:	2000      	movs	r0, #0
 80082d6:	e7e8      	b.n	80082aa <__hi0bits+0xc>
 80082d8:	2020      	movs	r0, #32
 80082da:	4770      	bx	lr

080082dc <__lo0bits>:
 80082dc:	6803      	ldr	r3, [r0, #0]
 80082de:	f013 0207 	ands.w	r2, r3, #7
 80082e2:	4601      	mov	r1, r0
 80082e4:	d00b      	beq.n	80082fe <__lo0bits+0x22>
 80082e6:	07da      	lsls	r2, r3, #31
 80082e8:	d423      	bmi.n	8008332 <__lo0bits+0x56>
 80082ea:	0798      	lsls	r0, r3, #30
 80082ec:	bf49      	itett	mi
 80082ee:	085b      	lsrmi	r3, r3, #1
 80082f0:	089b      	lsrpl	r3, r3, #2
 80082f2:	2001      	movmi	r0, #1
 80082f4:	600b      	strmi	r3, [r1, #0]
 80082f6:	bf5c      	itt	pl
 80082f8:	600b      	strpl	r3, [r1, #0]
 80082fa:	2002      	movpl	r0, #2
 80082fc:	4770      	bx	lr
 80082fe:	b298      	uxth	r0, r3
 8008300:	b9a8      	cbnz	r0, 800832e <__lo0bits+0x52>
 8008302:	0c1b      	lsrs	r3, r3, #16
 8008304:	2010      	movs	r0, #16
 8008306:	f013 0fff 	tst.w	r3, #255	; 0xff
 800830a:	bf04      	itt	eq
 800830c:	0a1b      	lsreq	r3, r3, #8
 800830e:	3008      	addeq	r0, #8
 8008310:	071a      	lsls	r2, r3, #28
 8008312:	bf04      	itt	eq
 8008314:	091b      	lsreq	r3, r3, #4
 8008316:	3004      	addeq	r0, #4
 8008318:	079a      	lsls	r2, r3, #30
 800831a:	bf04      	itt	eq
 800831c:	089b      	lsreq	r3, r3, #2
 800831e:	3002      	addeq	r0, #2
 8008320:	07da      	lsls	r2, r3, #31
 8008322:	d402      	bmi.n	800832a <__lo0bits+0x4e>
 8008324:	085b      	lsrs	r3, r3, #1
 8008326:	d006      	beq.n	8008336 <__lo0bits+0x5a>
 8008328:	3001      	adds	r0, #1
 800832a:	600b      	str	r3, [r1, #0]
 800832c:	4770      	bx	lr
 800832e:	4610      	mov	r0, r2
 8008330:	e7e9      	b.n	8008306 <__lo0bits+0x2a>
 8008332:	2000      	movs	r0, #0
 8008334:	4770      	bx	lr
 8008336:	2020      	movs	r0, #32
 8008338:	4770      	bx	lr

0800833a <__i2b>:
 800833a:	b510      	push	{r4, lr}
 800833c:	460c      	mov	r4, r1
 800833e:	2101      	movs	r1, #1
 8008340:	f7ff ff27 	bl	8008192 <_Balloc>
 8008344:	2201      	movs	r2, #1
 8008346:	6144      	str	r4, [r0, #20]
 8008348:	6102      	str	r2, [r0, #16]
 800834a:	bd10      	pop	{r4, pc}

0800834c <__multiply>:
 800834c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	4614      	mov	r4, r2
 8008352:	690a      	ldr	r2, [r1, #16]
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	bfb8      	it	lt
 800835a:	460b      	movlt	r3, r1
 800835c:	4688      	mov	r8, r1
 800835e:	bfbc      	itt	lt
 8008360:	46a0      	movlt	r8, r4
 8008362:	461c      	movlt	r4, r3
 8008364:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008368:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800836c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008370:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008374:	eb07 0609 	add.w	r6, r7, r9
 8008378:	42b3      	cmp	r3, r6
 800837a:	bfb8      	it	lt
 800837c:	3101      	addlt	r1, #1
 800837e:	f7ff ff08 	bl	8008192 <_Balloc>
 8008382:	f100 0514 	add.w	r5, r0, #20
 8008386:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800838a:	462b      	mov	r3, r5
 800838c:	2200      	movs	r2, #0
 800838e:	4573      	cmp	r3, lr
 8008390:	d316      	bcc.n	80083c0 <__multiply+0x74>
 8008392:	f104 0214 	add.w	r2, r4, #20
 8008396:	f108 0114 	add.w	r1, r8, #20
 800839a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800839e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	9b00      	ldr	r3, [sp, #0]
 80083a6:	9201      	str	r2, [sp, #4]
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d80c      	bhi.n	80083c6 <__multiply+0x7a>
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	dd03      	ble.n	80083b8 <__multiply+0x6c>
 80083b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d05d      	beq.n	8008474 <__multiply+0x128>
 80083b8:	6106      	str	r6, [r0, #16]
 80083ba:	b003      	add	sp, #12
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	f843 2b04 	str.w	r2, [r3], #4
 80083c4:	e7e3      	b.n	800838e <__multiply+0x42>
 80083c6:	f8b2 b000 	ldrh.w	fp, [r2]
 80083ca:	f1bb 0f00 	cmp.w	fp, #0
 80083ce:	d023      	beq.n	8008418 <__multiply+0xcc>
 80083d0:	4689      	mov	r9, r1
 80083d2:	46ac      	mov	ip, r5
 80083d4:	f04f 0800 	mov.w	r8, #0
 80083d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80083dc:	f8dc a000 	ldr.w	sl, [ip]
 80083e0:	b2a3      	uxth	r3, r4
 80083e2:	fa1f fa8a 	uxth.w	sl, sl
 80083e6:	fb0b a303 	mla	r3, fp, r3, sl
 80083ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083ee:	f8dc 4000 	ldr.w	r4, [ip]
 80083f2:	4443      	add	r3, r8
 80083f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083f8:	fb0b 840a 	mla	r4, fp, sl, r8
 80083fc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008400:	46e2      	mov	sl, ip
 8008402:	b29b      	uxth	r3, r3
 8008404:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008408:	454f      	cmp	r7, r9
 800840a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800840e:	f84a 3b04 	str.w	r3, [sl], #4
 8008412:	d82b      	bhi.n	800846c <__multiply+0x120>
 8008414:	f8cc 8004 	str.w	r8, [ip, #4]
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800841e:	3204      	adds	r2, #4
 8008420:	f1ba 0f00 	cmp.w	sl, #0
 8008424:	d020      	beq.n	8008468 <__multiply+0x11c>
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	4689      	mov	r9, r1
 800842a:	46a8      	mov	r8, r5
 800842c:	f04f 0b00 	mov.w	fp, #0
 8008430:	f8b9 c000 	ldrh.w	ip, [r9]
 8008434:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008438:	fb0a 440c 	mla	r4, sl, ip, r4
 800843c:	445c      	add	r4, fp
 800843e:	46c4      	mov	ip, r8
 8008440:	b29b      	uxth	r3, r3
 8008442:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008446:	f84c 3b04 	str.w	r3, [ip], #4
 800844a:	f859 3b04 	ldr.w	r3, [r9], #4
 800844e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	fb0a b303 	mla	r3, sl, r3, fp
 8008458:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800845c:	454f      	cmp	r7, r9
 800845e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008462:	d805      	bhi.n	8008470 <__multiply+0x124>
 8008464:	f8c8 3004 	str.w	r3, [r8, #4]
 8008468:	3504      	adds	r5, #4
 800846a:	e79b      	b.n	80083a4 <__multiply+0x58>
 800846c:	46d4      	mov	ip, sl
 800846e:	e7b3      	b.n	80083d8 <__multiply+0x8c>
 8008470:	46e0      	mov	r8, ip
 8008472:	e7dd      	b.n	8008430 <__multiply+0xe4>
 8008474:	3e01      	subs	r6, #1
 8008476:	e799      	b.n	80083ac <__multiply+0x60>

08008478 <__pow5mult>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4615      	mov	r5, r2
 800847e:	f012 0203 	ands.w	r2, r2, #3
 8008482:	4606      	mov	r6, r0
 8008484:	460f      	mov	r7, r1
 8008486:	d007      	beq.n	8008498 <__pow5mult+0x20>
 8008488:	3a01      	subs	r2, #1
 800848a:	4c21      	ldr	r4, [pc, #132]	; (8008510 <__pow5mult+0x98>)
 800848c:	2300      	movs	r3, #0
 800848e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008492:	f7ff fec9 	bl	8008228 <__multadd>
 8008496:	4607      	mov	r7, r0
 8008498:	10ad      	asrs	r5, r5, #2
 800849a:	d035      	beq.n	8008508 <__pow5mult+0x90>
 800849c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800849e:	b93c      	cbnz	r4, 80084b0 <__pow5mult+0x38>
 80084a0:	2010      	movs	r0, #16
 80084a2:	f7fd ffd9 	bl	8006458 <malloc>
 80084a6:	6270      	str	r0, [r6, #36]	; 0x24
 80084a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084ac:	6004      	str	r4, [r0, #0]
 80084ae:	60c4      	str	r4, [r0, #12]
 80084b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084b8:	b94c      	cbnz	r4, 80084ce <__pow5mult+0x56>
 80084ba:	f240 2171 	movw	r1, #625	; 0x271
 80084be:	4630      	mov	r0, r6
 80084c0:	f7ff ff3b 	bl	800833a <__i2b>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ca:	4604      	mov	r4, r0
 80084cc:	6003      	str	r3, [r0, #0]
 80084ce:	f04f 0800 	mov.w	r8, #0
 80084d2:	07eb      	lsls	r3, r5, #31
 80084d4:	d50a      	bpl.n	80084ec <__pow5mult+0x74>
 80084d6:	4639      	mov	r1, r7
 80084d8:	4622      	mov	r2, r4
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ff36 	bl	800834c <__multiply>
 80084e0:	4639      	mov	r1, r7
 80084e2:	4681      	mov	r9, r0
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff fe88 	bl	80081fa <_Bfree>
 80084ea:	464f      	mov	r7, r9
 80084ec:	106d      	asrs	r5, r5, #1
 80084ee:	d00b      	beq.n	8008508 <__pow5mult+0x90>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	b938      	cbnz	r0, 8008504 <__pow5mult+0x8c>
 80084f4:	4622      	mov	r2, r4
 80084f6:	4621      	mov	r1, r4
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff ff27 	bl	800834c <__multiply>
 80084fe:	6020      	str	r0, [r4, #0]
 8008500:	f8c0 8000 	str.w	r8, [r0]
 8008504:	4604      	mov	r4, r0
 8008506:	e7e4      	b.n	80084d2 <__pow5mult+0x5a>
 8008508:	4638      	mov	r0, r7
 800850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850e:	bf00      	nop
 8008510:	08009060 	.word	0x08009060

08008514 <__lshift>:
 8008514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008518:	460c      	mov	r4, r1
 800851a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	6849      	ldr	r1, [r1, #4]
 8008522:	eb0a 0903 	add.w	r9, sl, r3
 8008526:	68a3      	ldr	r3, [r4, #8]
 8008528:	4607      	mov	r7, r0
 800852a:	4616      	mov	r6, r2
 800852c:	f109 0501 	add.w	r5, r9, #1
 8008530:	42ab      	cmp	r3, r5
 8008532:	db32      	blt.n	800859a <__lshift+0x86>
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff fe2c 	bl	8008192 <_Balloc>
 800853a:	2300      	movs	r3, #0
 800853c:	4680      	mov	r8, r0
 800853e:	f100 0114 	add.w	r1, r0, #20
 8008542:	461a      	mov	r2, r3
 8008544:	4553      	cmp	r3, sl
 8008546:	db2b      	blt.n	80085a0 <__lshift+0x8c>
 8008548:	6920      	ldr	r0, [r4, #16]
 800854a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800854e:	f104 0314 	add.w	r3, r4, #20
 8008552:	f016 021f 	ands.w	r2, r6, #31
 8008556:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800855a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800855e:	d025      	beq.n	80085ac <__lshift+0x98>
 8008560:	f1c2 0e20 	rsb	lr, r2, #32
 8008564:	2000      	movs	r0, #0
 8008566:	681e      	ldr	r6, [r3, #0]
 8008568:	468a      	mov	sl, r1
 800856a:	4096      	lsls	r6, r2
 800856c:	4330      	orrs	r0, r6
 800856e:	f84a 0b04 	str.w	r0, [sl], #4
 8008572:	f853 0b04 	ldr.w	r0, [r3], #4
 8008576:	459c      	cmp	ip, r3
 8008578:	fa20 f00e 	lsr.w	r0, r0, lr
 800857c:	d814      	bhi.n	80085a8 <__lshift+0x94>
 800857e:	6048      	str	r0, [r1, #4]
 8008580:	b108      	cbz	r0, 8008586 <__lshift+0x72>
 8008582:	f109 0502 	add.w	r5, r9, #2
 8008586:	3d01      	subs	r5, #1
 8008588:	4638      	mov	r0, r7
 800858a:	f8c8 5010 	str.w	r5, [r8, #16]
 800858e:	4621      	mov	r1, r4
 8008590:	f7ff fe33 	bl	80081fa <_Bfree>
 8008594:	4640      	mov	r0, r8
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859a:	3101      	adds	r1, #1
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	e7c7      	b.n	8008530 <__lshift+0x1c>
 80085a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80085a4:	3301      	adds	r3, #1
 80085a6:	e7cd      	b.n	8008544 <__lshift+0x30>
 80085a8:	4651      	mov	r1, sl
 80085aa:	e7dc      	b.n	8008566 <__lshift+0x52>
 80085ac:	3904      	subs	r1, #4
 80085ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80085b6:	459c      	cmp	ip, r3
 80085b8:	d8f9      	bhi.n	80085ae <__lshift+0x9a>
 80085ba:	e7e4      	b.n	8008586 <__lshift+0x72>

080085bc <__mcmp>:
 80085bc:	6903      	ldr	r3, [r0, #16]
 80085be:	690a      	ldr	r2, [r1, #16]
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	b530      	push	{r4, r5, lr}
 80085c4:	d10c      	bne.n	80085e0 <__mcmp+0x24>
 80085c6:	0092      	lsls	r2, r2, #2
 80085c8:	3014      	adds	r0, #20
 80085ca:	3114      	adds	r1, #20
 80085cc:	1884      	adds	r4, r0, r2
 80085ce:	4411      	add	r1, r2
 80085d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085d8:	4295      	cmp	r5, r2
 80085da:	d003      	beq.n	80085e4 <__mcmp+0x28>
 80085dc:	d305      	bcc.n	80085ea <__mcmp+0x2e>
 80085de:	2301      	movs	r3, #1
 80085e0:	4618      	mov	r0, r3
 80085e2:	bd30      	pop	{r4, r5, pc}
 80085e4:	42a0      	cmp	r0, r4
 80085e6:	d3f3      	bcc.n	80085d0 <__mcmp+0x14>
 80085e8:	e7fa      	b.n	80085e0 <__mcmp+0x24>
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	e7f7      	b.n	80085e0 <__mcmp+0x24>

080085f0 <__mdiff>:
 80085f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	460d      	mov	r5, r1
 80085f6:	4607      	mov	r7, r0
 80085f8:	4611      	mov	r1, r2
 80085fa:	4628      	mov	r0, r5
 80085fc:	4614      	mov	r4, r2
 80085fe:	f7ff ffdd 	bl	80085bc <__mcmp>
 8008602:	1e06      	subs	r6, r0, #0
 8008604:	d108      	bne.n	8008618 <__mdiff+0x28>
 8008606:	4631      	mov	r1, r6
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff fdc2 	bl	8008192 <_Balloc>
 800860e:	2301      	movs	r3, #1
 8008610:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008618:	bfa4      	itt	ge
 800861a:	4623      	movge	r3, r4
 800861c:	462c      	movge	r4, r5
 800861e:	4638      	mov	r0, r7
 8008620:	6861      	ldr	r1, [r4, #4]
 8008622:	bfa6      	itte	ge
 8008624:	461d      	movge	r5, r3
 8008626:	2600      	movge	r6, #0
 8008628:	2601      	movlt	r6, #1
 800862a:	f7ff fdb2 	bl	8008192 <_Balloc>
 800862e:	692b      	ldr	r3, [r5, #16]
 8008630:	60c6      	str	r6, [r0, #12]
 8008632:	6926      	ldr	r6, [r4, #16]
 8008634:	f105 0914 	add.w	r9, r5, #20
 8008638:	f104 0214 	add.w	r2, r4, #20
 800863c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008640:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008644:	f100 0514 	add.w	r5, r0, #20
 8008648:	f04f 0e00 	mov.w	lr, #0
 800864c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008650:	f859 4b04 	ldr.w	r4, [r9], #4
 8008654:	fa1e f18a 	uxtah	r1, lr, sl
 8008658:	b2a3      	uxth	r3, r4
 800865a:	1ac9      	subs	r1, r1, r3
 800865c:	0c23      	lsrs	r3, r4, #16
 800865e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008662:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008666:	b289      	uxth	r1, r1
 8008668:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800866c:	45c8      	cmp	r8, r9
 800866e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008672:	4694      	mov	ip, r2
 8008674:	f845 3b04 	str.w	r3, [r5], #4
 8008678:	d8e8      	bhi.n	800864c <__mdiff+0x5c>
 800867a:	45bc      	cmp	ip, r7
 800867c:	d304      	bcc.n	8008688 <__mdiff+0x98>
 800867e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008682:	b183      	cbz	r3, 80086a6 <__mdiff+0xb6>
 8008684:	6106      	str	r6, [r0, #16]
 8008686:	e7c5      	b.n	8008614 <__mdiff+0x24>
 8008688:	f85c 1b04 	ldr.w	r1, [ip], #4
 800868c:	fa1e f381 	uxtah	r3, lr, r1
 8008690:	141a      	asrs	r2, r3, #16
 8008692:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008696:	b29b      	uxth	r3, r3
 8008698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800869c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80086a0:	f845 3b04 	str.w	r3, [r5], #4
 80086a4:	e7e9      	b.n	800867a <__mdiff+0x8a>
 80086a6:	3e01      	subs	r6, #1
 80086a8:	e7e9      	b.n	800867e <__mdiff+0x8e>

080086aa <__d2b>:
 80086aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086ae:	460e      	mov	r6, r1
 80086b0:	2101      	movs	r1, #1
 80086b2:	ec59 8b10 	vmov	r8, r9, d0
 80086b6:	4615      	mov	r5, r2
 80086b8:	f7ff fd6b 	bl	8008192 <_Balloc>
 80086bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086c0:	4607      	mov	r7, r0
 80086c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086c6:	bb34      	cbnz	r4, 8008716 <__d2b+0x6c>
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	f1b8 0300 	subs.w	r3, r8, #0
 80086ce:	d027      	beq.n	8008720 <__d2b+0x76>
 80086d0:	a802      	add	r0, sp, #8
 80086d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80086d6:	f7ff fe01 	bl	80082dc <__lo0bits>
 80086da:	9900      	ldr	r1, [sp, #0]
 80086dc:	b1f0      	cbz	r0, 800871c <__d2b+0x72>
 80086de:	9a01      	ldr	r2, [sp, #4]
 80086e0:	f1c0 0320 	rsb	r3, r0, #32
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	430b      	orrs	r3, r1
 80086ea:	40c2      	lsrs	r2, r0
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	61bb      	str	r3, [r7, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf14      	ite	ne
 80086f8:	2102      	movne	r1, #2
 80086fa:	2101      	moveq	r1, #1
 80086fc:	6139      	str	r1, [r7, #16]
 80086fe:	b1c4      	cbz	r4, 8008732 <__d2b+0x88>
 8008700:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008704:	4404      	add	r4, r0
 8008706:	6034      	str	r4, [r6, #0]
 8008708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800870c:	6028      	str	r0, [r5, #0]
 800870e:	4638      	mov	r0, r7
 8008710:	b003      	add	sp, #12
 8008712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871a:	e7d5      	b.n	80086c8 <__d2b+0x1e>
 800871c:	6179      	str	r1, [r7, #20]
 800871e:	e7e7      	b.n	80086f0 <__d2b+0x46>
 8008720:	a801      	add	r0, sp, #4
 8008722:	f7ff fddb 	bl	80082dc <__lo0bits>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	2101      	movs	r1, #1
 800872c:	6139      	str	r1, [r7, #16]
 800872e:	3020      	adds	r0, #32
 8008730:	e7e5      	b.n	80086fe <__d2b+0x54>
 8008732:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008736:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800873a:	6030      	str	r0, [r6, #0]
 800873c:	6918      	ldr	r0, [r3, #16]
 800873e:	f7ff fdae 	bl	800829e <__hi0bits>
 8008742:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008746:	e7e1      	b.n	800870c <__d2b+0x62>

08008748 <_calloc_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	fb02 f401 	mul.w	r4, r2, r1
 800874e:	4621      	mov	r1, r4
 8008750:	f7fd fee0 	bl	8006514 <_malloc_r>
 8008754:	4605      	mov	r5, r0
 8008756:	b118      	cbz	r0, 8008760 <_calloc_r+0x18>
 8008758:	4622      	mov	r2, r4
 800875a:	2100      	movs	r1, #0
 800875c:	f7fd fe84 	bl	8006468 <memset>
 8008760:	4628      	mov	r0, r5
 8008762:	bd38      	pop	{r3, r4, r5, pc}

08008764 <__sfputc_r>:
 8008764:	6893      	ldr	r3, [r2, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	b410      	push	{r4}
 800876c:	6093      	str	r3, [r2, #8]
 800876e:	da08      	bge.n	8008782 <__sfputc_r+0x1e>
 8008770:	6994      	ldr	r4, [r2, #24]
 8008772:	42a3      	cmp	r3, r4
 8008774:	db01      	blt.n	800877a <__sfputc_r+0x16>
 8008776:	290a      	cmp	r1, #10
 8008778:	d103      	bne.n	8008782 <__sfputc_r+0x1e>
 800877a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877e:	f7fe bc0b 	b.w	8006f98 <__swbuf_r>
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	1c58      	adds	r0, r3, #1
 8008786:	6010      	str	r0, [r2, #0]
 8008788:	7019      	strb	r1, [r3, #0]
 800878a:	4608      	mov	r0, r1
 800878c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008790:	4770      	bx	lr

08008792 <__sfputs_r>:
 8008792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	4614      	mov	r4, r2
 800879a:	18d5      	adds	r5, r2, r3
 800879c:	42ac      	cmp	r4, r5
 800879e:	d101      	bne.n	80087a4 <__sfputs_r+0x12>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e007      	b.n	80087b4 <__sfputs_r+0x22>
 80087a4:	463a      	mov	r2, r7
 80087a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ffda 	bl	8008764 <__sfputc_r>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d1f3      	bne.n	800879c <__sfputs_r+0xa>
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087b8 <_vfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	460c      	mov	r4, r1
 80087be:	b09d      	sub	sp, #116	; 0x74
 80087c0:	4617      	mov	r7, r2
 80087c2:	461d      	mov	r5, r3
 80087c4:	4606      	mov	r6, r0
 80087c6:	b118      	cbz	r0, 80087d0 <_vfiprintf_r+0x18>
 80087c8:	6983      	ldr	r3, [r0, #24]
 80087ca:	b90b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x18>
 80087cc:	f7ff fbd8 	bl	8007f80 <__sinit>
 80087d0:	4b7c      	ldr	r3, [pc, #496]	; (80089c4 <_vfiprintf_r+0x20c>)
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d158      	bne.n	8008888 <_vfiprintf_r+0xd0>
 80087d6:	6874      	ldr	r4, [r6, #4]
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	0718      	lsls	r0, r3, #28
 80087dc:	d55e      	bpl.n	800889c <_vfiprintf_r+0xe4>
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d05b      	beq.n	800889c <_vfiprintf_r+0xe4>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9309      	str	r3, [sp, #36]	; 0x24
 80087e8:	2320      	movs	r3, #32
 80087ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ee:	2330      	movs	r3, #48	; 0x30
 80087f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f4:	9503      	str	r5, [sp, #12]
 80087f6:	f04f 0b01 	mov.w	fp, #1
 80087fa:	46b8      	mov	r8, r7
 80087fc:	4645      	mov	r5, r8
 80087fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008802:	b10b      	cbz	r3, 8008808 <_vfiprintf_r+0x50>
 8008804:	2b25      	cmp	r3, #37	; 0x25
 8008806:	d154      	bne.n	80088b2 <_vfiprintf_r+0xfa>
 8008808:	ebb8 0a07 	subs.w	sl, r8, r7
 800880c:	d00b      	beq.n	8008826 <_vfiprintf_r+0x6e>
 800880e:	4653      	mov	r3, sl
 8008810:	463a      	mov	r2, r7
 8008812:	4621      	mov	r1, r4
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff ffbc 	bl	8008792 <__sfputs_r>
 800881a:	3001      	adds	r0, #1
 800881c:	f000 80c2 	beq.w	80089a4 <_vfiprintf_r+0x1ec>
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	4453      	add	r3, sl
 8008824:	9309      	str	r3, [sp, #36]	; 0x24
 8008826:	f898 3000 	ldrb.w	r3, [r8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80ba 	beq.w	80089a4 <_vfiprintf_r+0x1ec>
 8008830:	2300      	movs	r3, #0
 8008832:	f04f 32ff 	mov.w	r2, #4294967295
 8008836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	9307      	str	r3, [sp, #28]
 800883e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008842:	931a      	str	r3, [sp, #104]	; 0x68
 8008844:	46a8      	mov	r8, r5
 8008846:	2205      	movs	r2, #5
 8008848:	f818 1b01 	ldrb.w	r1, [r8], #1
 800884c:	485e      	ldr	r0, [pc, #376]	; (80089c8 <_vfiprintf_r+0x210>)
 800884e:	f7f7 fce7 	bl	8000220 <memchr>
 8008852:	9b04      	ldr	r3, [sp, #16]
 8008854:	bb78      	cbnz	r0, 80088b6 <_vfiprintf_r+0xfe>
 8008856:	06d9      	lsls	r1, r3, #27
 8008858:	bf44      	itt	mi
 800885a:	2220      	movmi	r2, #32
 800885c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008860:	071a      	lsls	r2, r3, #28
 8008862:	bf44      	itt	mi
 8008864:	222b      	movmi	r2, #43	; 0x2b
 8008866:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800886a:	782a      	ldrb	r2, [r5, #0]
 800886c:	2a2a      	cmp	r2, #42	; 0x2a
 800886e:	d02a      	beq.n	80088c6 <_vfiprintf_r+0x10e>
 8008870:	9a07      	ldr	r2, [sp, #28]
 8008872:	46a8      	mov	r8, r5
 8008874:	2000      	movs	r0, #0
 8008876:	250a      	movs	r5, #10
 8008878:	4641      	mov	r1, r8
 800887a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887e:	3b30      	subs	r3, #48	; 0x30
 8008880:	2b09      	cmp	r3, #9
 8008882:	d969      	bls.n	8008958 <_vfiprintf_r+0x1a0>
 8008884:	b360      	cbz	r0, 80088e0 <_vfiprintf_r+0x128>
 8008886:	e024      	b.n	80088d2 <_vfiprintf_r+0x11a>
 8008888:	4b50      	ldr	r3, [pc, #320]	; (80089cc <_vfiprintf_r+0x214>)
 800888a:	429c      	cmp	r4, r3
 800888c:	d101      	bne.n	8008892 <_vfiprintf_r+0xda>
 800888e:	68b4      	ldr	r4, [r6, #8]
 8008890:	e7a2      	b.n	80087d8 <_vfiprintf_r+0x20>
 8008892:	4b4f      	ldr	r3, [pc, #316]	; (80089d0 <_vfiprintf_r+0x218>)
 8008894:	429c      	cmp	r4, r3
 8008896:	bf08      	it	eq
 8008898:	68f4      	ldreq	r4, [r6, #12]
 800889a:	e79d      	b.n	80087d8 <_vfiprintf_r+0x20>
 800889c:	4621      	mov	r1, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	f7fe fbcc 	bl	800703c <__swsetup_r>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d09d      	beq.n	80087e4 <_vfiprintf_r+0x2c>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b01d      	add	sp, #116	; 0x74
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	46a8      	mov	r8, r5
 80088b4:	e7a2      	b.n	80087fc <_vfiprintf_r+0x44>
 80088b6:	4a44      	ldr	r2, [pc, #272]	; (80089c8 <_vfiprintf_r+0x210>)
 80088b8:	1a80      	subs	r0, r0, r2
 80088ba:	fa0b f000 	lsl.w	r0, fp, r0
 80088be:	4318      	orrs	r0, r3
 80088c0:	9004      	str	r0, [sp, #16]
 80088c2:	4645      	mov	r5, r8
 80088c4:	e7be      	b.n	8008844 <_vfiprintf_r+0x8c>
 80088c6:	9a03      	ldr	r2, [sp, #12]
 80088c8:	1d11      	adds	r1, r2, #4
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	9103      	str	r1, [sp, #12]
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	db01      	blt.n	80088d6 <_vfiprintf_r+0x11e>
 80088d2:	9207      	str	r2, [sp, #28]
 80088d4:	e004      	b.n	80088e0 <_vfiprintf_r+0x128>
 80088d6:	4252      	negs	r2, r2
 80088d8:	f043 0302 	orr.w	r3, r3, #2
 80088dc:	9207      	str	r2, [sp, #28]
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	f898 3000 	ldrb.w	r3, [r8]
 80088e4:	2b2e      	cmp	r3, #46	; 0x2e
 80088e6:	d10e      	bne.n	8008906 <_vfiprintf_r+0x14e>
 80088e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80088ec:	2b2a      	cmp	r3, #42	; 0x2a
 80088ee:	d138      	bne.n	8008962 <_vfiprintf_r+0x1aa>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	9203      	str	r2, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfb8      	it	lt
 80088fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008900:	f108 0802 	add.w	r8, r8, #2
 8008904:	9305      	str	r3, [sp, #20]
 8008906:	4d33      	ldr	r5, [pc, #204]	; (80089d4 <_vfiprintf_r+0x21c>)
 8008908:	f898 1000 	ldrb.w	r1, [r8]
 800890c:	2203      	movs	r2, #3
 800890e:	4628      	mov	r0, r5
 8008910:	f7f7 fc86 	bl	8000220 <memchr>
 8008914:	b140      	cbz	r0, 8008928 <_vfiprintf_r+0x170>
 8008916:	2340      	movs	r3, #64	; 0x40
 8008918:	1b40      	subs	r0, r0, r5
 800891a:	fa03 f000 	lsl.w	r0, r3, r0
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	4303      	orrs	r3, r0
 8008922:	f108 0801 	add.w	r8, r8, #1
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	f898 1000 	ldrb.w	r1, [r8]
 800892c:	482a      	ldr	r0, [pc, #168]	; (80089d8 <_vfiprintf_r+0x220>)
 800892e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008932:	2206      	movs	r2, #6
 8008934:	f108 0701 	add.w	r7, r8, #1
 8008938:	f7f7 fc72 	bl	8000220 <memchr>
 800893c:	2800      	cmp	r0, #0
 800893e:	d037      	beq.n	80089b0 <_vfiprintf_r+0x1f8>
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <_vfiprintf_r+0x224>)
 8008942:	bb1b      	cbnz	r3, 800898c <_vfiprintf_r+0x1d4>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	444b      	add	r3, r9
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	e750      	b.n	80087fa <_vfiprintf_r+0x42>
 8008958:	fb05 3202 	mla	r2, r5, r2, r3
 800895c:	2001      	movs	r0, #1
 800895e:	4688      	mov	r8, r1
 8008960:	e78a      	b.n	8008878 <_vfiprintf_r+0xc0>
 8008962:	2300      	movs	r3, #0
 8008964:	f108 0801 	add.w	r8, r8, #1
 8008968:	9305      	str	r3, [sp, #20]
 800896a:	4619      	mov	r1, r3
 800896c:	250a      	movs	r5, #10
 800896e:	4640      	mov	r0, r8
 8008970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008974:	3a30      	subs	r2, #48	; 0x30
 8008976:	2a09      	cmp	r2, #9
 8008978:	d903      	bls.n	8008982 <_vfiprintf_r+0x1ca>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c3      	beq.n	8008906 <_vfiprintf_r+0x14e>
 800897e:	9105      	str	r1, [sp, #20]
 8008980:	e7c1      	b.n	8008906 <_vfiprintf_r+0x14e>
 8008982:	fb05 2101 	mla	r1, r5, r1, r2
 8008986:	2301      	movs	r3, #1
 8008988:	4680      	mov	r8, r0
 800898a:	e7f0      	b.n	800896e <_vfiprintf_r+0x1b6>
 800898c:	ab03      	add	r3, sp, #12
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4622      	mov	r2, r4
 8008992:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <_vfiprintf_r+0x228>)
 8008994:	a904      	add	r1, sp, #16
 8008996:	4630      	mov	r0, r6
 8008998:	f7fd feaa 	bl	80066f0 <_printf_float>
 800899c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089a0:	4681      	mov	r9, r0
 80089a2:	d1d5      	bne.n	8008950 <_vfiprintf_r+0x198>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	065b      	lsls	r3, r3, #25
 80089a8:	f53f af7e 	bmi.w	80088a8 <_vfiprintf_r+0xf0>
 80089ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ae:	e77d      	b.n	80088ac <_vfiprintf_r+0xf4>
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	4622      	mov	r2, r4
 80089b6:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <_vfiprintf_r+0x228>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7fe f94e 	bl	8006c5c <_printf_i>
 80089c0:	e7ec      	b.n	800899c <_vfiprintf_r+0x1e4>
 80089c2:	bf00      	nop
 80089c4:	08008f2c 	.word	0x08008f2c
 80089c8:	0800906c 	.word	0x0800906c
 80089cc:	08008f4c 	.word	0x08008f4c
 80089d0:	08008f0c 	.word	0x08008f0c
 80089d4:	08009072 	.word	0x08009072
 80089d8:	08009076 	.word	0x08009076
 80089dc:	080066f1 	.word	0x080066f1
 80089e0:	08008793 	.word	0x08008793

080089e4 <__sread>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	460c      	mov	r4, r1
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	f000 f8a6 	bl	8008b3c <_read_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	bfab      	itete	ge
 80089f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089f6:	89a3      	ldrhlt	r3, [r4, #12]
 80089f8:	181b      	addge	r3, r3, r0
 80089fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089fe:	bfac      	ite	ge
 8008a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a02:	81a3      	strhlt	r3, [r4, #12]
 8008a04:	bd10      	pop	{r4, pc}

08008a06 <__swrite>:
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	05db      	lsls	r3, r3, #23
 8008a10:	4605      	mov	r5, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	4616      	mov	r6, r2
 8008a16:	d505      	bpl.n	8008a24 <__swrite+0x1e>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	f000 f868 	bl	8008af4 <_lseek_r>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	4628      	mov	r0, r5
 8008a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	f000 b817 	b.w	8008a6c <_write_r>

08008a3e <__sseek>:
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	460c      	mov	r4, r1
 8008a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a46:	f000 f855 	bl	8008af4 <_lseek_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	bf15      	itete	ne
 8008a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a5a:	81a3      	strheq	r3, [r4, #12]
 8008a5c:	bf18      	it	ne
 8008a5e:	81a3      	strhne	r3, [r4, #12]
 8008a60:	bd10      	pop	{r4, pc}

08008a62 <__sclose>:
 8008a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a66:	f000 b813 	b.w	8008a90 <_close_r>
	...

08008a6c <_write_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4c07      	ldr	r4, [pc, #28]	; (8008a8c <_write_r+0x20>)
 8008a70:	4605      	mov	r5, r0
 8008a72:	4608      	mov	r0, r1
 8008a74:	4611      	mov	r1, r2
 8008a76:	2200      	movs	r2, #0
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f7f9 fa9d 	bl	8001fba <_write>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_write_r+0x1e>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_write_r+0x1e>
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20000e9c 	.word	0x20000e9c

08008a90 <_close_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4c06      	ldr	r4, [pc, #24]	; (8008aac <_close_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4605      	mov	r5, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	f7f9 faa9 	bl	8001ff2 <_close>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_close_r+0x1a>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_close_r+0x1a>
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20000e9c 	.word	0x20000e9c

08008ab0 <_fstat_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4c07      	ldr	r4, [pc, #28]	; (8008ad0 <_fstat_r+0x20>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	f7f9 faa4 	bl	800200a <_fstat>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d102      	bne.n	8008acc <_fstat_r+0x1c>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	b103      	cbz	r3, 8008acc <_fstat_r+0x1c>
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000e9c 	.word	0x20000e9c

08008ad4 <_isatty_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4c06      	ldr	r4, [pc, #24]	; (8008af0 <_isatty_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4605      	mov	r5, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	f7f9 faa3 	bl	800202a <_isatty>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_isatty_r+0x1a>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_isatty_r+0x1a>
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20000e9c 	.word	0x20000e9c

08008af4 <_lseek_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4c07      	ldr	r4, [pc, #28]	; (8008b14 <_lseek_r+0x20>)
 8008af8:	4605      	mov	r5, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	6022      	str	r2, [r4, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f9 fa9c 	bl	8002040 <_lseek>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_lseek_r+0x1e>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_lseek_r+0x1e>
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20000e9c 	.word	0x20000e9c

08008b18 <__ascii_mbtowc>:
 8008b18:	b082      	sub	sp, #8
 8008b1a:	b901      	cbnz	r1, 8008b1e <__ascii_mbtowc+0x6>
 8008b1c:	a901      	add	r1, sp, #4
 8008b1e:	b142      	cbz	r2, 8008b32 <__ascii_mbtowc+0x1a>
 8008b20:	b14b      	cbz	r3, 8008b36 <__ascii_mbtowc+0x1e>
 8008b22:	7813      	ldrb	r3, [r2, #0]
 8008b24:	600b      	str	r3, [r1, #0]
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	1c10      	adds	r0, r2, #0
 8008b2a:	bf18      	it	ne
 8008b2c:	2001      	movne	r0, #1
 8008b2e:	b002      	add	sp, #8
 8008b30:	4770      	bx	lr
 8008b32:	4610      	mov	r0, r2
 8008b34:	e7fb      	b.n	8008b2e <__ascii_mbtowc+0x16>
 8008b36:	f06f 0001 	mvn.w	r0, #1
 8008b3a:	e7f8      	b.n	8008b2e <__ascii_mbtowc+0x16>

08008b3c <_read_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4c07      	ldr	r4, [pc, #28]	; (8008b5c <_read_r+0x20>)
 8008b40:	4605      	mov	r5, r0
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	6022      	str	r2, [r4, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7f9 fa18 	bl	8001f80 <_read>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_read_r+0x1e>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_read_r+0x1e>
 8008b58:	602b      	str	r3, [r5, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20000e9c 	.word	0x20000e9c

08008b60 <__ascii_wctomb>:
 8008b60:	b149      	cbz	r1, 8008b76 <__ascii_wctomb+0x16>
 8008b62:	2aff      	cmp	r2, #255	; 0xff
 8008b64:	bf85      	ittet	hi
 8008b66:	238a      	movhi	r3, #138	; 0x8a
 8008b68:	6003      	strhi	r3, [r0, #0]
 8008b6a:	700a      	strbls	r2, [r1, #0]
 8008b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b70:	bf98      	it	ls
 8008b72:	2001      	movls	r0, #1
 8008b74:	4770      	bx	lr
 8008b76:	4608      	mov	r0, r1
 8008b78:	4770      	bx	lr
	...

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
